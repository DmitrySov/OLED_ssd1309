
OLED_ssd1309.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bb0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001814  08007d40  08007d40  00017d40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009554  08009554  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  08009554  08009554  00019554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800955c  0800955c  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800955c  0800955c  0001955c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009560  08009560  00019560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08009564  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e8  2**0
                  CONTENTS
 10 .bss          00000508  200001e8  200001e8  000201e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200006f0  200006f0  000201e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010771  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000248b  00000000  00000000  00030989  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e20  00000000  00000000  00032e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d08  00000000  00000000  00033c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021f6b  00000000  00000000  00034940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f976  00000000  00000000  000568ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1ada  00000000  00000000  00066221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00137cfb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005044  00000000  00000000  00137d50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007d28 	.word	0x08007d28

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	08007d28 	.word	0x08007d28

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ff0:	f000 fd92 	bl	8001b18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ff4:	f000 f81a 	bl	800102c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ff8:	f000 f94a 	bl	8001290 <MX_GPIO_Init>
  MX_RTC_Init();
 8000ffc:	f000 f882 	bl	8001104 <MX_RTC_Init>
  MX_TIM6_Init();
 8001000:	f000 f910 	bl	8001224 <MX_TIM6_Init>
  MX_SPI1_Init();
 8001004:	f000 f8d8 	bl	80011b8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  SSD1309_init();
 8001008:	f000 fa32 	bl	8001470 <SSD1309_init>
 // HAL_Delay(100);
  Clear_Screen();
 800100c:	f000 fad4 	bl	80015b8 <Clear_Screen>
  /*uint8_t flag_key1_press = 1;
  uint8_t flag_wait = 1;
  uint32_t time_key1_press = 0;
  uint8_t flag_str = 0;*/

  SSD1309_WriteChar(0, 0, 'H', &Font_16x26);
 8001010:	4b05      	ldr	r3, [pc, #20]	; (8001028 <main+0x3c>)
 8001012:	2248      	movs	r2, #72	; 0x48
 8001014:	2100      	movs	r1, #0
 8001016:	2000      	movs	r0, #0
 8001018:	f000 fb40 	bl	800169c <SSD1309_WriteChar>
  SSD1309_UpdateScreen();
 800101c:	f000 fb24 	bl	8001668 <SSD1309_UpdateScreen>
  HAL_Delay(100);
 8001020:	2064      	movs	r0, #100	; 0x64
 8001022:	f000 fdeb 	bl	8001bfc <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001026:	e7fe      	b.n	8001026 <main+0x3a>
 8001028:	20000000 	.word	0x20000000

0800102c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b094      	sub	sp, #80	; 0x50
 8001030:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001032:	f107 0320 	add.w	r3, r7, #32
 8001036:	2230      	movs	r2, #48	; 0x30
 8001038:	2100      	movs	r1, #0
 800103a:	4618      	mov	r0, r3
 800103c:	f002 fa46 	bl	80034cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001040:	f107 030c 	add.w	r3, r7, #12
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001050:	2300      	movs	r3, #0
 8001052:	60bb      	str	r3, [r7, #8]
 8001054:	4b29      	ldr	r3, [pc, #164]	; (80010fc <SystemClock_Config+0xd0>)
 8001056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001058:	4a28      	ldr	r2, [pc, #160]	; (80010fc <SystemClock_Config+0xd0>)
 800105a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800105e:	6413      	str	r3, [r2, #64]	; 0x40
 8001060:	4b26      	ldr	r3, [pc, #152]	; (80010fc <SystemClock_Config+0xd0>)
 8001062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001064:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001068:	60bb      	str	r3, [r7, #8]
 800106a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800106c:	2300      	movs	r3, #0
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	4b23      	ldr	r3, [pc, #140]	; (8001100 <SystemClock_Config+0xd4>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a22      	ldr	r2, [pc, #136]	; (8001100 <SystemClock_Config+0xd4>)
 8001076:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800107a:	6013      	str	r3, [r2, #0]
 800107c:	4b20      	ldr	r3, [pc, #128]	; (8001100 <SystemClock_Config+0xd4>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001084:	607b      	str	r3, [r7, #4]
 8001086:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001088:	230a      	movs	r3, #10
 800108a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800108c:	2301      	movs	r3, #1
 800108e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001090:	2310      	movs	r3, #16
 8001092:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001094:	2301      	movs	r3, #1
 8001096:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001098:	2302      	movs	r3, #2
 800109a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800109c:	2300      	movs	r3, #0
 800109e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010a0:	2308      	movs	r3, #8
 80010a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80010a4:	23a8      	movs	r3, #168	; 0xa8
 80010a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010a8:	2302      	movs	r3, #2
 80010aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010ac:	2304      	movs	r3, #4
 80010ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010b0:	f107 0320 	add.w	r3, r7, #32
 80010b4:	4618      	mov	r0, r3
 80010b6:	f001 f861 	bl	800217c <HAL_RCC_OscConfig>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80010c0:	f000 f9d0 	bl	8001464 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010c4:	230f      	movs	r3, #15
 80010c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010c8:	2302      	movs	r3, #2
 80010ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010cc:	2300      	movs	r3, #0
 80010ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010d0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010dc:	f107 030c 	add.w	r3, r7, #12
 80010e0:	2105      	movs	r1, #5
 80010e2:	4618      	mov	r0, r3
 80010e4:	f001 fac2 	bl	800266c <HAL_RCC_ClockConfig>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80010ee:	f000 f9b9 	bl	8001464 <Error_Handler>
  }
}
 80010f2:	bf00      	nop
 80010f4:	3750      	adds	r7, #80	; 0x50
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40023800 	.word	0x40023800
 8001100:	40007000 	.word	0x40007000

08001104 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800110a:	1d3b      	adds	r3, r7, #4
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001118:	2300      	movs	r3, #0
 800111a:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800111c:	4b24      	ldr	r3, [pc, #144]	; (80011b0 <MX_RTC_Init+0xac>)
 800111e:	4a25      	ldr	r2, [pc, #148]	; (80011b4 <MX_RTC_Init+0xb0>)
 8001120:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001122:	4b23      	ldr	r3, [pc, #140]	; (80011b0 <MX_RTC_Init+0xac>)
 8001124:	2200      	movs	r2, #0
 8001126:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001128:	4b21      	ldr	r3, [pc, #132]	; (80011b0 <MX_RTC_Init+0xac>)
 800112a:	227f      	movs	r2, #127	; 0x7f
 800112c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800112e:	4b20      	ldr	r3, [pc, #128]	; (80011b0 <MX_RTC_Init+0xac>)
 8001130:	22ff      	movs	r2, #255	; 0xff
 8001132:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001134:	4b1e      	ldr	r3, [pc, #120]	; (80011b0 <MX_RTC_Init+0xac>)
 8001136:	2200      	movs	r2, #0
 8001138:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800113a:	4b1d      	ldr	r3, [pc, #116]	; (80011b0 <MX_RTC_Init+0xac>)
 800113c:	2200      	movs	r2, #0
 800113e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001140:	4b1b      	ldr	r3, [pc, #108]	; (80011b0 <MX_RTC_Init+0xac>)
 8001142:	2200      	movs	r2, #0
 8001144:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001146:	481a      	ldr	r0, [pc, #104]	; (80011b0 <MX_RTC_Init+0xac>)
 8001148:	f001 fd3a 	bl	8002bc0 <HAL_RTC_Init>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001152:	f000 f987 	bl	8001464 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001156:	2300      	movs	r3, #0
 8001158:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800115a:	2300      	movs	r3, #0
 800115c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800115e:	2300      	movs	r3, #0
 8001160:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001162:	2300      	movs	r3, #0
 8001164:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001166:	2300      	movs	r3, #0
 8001168:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800116a:	1d3b      	adds	r3, r7, #4
 800116c:	2201      	movs	r2, #1
 800116e:	4619      	mov	r1, r3
 8001170:	480f      	ldr	r0, [pc, #60]	; (80011b0 <MX_RTC_Init+0xac>)
 8001172:	f001 fdb6 	bl	8002ce2 <HAL_RTC_SetTime>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 800117c:	f000 f972 	bl	8001464 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001180:	2301      	movs	r3, #1
 8001182:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001184:	2301      	movs	r3, #1
 8001186:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001188:	2301      	movs	r3, #1
 800118a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 800118c:	2300      	movs	r3, #0
 800118e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001190:	463b      	mov	r3, r7
 8001192:	2201      	movs	r2, #1
 8001194:	4619      	mov	r1, r3
 8001196:	4806      	ldr	r0, [pc, #24]	; (80011b0 <MX_RTC_Init+0xac>)
 8001198:	f001 fe60 	bl	8002e5c <HAL_RTC_SetDate>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80011a2:	f000 f95f 	bl	8001464 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80011a6:	bf00      	nop
 80011a8:	3718      	adds	r7, #24
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000614 	.word	0x20000614
 80011b4:	40002800 	.word	0x40002800

080011b8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011bc:	4b17      	ldr	r3, [pc, #92]	; (800121c <MX_SPI1_Init+0x64>)
 80011be:	4a18      	ldr	r2, [pc, #96]	; (8001220 <MX_SPI1_Init+0x68>)
 80011c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011c2:	4b16      	ldr	r3, [pc, #88]	; (800121c <MX_SPI1_Init+0x64>)
 80011c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011ca:	4b14      	ldr	r3, [pc, #80]	; (800121c <MX_SPI1_Init+0x64>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011d0:	4b12      	ldr	r3, [pc, #72]	; (800121c <MX_SPI1_Init+0x64>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011d6:	4b11      	ldr	r3, [pc, #68]	; (800121c <MX_SPI1_Init+0x64>)
 80011d8:	2200      	movs	r2, #0
 80011da:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011dc:	4b0f      	ldr	r3, [pc, #60]	; (800121c <MX_SPI1_Init+0x64>)
 80011de:	2200      	movs	r2, #0
 80011e0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011e2:	4b0e      	ldr	r3, [pc, #56]	; (800121c <MX_SPI1_Init+0x64>)
 80011e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011e8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011ea:	4b0c      	ldr	r3, [pc, #48]	; (800121c <MX_SPI1_Init+0x64>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011f0:	4b0a      	ldr	r3, [pc, #40]	; (800121c <MX_SPI1_Init+0x64>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011f6:	4b09      	ldr	r3, [pc, #36]	; (800121c <MX_SPI1_Init+0x64>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011fc:	4b07      	ldr	r3, [pc, #28]	; (800121c <MX_SPI1_Init+0x64>)
 80011fe:	2200      	movs	r2, #0
 8001200:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001202:	4b06      	ldr	r3, [pc, #24]	; (800121c <MX_SPI1_Init+0x64>)
 8001204:	220a      	movs	r2, #10
 8001206:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001208:	4804      	ldr	r0, [pc, #16]	; (800121c <MX_SPI1_Init+0x64>)
 800120a:	f001 ff40 	bl	800308e <HAL_SPI_Init>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001214:	f000 f926 	bl	8001464 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001218:	bf00      	nop
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20000684 	.word	0x20000684
 8001220:	40013000 	.word	0x40013000

08001224 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800122a:	463b      	mov	r3, r7
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001232:	4b15      	ldr	r3, [pc, #84]	; (8001288 <MX_TIM6_Init+0x64>)
 8001234:	4a15      	ldr	r2, [pc, #84]	; (800128c <MX_TIM6_Init+0x68>)
 8001236:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8400;
 8001238:	4b13      	ldr	r3, [pc, #76]	; (8001288 <MX_TIM6_Init+0x64>)
 800123a:	f242 02d0 	movw	r2, #8400	; 0x20d0
 800123e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001240:	4b11      	ldr	r3, [pc, #68]	; (8001288 <MX_TIM6_Init+0x64>)
 8001242:	2200      	movs	r2, #0
 8001244:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 30000;
 8001246:	4b10      	ldr	r3, [pc, #64]	; (8001288 <MX_TIM6_Init+0x64>)
 8001248:	f247 5230 	movw	r2, #30000	; 0x7530
 800124c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800124e:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <MX_TIM6_Init+0x64>)
 8001250:	2200      	movs	r2, #0
 8001252:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001254:	480c      	ldr	r0, [pc, #48]	; (8001288 <MX_TIM6_Init+0x64>)
 8001256:	f001 ffa3 	bl	80031a0 <HAL_TIM_Base_Init>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001260:	f000 f900 	bl	8001464 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001264:	2300      	movs	r3, #0
 8001266:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001268:	2300      	movs	r3, #0
 800126a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800126c:	463b      	mov	r3, r7
 800126e:	4619      	mov	r1, r3
 8001270:	4805      	ldr	r0, [pc, #20]	; (8001288 <MX_TIM6_Init+0x64>)
 8001272:	f002 f885 	bl	8003380 <HAL_TIMEx_MasterConfigSynchronization>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800127c:	f000 f8f2 	bl	8001464 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001280:	bf00      	nop
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	20000634 	.word	0x20000634
 800128c:	40001000 	.word	0x40001000

08001290 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b08c      	sub	sp, #48	; 0x30
 8001294:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001296:	f107 031c 	add.w	r3, r7, #28
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]
 80012a0:	609a      	str	r2, [r3, #8]
 80012a2:	60da      	str	r2, [r3, #12]
 80012a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	61bb      	str	r3, [r7, #24]
 80012aa:	4b68      	ldr	r3, [pc, #416]	; (800144c <MX_GPIO_Init+0x1bc>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	4a67      	ldr	r2, [pc, #412]	; (800144c <MX_GPIO_Init+0x1bc>)
 80012b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012b4:	6313      	str	r3, [r2, #48]	; 0x30
 80012b6:	4b65      	ldr	r3, [pc, #404]	; (800144c <MX_GPIO_Init+0x1bc>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012be:	61bb      	str	r3, [r7, #24]
 80012c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	617b      	str	r3, [r7, #20]
 80012c6:	4b61      	ldr	r3, [pc, #388]	; (800144c <MX_GPIO_Init+0x1bc>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	4a60      	ldr	r2, [pc, #384]	; (800144c <MX_GPIO_Init+0x1bc>)
 80012cc:	f043 0304 	orr.w	r3, r3, #4
 80012d0:	6313      	str	r3, [r2, #48]	; 0x30
 80012d2:	4b5e      	ldr	r3, [pc, #376]	; (800144c <MX_GPIO_Init+0x1bc>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	f003 0304 	and.w	r3, r3, #4
 80012da:	617b      	str	r3, [r7, #20]
 80012dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	613b      	str	r3, [r7, #16]
 80012e2:	4b5a      	ldr	r3, [pc, #360]	; (800144c <MX_GPIO_Init+0x1bc>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	4a59      	ldr	r2, [pc, #356]	; (800144c <MX_GPIO_Init+0x1bc>)
 80012e8:	f043 0301 	orr.w	r3, r3, #1
 80012ec:	6313      	str	r3, [r2, #48]	; 0x30
 80012ee:	4b57      	ldr	r3, [pc, #348]	; (800144c <MX_GPIO_Init+0x1bc>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	613b      	str	r3, [r7, #16]
 80012f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	60fb      	str	r3, [r7, #12]
 80012fe:	4b53      	ldr	r3, [pc, #332]	; (800144c <MX_GPIO_Init+0x1bc>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	4a52      	ldr	r2, [pc, #328]	; (800144c <MX_GPIO_Init+0x1bc>)
 8001304:	f043 0310 	orr.w	r3, r3, #16
 8001308:	6313      	str	r3, [r2, #48]	; 0x30
 800130a:	4b50      	ldr	r3, [pc, #320]	; (800144c <MX_GPIO_Init+0x1bc>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	f003 0310 	and.w	r3, r3, #16
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	60bb      	str	r3, [r7, #8]
 800131a:	4b4c      	ldr	r3, [pc, #304]	; (800144c <MX_GPIO_Init+0x1bc>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	4a4b      	ldr	r2, [pc, #300]	; (800144c <MX_GPIO_Init+0x1bc>)
 8001320:	f043 0308 	orr.w	r3, r3, #8
 8001324:	6313      	str	r3, [r2, #48]	; 0x30
 8001326:	4b49      	ldr	r3, [pc, #292]	; (800144c <MX_GPIO_Init+0x1bc>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	f003 0308 	and.w	r3, r3, #8
 800132e:	60bb      	str	r3, [r7, #8]
 8001330:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	607b      	str	r3, [r7, #4]
 8001336:	4b45      	ldr	r3, [pc, #276]	; (800144c <MX_GPIO_Init+0x1bc>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	4a44      	ldr	r2, [pc, #272]	; (800144c <MX_GPIO_Init+0x1bc>)
 800133c:	f043 0302 	orr.w	r3, r3, #2
 8001340:	6313      	str	r3, [r2, #48]	; 0x30
 8001342:	4b42      	ldr	r3, [pc, #264]	; (800144c <MX_GPIO_Init+0x1bc>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	607b      	str	r3, [r7, #4]
 800134c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 800134e:	2200      	movs	r2, #0
 8001350:	2108      	movs	r1, #8
 8001352:	483f      	ldr	r0, [pc, #252]	; (8001450 <MX_GPIO_Init+0x1c0>)
 8001354:	f000 fef8 	bl	8002148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_3, GPIO_PIN_RESET);
 8001358:	2200      	movs	r2, #0
 800135a:	210a      	movs	r1, #10
 800135c:	483d      	ldr	r0, [pc, #244]	; (8001454 <MX_GPIO_Init+0x1c4>)
 800135e:	f000 fef3 	bl	8002148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8001362:	2200      	movs	r2, #0
 8001364:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001368:	483b      	ldr	r0, [pc, #236]	; (8001458 <MX_GPIO_Init+0x1c8>)
 800136a:	f000 feed 	bl	8002148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, D0_Pin|D1_Pin|D2_Pin|D3_Pin
 800136e:	2201      	movs	r2, #1
 8001370:	21ff      	movs	r1, #255	; 0xff
 8001372:	4839      	ldr	r0, [pc, #228]	; (8001458 <MX_GPIO_Init+0x1c8>)
 8001374:	f000 fee8 	bl	8002148 <HAL_GPIO_WritePin>
                          |D4_Pin|D5_Pin|D6_Pin|D7_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RD_E_Pin|WR_Pin|CS_Pin|D_C_Pin
 8001378:	2201      	movs	r2, #1
 800137a:	21f8      	movs	r1, #248	; 0xf8
 800137c:	4837      	ldr	r0, [pc, #220]	; (800145c <MX_GPIO_Init+0x1cc>)
 800137e:	f000 fee3 	bl	8002148 <HAL_GPIO_WritePin>
                          |RES_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001382:	2308      	movs	r3, #8
 8001384:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001386:	2301      	movs	r3, #1
 8001388:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138e:	2300      	movs	r3, #0
 8001390:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001392:	f107 031c 	add.w	r3, r7, #28
 8001396:	4619      	mov	r1, r3
 8001398:	482d      	ldr	r0, [pc, #180]	; (8001450 <MX_GPIO_Init+0x1c0>)
 800139a:	f000 fd39 	bl	8001e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800139e:	2301      	movs	r3, #1
 80013a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013a2:	2300      	movs	r3, #0
 80013a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80013a6:	2302      	movs	r3, #2
 80013a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013aa:	f107 031c 	add.w	r3, r7, #28
 80013ae:	4619      	mov	r1, r3
 80013b0:	4828      	ldr	r0, [pc, #160]	; (8001454 <MX_GPIO_Init+0x1c4>)
 80013b2:	f000 fd2d 	bl	8001e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80013b6:	230a      	movs	r3, #10
 80013b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ba:	2301      	movs	r3, #1
 80013bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c2:	2300      	movs	r3, #0
 80013c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c6:	f107 031c 	add.w	r3, r7, #28
 80013ca:	4619      	mov	r1, r3
 80013cc:	4821      	ldr	r0, [pc, #132]	; (8001454 <MX_GPIO_Init+0x1c4>)
 80013ce:	f000 fd1f 	bl	8001e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80013d2:	f44f 7360 	mov.w	r3, #896	; 0x380
 80013d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013d8:	2300      	movs	r3, #0
 80013da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013dc:	2301      	movs	r3, #1
 80013de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013e0:	f107 031c 	add.w	r3, r7, #28
 80013e4:	4619      	mov	r1, r3
 80013e6:	481e      	ldr	r0, [pc, #120]	; (8001460 <MX_GPIO_Init+0x1d0>)
 80013e8:	f000 fd12 	bl	8001e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80013ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f2:	2301      	movs	r3, #1
 80013f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fa:	2300      	movs	r3, #0
 80013fc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013fe:	f107 031c 	add.w	r3, r7, #28
 8001402:	4619      	mov	r1, r3
 8001404:	4814      	ldr	r0, [pc, #80]	; (8001458 <MX_GPIO_Init+0x1c8>)
 8001406:	f000 fd03 	bl	8001e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : D0_Pin D1_Pin D2_Pin D3_Pin
                           D4_Pin D5_Pin D6_Pin D7_Pin */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin
 800140a:	23ff      	movs	r3, #255	; 0xff
 800140c:	61fb      	str	r3, [r7, #28]
                          |D4_Pin|D5_Pin|D6_Pin|D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800140e:	2301      	movs	r3, #1
 8001410:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001412:	2300      	movs	r3, #0
 8001414:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001416:	2303      	movs	r3, #3
 8001418:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800141a:	f107 031c 	add.w	r3, r7, #28
 800141e:	4619      	mov	r1, r3
 8001420:	480d      	ldr	r0, [pc, #52]	; (8001458 <MX_GPIO_Init+0x1c8>)
 8001422:	f000 fcf5 	bl	8001e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : RD_E_Pin WR_Pin CS_Pin D_C_Pin
                           RES_Pin */
  GPIO_InitStruct.Pin = RD_E_Pin|WR_Pin|CS_Pin|D_C_Pin
 8001426:	23f8      	movs	r3, #248	; 0xf8
 8001428:	61fb      	str	r3, [r7, #28]
                          |RES_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800142a:	2301      	movs	r3, #1
 800142c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001432:	2303      	movs	r3, #3
 8001434:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001436:	f107 031c 	add.w	r3, r7, #28
 800143a:	4619      	mov	r1, r3
 800143c:	4807      	ldr	r0, [pc, #28]	; (800145c <MX_GPIO_Init+0x1cc>)
 800143e:	f000 fce7 	bl	8001e10 <HAL_GPIO_Init>

}
 8001442:	bf00      	nop
 8001444:	3730      	adds	r7, #48	; 0x30
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40023800 	.word	0x40023800
 8001450:	40020800 	.word	0x40020800
 8001454:	40020000 	.word	0x40020000
 8001458:	40020c00 	.word	0x40020c00
 800145c:	40020400 	.word	0x40020400
 8001460:	40021000 	.word	0x40021000

08001464 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001468:	b672      	cpsid	i
}
 800146a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800146c:	e7fe      	b.n	800146c <Error_Handler+0x8>
	...

08001470 <SSD1309_init>:
 *
 * on return:		-
------------------------------------------------------------------------------------*/

 void SSD1309_init(void)
 {
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
    Reset_ssd1309();
 8001474:	f000 f846 	bl	8001504 <Reset_ssd1309>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);  // CS = 0
 8001478:	2200      	movs	r2, #0
 800147a:	2120      	movs	r1, #32
 800147c:	4819      	ldr	r0, [pc, #100]	; (80014e4 <SSD1309_init+0x74>)
 800147e:	f000 fe63 	bl	8002148 <HAL_GPIO_WritePin>
	SendCommand(0xAE);	// display off
 8001482:	20ae      	movs	r0, #174	; 0xae
 8001484:	f000 f854 	bl	8001530 <SendCommand>
	Clear_Screen();
 8001488:	f000 f896 	bl	80015b8 <Clear_Screen>
	SendCommand(0xA6);
	SendCommand(0xAF);*/

	//SendCommand(0xB0);
   // SendCommand(0x81);
	SendCommand(0xB0);
 800148c:	20b0      	movs	r0, #176	; 0xb0
 800148e:	f000 f84f 	bl	8001530 <SendCommand>
	SendCommand(0x81);
 8001492:	2081      	movs	r0, #129	; 0x81
 8001494:	f000 f84c 	bl	8001530 <SendCommand>
	SendCommand(0x7F);			//  яркость;
 8001498:	207f      	movs	r0, #127	; 0x7f
 800149a:	f000 f849 	bl	8001530 <SendCommand>
	SendCommand(0xAF);
 800149e:	20af      	movs	r0, #175	; 0xaf
 80014a0:	f000 f846 	bl	8001530 <SendCommand>
	HAL_Delay(100);
 80014a4:	2064      	movs	r0, #100	; 0x64
 80014a6:	f000 fba9 	bl	8001bfc <HAL_Delay>

	SendCommand(0x20);
 80014aa:	2020      	movs	r0, #32
 80014ac:	f000 f840 	bl	8001530 <SendCommand>
	SendCommand(0x00);			//  Vertical Addressing Mode;
 80014b0:	2000      	movs	r0, #0
 80014b2:	f000 f83d 	bl	8001530 <SendCommand>
	SendCommand(0x21);			//  Область вывода - от 0 до 127 столбца;
 80014b6:	2021      	movs	r0, #33	; 0x21
 80014b8:	f000 f83a 	bl	8001530 <SendCommand>
	SendCommand(0x00);
 80014bc:	2000      	movs	r0, #0
 80014be:	f000 f837 	bl	8001530 <SendCommand>
	SendCommand(0x7F);
 80014c2:	207f      	movs	r0, #127	; 0x7f
 80014c4:	f000 f834 	bl	8001530 <SendCommand>
	SendCommand(0x22);			//  Область вывода - от  до  строки;
 80014c8:	2022      	movs	r0, #34	; 0x22
 80014ca:	f000 f831 	bl	8001530 <SendCommand>
	SendCommand(0x00);
 80014ce:	2000      	movs	r0, #0
 80014d0:	f000 f82e 	bl	8001530 <SendCommand>
	SendCommand(0x07);
 80014d4:	2007      	movs	r0, #7
 80014d6:	f000 f82b 	bl	8001530 <SendCommand>
	//SendCommand(0xDA); //
   // SendCommand(0x12); //
	SendCommand(0xA1);
 80014da:	20a1      	movs	r0, #161	; 0xa1
 80014dc:	f000 f828 	bl	8001530 <SendCommand>

	// Set default values for screen object
	  /* SSD1306.CurrentX = 0;
	    SSD1306.CurrentY = 0;*/

 }
 80014e0:	bf00      	nop
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40020400 	.word	0x40020400

080014e8 <LL_GPIO_WriteOutputPort>:
    * @param  GPIOx GPIO Port
    * @param  PortValue Level value for each pin of the port
    * @retval None
    */
   void LL_GPIO_WriteOutputPort(GPIO_TypeDef *GPIOx, uint32_t PortValue)
  {
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
    WRITE_REG(GPIOx->ODR, PortValue);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	683a      	ldr	r2, [r7, #0]
 80014f6:	615a      	str	r2, [r3, #20]
  }
 80014f8:	bf00      	nop
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <Reset_ssd1309>:
 * parameters:		-
 *
 * on return:		-
 ------------------------------------------------------------------------------------*/
 void Reset_ssd1309(void)
 {
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
 	HAL_GPIO_WritePin(RES_GPIO_Port, RES_Pin, GPIO_PIN_SET);
 8001508:	2201      	movs	r2, #1
 800150a:	2180      	movs	r1, #128	; 0x80
 800150c:	4807      	ldr	r0, [pc, #28]	; (800152c <Reset_ssd1309+0x28>)
 800150e:	f000 fe1b 	bl	8002148 <HAL_GPIO_WritePin>
 	HAL_GPIO_WritePin(RES_GPIO_Port, RES_Pin, GPIO_PIN_RESET);
 8001512:	2200      	movs	r2, #0
 8001514:	2180      	movs	r1, #128	; 0x80
 8001516:	4805      	ldr	r0, [pc, #20]	; (800152c <Reset_ssd1309+0x28>)
 8001518:	f000 fe16 	bl	8002148 <HAL_GPIO_WritePin>
 	HAL_GPIO_WritePin(RES_GPIO_Port, RES_Pin, GPIO_PIN_SET);
 800151c:	2201      	movs	r2, #1
 800151e:	2180      	movs	r1, #128	; 0x80
 8001520:	4802      	ldr	r0, [pc, #8]	; (800152c <Reset_ssd1309+0x28>)
 8001522:	f000 fe11 	bl	8002148 <HAL_GPIO_WritePin>
 }
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40020400 	.word	0x40020400

08001530 <SendCommand>:
  * parameters:		-uint8_t Command
  *
  * on return:		-
  ------------------------------------------------------------------------------------*/
 void SendCommand(uint8_t Command)
 {
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(D_C_GPIO_Port, D_C_Pin, GPIO_PIN_RESET);
 800153a:	2200      	movs	r2, #0
 800153c:	2140      	movs	r1, #64	; 0x40
 800153e:	480b      	ldr	r0, [pc, #44]	; (800156c <SendCommand+0x3c>)
 8001540:	f000 fe02 	bl	8002148 <HAL_GPIO_WritePin>
 	HAL_GPIO_WritePin(WR_GPIO_Port, WR_Pin, GPIO_PIN_RESET);
 8001544:	2200      	movs	r2, #0
 8001546:	2110      	movs	r1, #16
 8001548:	4808      	ldr	r0, [pc, #32]	; (800156c <SendCommand+0x3c>)
 800154a:	f000 fdfd 	bl	8002148 <HAL_GPIO_WritePin>
 	LL_GPIO_WriteOutputPort(GPIOD, Command);
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	4619      	mov	r1, r3
 8001552:	4807      	ldr	r0, [pc, #28]	; (8001570 <SendCommand+0x40>)
 8001554:	f7ff ffc8 	bl	80014e8 <LL_GPIO_WriteOutputPort>
 	HAL_GPIO_WritePin(WR_GPIO_Port, WR_Pin, GPIO_PIN_SET);
 8001558:	2201      	movs	r2, #1
 800155a:	2110      	movs	r1, #16
 800155c:	4803      	ldr	r0, [pc, #12]	; (800156c <SendCommand+0x3c>)
 800155e:	f000 fdf3 	bl	8002148 <HAL_GPIO_WritePin>
 }
 8001562:	bf00      	nop
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40020400 	.word	0x40020400
 8001570:	40020c00 	.word	0x40020c00

08001574 <SendData>:
   * parameters:	-uint8_t Data
   *
   * on return:		-
   ------------------------------------------------------------------------------------*/
 void SendData (uint8_t Data)
 {
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(D_C_GPIO_Port, D_C_Pin, GPIO_PIN_SET);
 800157e:	2201      	movs	r2, #1
 8001580:	2140      	movs	r1, #64	; 0x40
 8001582:	480b      	ldr	r0, [pc, #44]	; (80015b0 <SendData+0x3c>)
 8001584:	f000 fde0 	bl	8002148 <HAL_GPIO_WritePin>
 	HAL_GPIO_WritePin(WR_GPIO_Port, WR_Pin, GPIO_PIN_RESET);
 8001588:	2200      	movs	r2, #0
 800158a:	2110      	movs	r1, #16
 800158c:	4808      	ldr	r0, [pc, #32]	; (80015b0 <SendData+0x3c>)
 800158e:	f000 fddb 	bl	8002148 <HAL_GPIO_WritePin>
 	LL_GPIO_WriteOutputPort(GPIOD, Data);
 8001592:	79fb      	ldrb	r3, [r7, #7]
 8001594:	4619      	mov	r1, r3
 8001596:	4807      	ldr	r0, [pc, #28]	; (80015b4 <SendData+0x40>)
 8001598:	f7ff ffa6 	bl	80014e8 <LL_GPIO_WriteOutputPort>
 	HAL_GPIO_WritePin(WR_GPIO_Port, WR_Pin, GPIO_PIN_SET);
 800159c:	2201      	movs	r2, #1
 800159e:	2110      	movs	r1, #16
 80015a0:	4803      	ldr	r0, [pc, #12]	; (80015b0 <SendData+0x3c>)
 80015a2:	f000 fdd1 	bl	8002148 <HAL_GPIO_WritePin>
 }
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40020400 	.word	0x40020400
 80015b4:	40020c00 	.word	0x40020c00

080015b8 <Clear_Screen>:
   * parameters:	-
   *
   * on return:		-
   ------------------------------------------------------------------------------------*/
 void Clear_Screen(void)
 {
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
	  uint8_t i = 0;
 80015be:	2300      	movs	r3, #0
 80015c0:	717b      	strb	r3, [r7, #5]
	 for(uint8_t j =0; j < 128; j++)
 80015c2:	2300      	movs	r3, #0
 80015c4:	71fb      	strb	r3, [r7, #7]
 80015c6:	e014      	b.n	80015f2 <Clear_Screen+0x3a>
	     {
	 	  SendCommand(0xB0+i);
 80015c8:	797b      	ldrb	r3, [r7, #5]
 80015ca:	3b50      	subs	r3, #80	; 0x50
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff ffae 	bl	8001530 <SendCommand>
	 	  for (uint8_t i = 0; i < 8; i++)
 80015d4:	2300      	movs	r3, #0
 80015d6:	71bb      	strb	r3, [r7, #6]
 80015d8:	e005      	b.n	80015e6 <Clear_Screen+0x2e>
	 	  	{
	 		  SendData(0x00);
 80015da:	2000      	movs	r0, #0
 80015dc:	f7ff ffca 	bl	8001574 <SendData>
	 	  for (uint8_t i = 0; i < 8; i++)
 80015e0:	79bb      	ldrb	r3, [r7, #6]
 80015e2:	3301      	adds	r3, #1
 80015e4:	71bb      	strb	r3, [r7, #6]
 80015e6:	79bb      	ldrb	r3, [r7, #6]
 80015e8:	2b07      	cmp	r3, #7
 80015ea:	d9f6      	bls.n	80015da <Clear_Screen+0x22>
	 for(uint8_t j =0; j < 128; j++)
 80015ec:	79fb      	ldrb	r3, [r7, #7]
 80015ee:	3301      	adds	r3, #1
 80015f0:	71fb      	strb	r3, [r7, #7]
 80015f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	dae6      	bge.n	80015c8 <Clear_Screen+0x10>
	 	  	}
	     }
 }
 80015fa:	bf00      	nop
 80015fc:	bf00      	nop
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <SetPixel>:
      }
    }
  }

  static void SetPixel(uint8_t x, uint8_t y)
  {
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	460a      	mov	r2, r1
 800160e:	71fb      	strb	r3, [r7, #7]
 8001610:	4613      	mov	r3, r2
 8001612:	71bb      	strb	r3, [r7, #6]
	  if(x >= SSD1309_WIDTH || y >= SSD1309_HEIGHT)
 8001614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001618:	2b00      	cmp	r3, #0
 800161a:	db1d      	blt.n	8001658 <SetPixel+0x54>
 800161c:	79bb      	ldrb	r3, [r7, #6]
 800161e:	2b3f      	cmp	r3, #63	; 0x3f
 8001620:	d81a      	bhi.n	8001658 <SetPixel+0x54>
	        {
	            // Don't write outside the buffer
	            return;
	        }
    pixelBuffer[x + (y / 8) * SSD1309_X_SIZE] |= (1 << (y % 8));
 8001622:	79fa      	ldrb	r2, [r7, #7]
 8001624:	79bb      	ldrb	r3, [r7, #6]
 8001626:	08db      	lsrs	r3, r3, #3
 8001628:	b2d8      	uxtb	r0, r3
 800162a:	4603      	mov	r3, r0
 800162c:	01db      	lsls	r3, r3, #7
 800162e:	4413      	add	r3, r2
 8001630:	4a0c      	ldr	r2, [pc, #48]	; (8001664 <SetPixel+0x60>)
 8001632:	5cd3      	ldrb	r3, [r2, r3]
 8001634:	b25a      	sxtb	r2, r3
 8001636:	79bb      	ldrb	r3, [r7, #6]
 8001638:	f003 0307 	and.w	r3, r3, #7
 800163c:	2101      	movs	r1, #1
 800163e:	fa01 f303 	lsl.w	r3, r1, r3
 8001642:	b25b      	sxtb	r3, r3
 8001644:	4313      	orrs	r3, r2
 8001646:	b259      	sxtb	r1, r3
 8001648:	79fa      	ldrb	r2, [r7, #7]
 800164a:	4603      	mov	r3, r0
 800164c:	01db      	lsls	r3, r3, #7
 800164e:	4413      	add	r3, r2
 8001650:	b2c9      	uxtb	r1, r1
 8001652:	4a04      	ldr	r2, [pc, #16]	; (8001664 <SetPixel+0x60>)
 8001654:	54d1      	strb	r1, [r2, r3]
 8001656:	e000      	b.n	800165a <SetPixel+0x56>
	            return;
 8001658:	bf00      	nop
  }
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	20000204 	.word	0x20000204

08001668 <SSD1309_UpdateScreen>:
    }
    SSD1309_UpdateScreen();
  }

  void SSD1309_UpdateScreen(void)
  {
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
	  for(uint16_t i = 0; i <= SSD1309_BUFFER_SIZE; i++)
 800166e:	2300      	movs	r3, #0
 8001670:	80fb      	strh	r3, [r7, #6]
 8001672:	e008      	b.n	8001686 <SSD1309_UpdateScreen+0x1e>
	  {
		  SendData(pixelBuffer[i]);
 8001674:	88fb      	ldrh	r3, [r7, #6]
 8001676:	4a08      	ldr	r2, [pc, #32]	; (8001698 <SSD1309_UpdateScreen+0x30>)
 8001678:	5cd3      	ldrb	r3, [r2, r3]
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff ff7a 	bl	8001574 <SendData>
	  for(uint16_t i = 0; i <= SSD1309_BUFFER_SIZE; i++)
 8001680:	88fb      	ldrh	r3, [r7, #6]
 8001682:	3301      	adds	r3, #1
 8001684:	80fb      	strh	r3, [r7, #6]
 8001686:	88fb      	ldrh	r3, [r7, #6]
 8001688:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800168c:	d9f2      	bls.n	8001674 <SSD1309_UpdateScreen+0xc>
	  }

  }
 800168e:	bf00      	nop
 8001690:	bf00      	nop
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	20000204 	.word	0x20000204

0800169c <SSD1309_WriteChar>:
  	/* Everything OK, zero should be returned */
  	return *str;
  }

  void SSD1309_WriteChar(int16_t x, int16_t y, char ch, FontDef_t* Font)
  {
 800169c:	b580      	push	{r7, lr}
 800169e:	b086      	sub	sp, #24
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	607b      	str	r3, [r7, #4]
 80016a4:	4603      	mov	r3, r0
 80016a6:	81fb      	strh	r3, [r7, #14]
 80016a8:	460b      	mov	r3, r1
 80016aa:	81bb      	strh	r3, [r7, #12]
 80016ac:	4613      	mov	r3, r2
 80016ae:	72fb      	strb	r3, [r7, #11]

      int16_t x0, y0, b;
      // Translate font to screen buffer
      for (y0 = 0; y0 < Font->height; y0++)
 80016b0:	2300      	movs	r3, #0
 80016b2:	82bb      	strh	r3, [r7, #20]
 80016b4:	e03c      	b.n	8001730 <SSD1309_WriteChar+0x94>
      {
          b = Font->data[(ch - 32) * Font->height + y0];
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685a      	ldr	r2, [r3, #4]
 80016ba:	7afb      	ldrb	r3, [r7, #11]
 80016bc:	3b20      	subs	r3, #32
 80016be:	6879      	ldr	r1, [r7, #4]
 80016c0:	7849      	ldrb	r1, [r1, #1]
 80016c2:	fb01 f103 	mul.w	r1, r1, r3
 80016c6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80016ca:	440b      	add	r3, r1
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	4413      	add	r3, r2
 80016d0:	881b      	ldrh	r3, [r3, #0]
 80016d2:	827b      	strh	r3, [r7, #18]
          for (x0 = 0; x0 < Font->width; x0++)
 80016d4:	2300      	movs	r3, #0
 80016d6:	82fb      	strh	r3, [r7, #22]
 80016d8:	e01e      	b.n	8001718 <SSD1309_WriteChar+0x7c>
          {
               if ((b << x0) & 0x8000)
 80016da:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80016de:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016e2:	fa02 f303 	lsl.w	r3, r2, r3
 80016e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d00e      	beq.n	800170c <SSD1309_WriteChar+0x70>
              {
            	 SetPixel(x + x0, y + y0);
 80016ee:	89fb      	ldrh	r3, [r7, #14]
 80016f0:	b2da      	uxtb	r2, r3
 80016f2:	8afb      	ldrh	r3, [r7, #22]
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	4413      	add	r3, r2
 80016f8:	b2d8      	uxtb	r0, r3
 80016fa:	89bb      	ldrh	r3, [r7, #12]
 80016fc:	b2da      	uxtb	r2, r3
 80016fe:	8abb      	ldrh	r3, [r7, #20]
 8001700:	b2db      	uxtb	r3, r3
 8001702:	4413      	add	r3, r2
 8001704:	b2db      	uxtb	r3, r3
 8001706:	4619      	mov	r1, r3
 8001708:	f7ff ff7c 	bl	8001604 <SetPixel>
          for (x0 = 0; x0 < Font->width; x0++)
 800170c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001710:	b29b      	uxth	r3, r3
 8001712:	3301      	adds	r3, #1
 8001714:	b29b      	uxth	r3, r3
 8001716:	82fb      	strh	r3, [r7, #22]
 8001718:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	7812      	ldrb	r2, [r2, #0]
 8001720:	4293      	cmp	r3, r2
 8001722:	dbda      	blt.n	80016da <SSD1309_WriteChar+0x3e>
      for (y0 = 0; y0 < Font->height; y0++)
 8001724:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001728:	b29b      	uxth	r3, r3
 800172a:	3301      	adds	r3, #1
 800172c:	b29b      	uxth	r3, r3
 800172e:	82bb      	strh	r3, [r7, #20]
 8001730:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	7852      	ldrb	r2, [r2, #1]
 8001738:	4293      	cmp	r3, r2
 800173a:	dbbc      	blt.n	80016b6 <SSD1309_WriteChar+0x1a>
              {
                SetPixel(x + x0, y + y0, (SSD1306_COLOR_t) !color);
              }*/
          }
      }
  }
 800173c:	bf00      	nop
 800173e:	bf00      	nop
 8001740:	3718      	adds	r7, #24
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
	...

08001748 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	607b      	str	r3, [r7, #4]
 8001752:	4b10      	ldr	r3, [pc, #64]	; (8001794 <HAL_MspInit+0x4c>)
 8001754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001756:	4a0f      	ldr	r2, [pc, #60]	; (8001794 <HAL_MspInit+0x4c>)
 8001758:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800175c:	6453      	str	r3, [r2, #68]	; 0x44
 800175e:	4b0d      	ldr	r3, [pc, #52]	; (8001794 <HAL_MspInit+0x4c>)
 8001760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001762:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001766:	607b      	str	r3, [r7, #4]
 8001768:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	603b      	str	r3, [r7, #0]
 800176e:	4b09      	ldr	r3, [pc, #36]	; (8001794 <HAL_MspInit+0x4c>)
 8001770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001772:	4a08      	ldr	r2, [pc, #32]	; (8001794 <HAL_MspInit+0x4c>)
 8001774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001778:	6413      	str	r3, [r2, #64]	; 0x40
 800177a:	4b06      	ldr	r3, [pc, #24]	; (8001794 <HAL_MspInit+0x4c>)
 800177c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001782:	603b      	str	r3, [r7, #0]
 8001784:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	40023800 	.word	0x40023800

08001798 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017a0:	f107 0308 	add.w	r3, r7, #8
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a0c      	ldr	r2, [pc, #48]	; (80017e4 <HAL_RTC_MspInit+0x4c>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d111      	bne.n	80017dc <HAL_RTC_MspInit+0x44>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80017b8:	2302      	movs	r3, #2
 80017ba:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80017bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017c0:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017c2:	f107 0308 	add.w	r3, r7, #8
 80017c6:	4618      	mov	r0, r3
 80017c8:	f001 f918 	bl	80029fc <HAL_RCCEx_PeriphCLKConfig>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80017d2:	f7ff fe47 	bl	8001464 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80017d6:	4b04      	ldr	r3, [pc, #16]	; (80017e8 <HAL_RTC_MspInit+0x50>)
 80017d8:	2201      	movs	r2, #1
 80017da:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80017dc:	bf00      	nop
 80017de:	3718      	adds	r7, #24
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40002800 	.word	0x40002800
 80017e8:	42470e3c 	.word	0x42470e3c

080017ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b08a      	sub	sp, #40	; 0x28
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f4:	f107 0314 	add.w	r3, r7, #20
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	605a      	str	r2, [r3, #4]
 80017fe:	609a      	str	r2, [r3, #8]
 8001800:	60da      	str	r2, [r3, #12]
 8001802:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a19      	ldr	r2, [pc, #100]	; (8001870 <HAL_SPI_MspInit+0x84>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d12b      	bne.n	8001866 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	613b      	str	r3, [r7, #16]
 8001812:	4b18      	ldr	r3, [pc, #96]	; (8001874 <HAL_SPI_MspInit+0x88>)
 8001814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001816:	4a17      	ldr	r2, [pc, #92]	; (8001874 <HAL_SPI_MspInit+0x88>)
 8001818:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800181c:	6453      	str	r3, [r2, #68]	; 0x44
 800181e:	4b15      	ldr	r3, [pc, #84]	; (8001874 <HAL_SPI_MspInit+0x88>)
 8001820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001822:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001826:	613b      	str	r3, [r7, #16]
 8001828:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	60fb      	str	r3, [r7, #12]
 800182e:	4b11      	ldr	r3, [pc, #68]	; (8001874 <HAL_SPI_MspInit+0x88>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	4a10      	ldr	r2, [pc, #64]	; (8001874 <HAL_SPI_MspInit+0x88>)
 8001834:	f043 0301 	orr.w	r3, r3, #1
 8001838:	6313      	str	r3, [r2, #48]	; 0x30
 800183a:	4b0e      	ldr	r3, [pc, #56]	; (8001874 <HAL_SPI_MspInit+0x88>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001846:	23e0      	movs	r3, #224	; 0xe0
 8001848:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184a:	2302      	movs	r3, #2
 800184c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184e:	2300      	movs	r3, #0
 8001850:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001852:	2303      	movs	r3, #3
 8001854:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001856:	2305      	movs	r3, #5
 8001858:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800185a:	f107 0314 	add.w	r3, r7, #20
 800185e:	4619      	mov	r1, r3
 8001860:	4805      	ldr	r0, [pc, #20]	; (8001878 <HAL_SPI_MspInit+0x8c>)
 8001862:	f000 fad5 	bl	8001e10 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001866:	bf00      	nop
 8001868:	3728      	adds	r7, #40	; 0x28
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	40013000 	.word	0x40013000
 8001874:	40023800 	.word	0x40023800
 8001878:	40020000 	.word	0x40020000

0800187c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a0b      	ldr	r2, [pc, #44]	; (80018b8 <HAL_TIM_Base_MspInit+0x3c>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d10d      	bne.n	80018aa <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	60fb      	str	r3, [r7, #12]
 8001892:	4b0a      	ldr	r3, [pc, #40]	; (80018bc <HAL_TIM_Base_MspInit+0x40>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	4a09      	ldr	r2, [pc, #36]	; (80018bc <HAL_TIM_Base_MspInit+0x40>)
 8001898:	f043 0310 	orr.w	r3, r3, #16
 800189c:	6413      	str	r3, [r2, #64]	; 0x40
 800189e:	4b07      	ldr	r3, [pc, #28]	; (80018bc <HAL_TIM_Base_MspInit+0x40>)
 80018a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a2:	f003 0310 	and.w	r3, r3, #16
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80018aa:	bf00      	nop
 80018ac:	3714      	adds	r7, #20
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	40001000 	.word	0x40001000
 80018bc:	40023800 	.word	0x40023800

080018c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018c4:	e7fe      	b.n	80018c4 <NMI_Handler+0x4>

080018c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018c6:	b480      	push	{r7}
 80018c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ca:	e7fe      	b.n	80018ca <HardFault_Handler+0x4>

080018cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018d0:	e7fe      	b.n	80018d0 <MemManage_Handler+0x4>

080018d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018d2:	b480      	push	{r7}
 80018d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018d6:	e7fe      	b.n	80018d6 <BusFault_Handler+0x4>

080018d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018dc:	e7fe      	b.n	80018dc <UsageFault_Handler+0x4>

080018de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018de:	b480      	push	{r7}
 80018e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018f0:	bf00      	nop
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr

080018fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018fa:	b480      	push	{r7}
 80018fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800190c:	f000 f956 	bl	8001bbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001910:	bf00      	nop
 8001912:	bd80      	pop	{r7, pc}

08001914 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
	return 1;
 8001918:	2301      	movs	r3, #1
}
 800191a:	4618      	mov	r0, r3
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <_kill>:

int _kill(int pid, int sig)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800192e:	f001 fda3 	bl	8003478 <__errno>
 8001932:	4603      	mov	r3, r0
 8001934:	2216      	movs	r2, #22
 8001936:	601a      	str	r2, [r3, #0]
	return -1;
 8001938:	f04f 33ff 	mov.w	r3, #4294967295
}
 800193c:	4618      	mov	r0, r3
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <_exit>:

void _exit (int status)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800194c:	f04f 31ff 	mov.w	r1, #4294967295
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f7ff ffe7 	bl	8001924 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001956:	e7fe      	b.n	8001956 <_exit+0x12>

08001958 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001964:	2300      	movs	r3, #0
 8001966:	617b      	str	r3, [r7, #20]
 8001968:	e00a      	b.n	8001980 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800196a:	f3af 8000 	nop.w
 800196e:	4601      	mov	r1, r0
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	1c5a      	adds	r2, r3, #1
 8001974:	60ba      	str	r2, [r7, #8]
 8001976:	b2ca      	uxtb	r2, r1
 8001978:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	3301      	adds	r3, #1
 800197e:	617b      	str	r3, [r7, #20]
 8001980:	697a      	ldr	r2, [r7, #20]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	429a      	cmp	r2, r3
 8001986:	dbf0      	blt.n	800196a <_read+0x12>
	}

return len;
 8001988:	687b      	ldr	r3, [r7, #4]
}
 800198a:	4618      	mov	r0, r3
 800198c:	3718      	adds	r7, #24
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b086      	sub	sp, #24
 8001996:	af00      	add	r7, sp, #0
 8001998:	60f8      	str	r0, [r7, #12]
 800199a:	60b9      	str	r1, [r7, #8]
 800199c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800199e:	2300      	movs	r3, #0
 80019a0:	617b      	str	r3, [r7, #20]
 80019a2:	e009      	b.n	80019b8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	1c5a      	adds	r2, r3, #1
 80019a8:	60ba      	str	r2, [r7, #8]
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	3301      	adds	r3, #1
 80019b6:	617b      	str	r3, [r7, #20]
 80019b8:	697a      	ldr	r2, [r7, #20]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	429a      	cmp	r2, r3
 80019be:	dbf1      	blt.n	80019a4 <_write+0x12>
	}
	return len;
 80019c0:	687b      	ldr	r3, [r7, #4]
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3718      	adds	r7, #24
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <_close>:

int _close(int file)
{
 80019ca:	b480      	push	{r7}
 80019cc:	b083      	sub	sp, #12
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
	return -1;
 80019d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr

080019e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019e2:	b480      	push	{r7}
 80019e4:	b083      	sub	sp, #12
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
 80019ea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019f2:	605a      	str	r2, [r3, #4]
	return 0;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr

08001a02 <_isatty>:

int _isatty(int file)
{
 8001a02:	b480      	push	{r7}
 8001a04:	b083      	sub	sp, #12
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
	return 1;
 8001a0a:	2301      	movs	r3, #1
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	607a      	str	r2, [r7, #4]
	return 0;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3714      	adds	r7, #20
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
	...

08001a34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a3c:	4a14      	ldr	r2, [pc, #80]	; (8001a90 <_sbrk+0x5c>)
 8001a3e:	4b15      	ldr	r3, [pc, #84]	; (8001a94 <_sbrk+0x60>)
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a48:	4b13      	ldr	r3, [pc, #76]	; (8001a98 <_sbrk+0x64>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d102      	bne.n	8001a56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a50:	4b11      	ldr	r3, [pc, #68]	; (8001a98 <_sbrk+0x64>)
 8001a52:	4a12      	ldr	r2, [pc, #72]	; (8001a9c <_sbrk+0x68>)
 8001a54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a56:	4b10      	ldr	r3, [pc, #64]	; (8001a98 <_sbrk+0x64>)
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d207      	bcs.n	8001a74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a64:	f001 fd08 	bl	8003478 <__errno>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	220c      	movs	r2, #12
 8001a6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a72:	e009      	b.n	8001a88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a74:	4b08      	ldr	r3, [pc, #32]	; (8001a98 <_sbrk+0x64>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a7a:	4b07      	ldr	r3, [pc, #28]	; (8001a98 <_sbrk+0x64>)
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4413      	add	r3, r2
 8001a82:	4a05      	ldr	r2, [pc, #20]	; (8001a98 <_sbrk+0x64>)
 8001a84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a86:	68fb      	ldr	r3, [r7, #12]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3718      	adds	r7, #24
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	20020000 	.word	0x20020000
 8001a94:	00000400 	.word	0x00000400
 8001a98:	20000604 	.word	0x20000604
 8001a9c:	200006f0 	.word	0x200006f0

08001aa0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001aa4:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <SystemInit+0x20>)
 8001aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aaa:	4a05      	ldr	r2, [pc, #20]	; (8001ac0 <SystemInit+0x20>)
 8001aac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ab0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ab4:	bf00      	nop
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	e000ed00 	.word	0xe000ed00

08001ac4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ac4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001afc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ac8:	480d      	ldr	r0, [pc, #52]	; (8001b00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001aca:	490e      	ldr	r1, [pc, #56]	; (8001b04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001acc:	4a0e      	ldr	r2, [pc, #56]	; (8001b08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ace:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ad0:	e002      	b.n	8001ad8 <LoopCopyDataInit>

08001ad2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ad2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ad4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ad6:	3304      	adds	r3, #4

08001ad8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ad8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ada:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001adc:	d3f9      	bcc.n	8001ad2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ade:	4a0b      	ldr	r2, [pc, #44]	; (8001b0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ae0:	4c0b      	ldr	r4, [pc, #44]	; (8001b10 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ae2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ae4:	e001      	b.n	8001aea <LoopFillZerobss>

08001ae6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ae6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ae8:	3204      	adds	r2, #4

08001aea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001aec:	d3fb      	bcc.n	8001ae6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001aee:	f7ff ffd7 	bl	8001aa0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001af2:	f001 fcc7 	bl	8003484 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001af6:	f7ff fa79 	bl	8000fec <main>
  bx  lr    
 8001afa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001afc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b04:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001b08:	08009564 	.word	0x08009564
  ldr r2, =_sbss
 8001b0c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001b10:	200006f0 	.word	0x200006f0

08001b14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b14:	e7fe      	b.n	8001b14 <ADC_IRQHandler>
	...

08001b18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b1c:	4b0e      	ldr	r3, [pc, #56]	; (8001b58 <HAL_Init+0x40>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a0d      	ldr	r2, [pc, #52]	; (8001b58 <HAL_Init+0x40>)
 8001b22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b28:	4b0b      	ldr	r3, [pc, #44]	; (8001b58 <HAL_Init+0x40>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a0a      	ldr	r2, [pc, #40]	; (8001b58 <HAL_Init+0x40>)
 8001b2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b34:	4b08      	ldr	r3, [pc, #32]	; (8001b58 <HAL_Init+0x40>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a07      	ldr	r2, [pc, #28]	; (8001b58 <HAL_Init+0x40>)
 8001b3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b40:	2003      	movs	r0, #3
 8001b42:	f000 f931 	bl	8001da8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b46:	200f      	movs	r0, #15
 8001b48:	f000 f808 	bl	8001b5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b4c:	f7ff fdfc 	bl	8001748 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40023c00 	.word	0x40023c00

08001b5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b64:	4b12      	ldr	r3, [pc, #72]	; (8001bb0 <HAL_InitTick+0x54>)
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	4b12      	ldr	r3, [pc, #72]	; (8001bb4 <HAL_InitTick+0x58>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b72:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f000 f93b 	bl	8001df6 <HAL_SYSTICK_Config>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e00e      	b.n	8001ba8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2b0f      	cmp	r3, #15
 8001b8e:	d80a      	bhi.n	8001ba6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b90:	2200      	movs	r2, #0
 8001b92:	6879      	ldr	r1, [r7, #4]
 8001b94:	f04f 30ff 	mov.w	r0, #4294967295
 8001b98:	f000 f911 	bl	8001dbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b9c:	4a06      	ldr	r2, [pc, #24]	; (8001bb8 <HAL_InitTick+0x5c>)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	e000      	b.n	8001ba8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	20000008 	.word	0x20000008
 8001bb4:	20000010 	.word	0x20000010
 8001bb8:	2000000c 	.word	0x2000000c

08001bbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bc0:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <HAL_IncTick+0x20>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <HAL_IncTick+0x24>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4413      	add	r3, r2
 8001bcc:	4a04      	ldr	r2, [pc, #16]	; (8001be0 <HAL_IncTick+0x24>)
 8001bce:	6013      	str	r3, [r2, #0]
}
 8001bd0:	bf00      	nop
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	20000010 	.word	0x20000010
 8001be0:	200006dc 	.word	0x200006dc

08001be4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  return uwTick;
 8001be8:	4b03      	ldr	r3, [pc, #12]	; (8001bf8 <HAL_GetTick+0x14>)
 8001bea:	681b      	ldr	r3, [r3, #0]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	200006dc 	.word	0x200006dc

08001bfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c04:	f7ff ffee 	bl	8001be4 <HAL_GetTick>
 8001c08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c14:	d005      	beq.n	8001c22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c16:	4b0a      	ldr	r3, [pc, #40]	; (8001c40 <HAL_Delay+0x44>)
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	4413      	add	r3, r2
 8001c20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c22:	bf00      	nop
 8001c24:	f7ff ffde 	bl	8001be4 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	68fa      	ldr	r2, [r7, #12]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d8f7      	bhi.n	8001c24 <HAL_Delay+0x28>
  {
  }
}
 8001c34:	bf00      	nop
 8001c36:	bf00      	nop
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	20000010 	.word	0x20000010

08001c44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b085      	sub	sp, #20
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f003 0307 	and.w	r3, r3, #7
 8001c52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c54:	4b0c      	ldr	r3, [pc, #48]	; (8001c88 <__NVIC_SetPriorityGrouping+0x44>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c5a:	68ba      	ldr	r2, [r7, #8]
 8001c5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c60:	4013      	ands	r3, r2
 8001c62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c76:	4a04      	ldr	r2, [pc, #16]	; (8001c88 <__NVIC_SetPriorityGrouping+0x44>)
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	60d3      	str	r3, [r2, #12]
}
 8001c7c:	bf00      	nop
 8001c7e:	3714      	adds	r7, #20
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	e000ed00 	.word	0xe000ed00

08001c8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c90:	4b04      	ldr	r3, [pc, #16]	; (8001ca4 <__NVIC_GetPriorityGrouping+0x18>)
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	0a1b      	lsrs	r3, r3, #8
 8001c96:	f003 0307 	and.w	r3, r3, #7
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	e000ed00 	.word	0xe000ed00

08001ca8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	4603      	mov	r3, r0
 8001cb0:	6039      	str	r1, [r7, #0]
 8001cb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	db0a      	blt.n	8001cd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	b2da      	uxtb	r2, r3
 8001cc0:	490c      	ldr	r1, [pc, #48]	; (8001cf4 <__NVIC_SetPriority+0x4c>)
 8001cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc6:	0112      	lsls	r2, r2, #4
 8001cc8:	b2d2      	uxtb	r2, r2
 8001cca:	440b      	add	r3, r1
 8001ccc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cd0:	e00a      	b.n	8001ce8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	b2da      	uxtb	r2, r3
 8001cd6:	4908      	ldr	r1, [pc, #32]	; (8001cf8 <__NVIC_SetPriority+0x50>)
 8001cd8:	79fb      	ldrb	r3, [r7, #7]
 8001cda:	f003 030f 	and.w	r3, r3, #15
 8001cde:	3b04      	subs	r3, #4
 8001ce0:	0112      	lsls	r2, r2, #4
 8001ce2:	b2d2      	uxtb	r2, r2
 8001ce4:	440b      	add	r3, r1
 8001ce6:	761a      	strb	r2, [r3, #24]
}
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	e000e100 	.word	0xe000e100
 8001cf8:	e000ed00 	.word	0xe000ed00

08001cfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b089      	sub	sp, #36	; 0x24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f003 0307 	and.w	r3, r3, #7
 8001d0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	f1c3 0307 	rsb	r3, r3, #7
 8001d16:	2b04      	cmp	r3, #4
 8001d18:	bf28      	it	cs
 8001d1a:	2304      	movcs	r3, #4
 8001d1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	3304      	adds	r3, #4
 8001d22:	2b06      	cmp	r3, #6
 8001d24:	d902      	bls.n	8001d2c <NVIC_EncodePriority+0x30>
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	3b03      	subs	r3, #3
 8001d2a:	e000      	b.n	8001d2e <NVIC_EncodePriority+0x32>
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d30:	f04f 32ff 	mov.w	r2, #4294967295
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	43da      	mvns	r2, r3
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	401a      	ands	r2, r3
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d44:	f04f 31ff 	mov.w	r1, #4294967295
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4e:	43d9      	mvns	r1, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d54:	4313      	orrs	r3, r2
         );
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3724      	adds	r7, #36	; 0x24
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
	...

08001d64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d74:	d301      	bcc.n	8001d7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d76:	2301      	movs	r3, #1
 8001d78:	e00f      	b.n	8001d9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d7a:	4a0a      	ldr	r2, [pc, #40]	; (8001da4 <SysTick_Config+0x40>)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d82:	210f      	movs	r1, #15
 8001d84:	f04f 30ff 	mov.w	r0, #4294967295
 8001d88:	f7ff ff8e 	bl	8001ca8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d8c:	4b05      	ldr	r3, [pc, #20]	; (8001da4 <SysTick_Config+0x40>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d92:	4b04      	ldr	r3, [pc, #16]	; (8001da4 <SysTick_Config+0x40>)
 8001d94:	2207      	movs	r2, #7
 8001d96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	e000e010 	.word	0xe000e010

08001da8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f7ff ff47 	bl	8001c44 <__NVIC_SetPriorityGrouping>
}
 8001db6:	bf00      	nop
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b086      	sub	sp, #24
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	60b9      	str	r1, [r7, #8]
 8001dc8:	607a      	str	r2, [r7, #4]
 8001dca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dd0:	f7ff ff5c 	bl	8001c8c <__NVIC_GetPriorityGrouping>
 8001dd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	68b9      	ldr	r1, [r7, #8]
 8001dda:	6978      	ldr	r0, [r7, #20]
 8001ddc:	f7ff ff8e 	bl	8001cfc <NVIC_EncodePriority>
 8001de0:	4602      	mov	r2, r0
 8001de2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001de6:	4611      	mov	r1, r2
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff ff5d 	bl	8001ca8 <__NVIC_SetPriority>
}
 8001dee:	bf00      	nop
 8001df0:	3718      	adds	r7, #24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b082      	sub	sp, #8
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f7ff ffb0 	bl	8001d64 <SysTick_Config>
 8001e04:	4603      	mov	r3, r0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
	...

08001e10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b089      	sub	sp, #36	; 0x24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e22:	2300      	movs	r3, #0
 8001e24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e26:	2300      	movs	r3, #0
 8001e28:	61fb      	str	r3, [r7, #28]
 8001e2a:	e16b      	b.n	8002104 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	697a      	ldr	r2, [r7, #20]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	f040 815a 	bne.w	80020fe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f003 0303 	and.w	r3, r3, #3
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d005      	beq.n	8001e62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d130      	bne.n	8001ec4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	2203      	movs	r2, #3
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	43db      	mvns	r3, r3
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	4013      	ands	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	68da      	ldr	r2, [r3, #12]
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e98:	2201      	movs	r2, #1
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	091b      	lsrs	r3, r3, #4
 8001eae:	f003 0201 	and.w	r2, r3, #1
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f003 0303 	and.w	r3, r3, #3
 8001ecc:	2b03      	cmp	r3, #3
 8001ece:	d017      	beq.n	8001f00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	2203      	movs	r2, #3
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	689a      	ldr	r2, [r3, #8]
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f003 0303 	and.w	r3, r3, #3
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d123      	bne.n	8001f54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	08da      	lsrs	r2, r3, #3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	3208      	adds	r2, #8
 8001f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	f003 0307 	and.w	r3, r3, #7
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	220f      	movs	r2, #15
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	691a      	ldr	r2, [r3, #16]
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	f003 0307 	and.w	r3, r3, #7
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	08da      	lsrs	r2, r3, #3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	3208      	adds	r2, #8
 8001f4e:	69b9      	ldr	r1, [r7, #24]
 8001f50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	2203      	movs	r2, #3
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	43db      	mvns	r3, r3
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f003 0203 	and.w	r2, r3, #3
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	f000 80b4 	beq.w	80020fe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	4b60      	ldr	r3, [pc, #384]	; (800211c <HAL_GPIO_Init+0x30c>)
 8001f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9e:	4a5f      	ldr	r2, [pc, #380]	; (800211c <HAL_GPIO_Init+0x30c>)
 8001fa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fa4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fa6:	4b5d      	ldr	r3, [pc, #372]	; (800211c <HAL_GPIO_Init+0x30c>)
 8001fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001faa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fb2:	4a5b      	ldr	r2, [pc, #364]	; (8002120 <HAL_GPIO_Init+0x310>)
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	089b      	lsrs	r3, r3, #2
 8001fb8:	3302      	adds	r3, #2
 8001fba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	f003 0303 	and.w	r3, r3, #3
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	220f      	movs	r2, #15
 8001fca:	fa02 f303 	lsl.w	r3, r2, r3
 8001fce:	43db      	mvns	r3, r3
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a52      	ldr	r2, [pc, #328]	; (8002124 <HAL_GPIO_Init+0x314>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d02b      	beq.n	8002036 <HAL_GPIO_Init+0x226>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a51      	ldr	r2, [pc, #324]	; (8002128 <HAL_GPIO_Init+0x318>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d025      	beq.n	8002032 <HAL_GPIO_Init+0x222>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a50      	ldr	r2, [pc, #320]	; (800212c <HAL_GPIO_Init+0x31c>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d01f      	beq.n	800202e <HAL_GPIO_Init+0x21e>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a4f      	ldr	r2, [pc, #316]	; (8002130 <HAL_GPIO_Init+0x320>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d019      	beq.n	800202a <HAL_GPIO_Init+0x21a>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a4e      	ldr	r2, [pc, #312]	; (8002134 <HAL_GPIO_Init+0x324>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d013      	beq.n	8002026 <HAL_GPIO_Init+0x216>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a4d      	ldr	r2, [pc, #308]	; (8002138 <HAL_GPIO_Init+0x328>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d00d      	beq.n	8002022 <HAL_GPIO_Init+0x212>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a4c      	ldr	r2, [pc, #304]	; (800213c <HAL_GPIO_Init+0x32c>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d007      	beq.n	800201e <HAL_GPIO_Init+0x20e>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a4b      	ldr	r2, [pc, #300]	; (8002140 <HAL_GPIO_Init+0x330>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d101      	bne.n	800201a <HAL_GPIO_Init+0x20a>
 8002016:	2307      	movs	r3, #7
 8002018:	e00e      	b.n	8002038 <HAL_GPIO_Init+0x228>
 800201a:	2308      	movs	r3, #8
 800201c:	e00c      	b.n	8002038 <HAL_GPIO_Init+0x228>
 800201e:	2306      	movs	r3, #6
 8002020:	e00a      	b.n	8002038 <HAL_GPIO_Init+0x228>
 8002022:	2305      	movs	r3, #5
 8002024:	e008      	b.n	8002038 <HAL_GPIO_Init+0x228>
 8002026:	2304      	movs	r3, #4
 8002028:	e006      	b.n	8002038 <HAL_GPIO_Init+0x228>
 800202a:	2303      	movs	r3, #3
 800202c:	e004      	b.n	8002038 <HAL_GPIO_Init+0x228>
 800202e:	2302      	movs	r3, #2
 8002030:	e002      	b.n	8002038 <HAL_GPIO_Init+0x228>
 8002032:	2301      	movs	r3, #1
 8002034:	e000      	b.n	8002038 <HAL_GPIO_Init+0x228>
 8002036:	2300      	movs	r3, #0
 8002038:	69fa      	ldr	r2, [r7, #28]
 800203a:	f002 0203 	and.w	r2, r2, #3
 800203e:	0092      	lsls	r2, r2, #2
 8002040:	4093      	lsls	r3, r2
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	4313      	orrs	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002048:	4935      	ldr	r1, [pc, #212]	; (8002120 <HAL_GPIO_Init+0x310>)
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	089b      	lsrs	r3, r3, #2
 800204e:	3302      	adds	r3, #2
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002056:	4b3b      	ldr	r3, [pc, #236]	; (8002144 <HAL_GPIO_Init+0x334>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	43db      	mvns	r3, r3
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	4013      	ands	r3, r2
 8002064:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d003      	beq.n	800207a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	4313      	orrs	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800207a:	4a32      	ldr	r2, [pc, #200]	; (8002144 <HAL_GPIO_Init+0x334>)
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002080:	4b30      	ldr	r3, [pc, #192]	; (8002144 <HAL_GPIO_Init+0x334>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	43db      	mvns	r3, r3
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	4013      	ands	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d003      	beq.n	80020a4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020a4:	4a27      	ldr	r2, [pc, #156]	; (8002144 <HAL_GPIO_Init+0x334>)
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020aa:	4b26      	ldr	r3, [pc, #152]	; (8002144 <HAL_GPIO_Init+0x334>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	43db      	mvns	r3, r3
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	4013      	ands	r3, r2
 80020b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d003      	beq.n	80020ce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020ce:	4a1d      	ldr	r2, [pc, #116]	; (8002144 <HAL_GPIO_Init+0x334>)
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020d4:	4b1b      	ldr	r3, [pc, #108]	; (8002144 <HAL_GPIO_Init+0x334>)
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	43db      	mvns	r3, r3
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	4013      	ands	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d003      	beq.n	80020f8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020f8:	4a12      	ldr	r2, [pc, #72]	; (8002144 <HAL_GPIO_Init+0x334>)
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	3301      	adds	r3, #1
 8002102:	61fb      	str	r3, [r7, #28]
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	2b0f      	cmp	r3, #15
 8002108:	f67f ae90 	bls.w	8001e2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800210c:	bf00      	nop
 800210e:	bf00      	nop
 8002110:	3724      	adds	r7, #36	; 0x24
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	40023800 	.word	0x40023800
 8002120:	40013800 	.word	0x40013800
 8002124:	40020000 	.word	0x40020000
 8002128:	40020400 	.word	0x40020400
 800212c:	40020800 	.word	0x40020800
 8002130:	40020c00 	.word	0x40020c00
 8002134:	40021000 	.word	0x40021000
 8002138:	40021400 	.word	0x40021400
 800213c:	40021800 	.word	0x40021800
 8002140:	40021c00 	.word	0x40021c00
 8002144:	40013c00 	.word	0x40013c00

08002148 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	460b      	mov	r3, r1
 8002152:	807b      	strh	r3, [r7, #2]
 8002154:	4613      	mov	r3, r2
 8002156:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002158:	787b      	ldrb	r3, [r7, #1]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d003      	beq.n	8002166 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800215e:	887a      	ldrh	r2, [r7, #2]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002164:	e003      	b.n	800216e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002166:	887b      	ldrh	r3, [r7, #2]
 8002168:	041a      	lsls	r2, r3, #16
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	619a      	str	r2, [r3, #24]
}
 800216e:	bf00      	nop
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
	...

0800217c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b086      	sub	sp, #24
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d101      	bne.n	800218e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e264      	b.n	8002658 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	2b00      	cmp	r3, #0
 8002198:	d075      	beq.n	8002286 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800219a:	4ba3      	ldr	r3, [pc, #652]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f003 030c 	and.w	r3, r3, #12
 80021a2:	2b04      	cmp	r3, #4
 80021a4:	d00c      	beq.n	80021c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021a6:	4ba0      	ldr	r3, [pc, #640]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021ae:	2b08      	cmp	r3, #8
 80021b0:	d112      	bne.n	80021d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021b2:	4b9d      	ldr	r3, [pc, #628]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021be:	d10b      	bne.n	80021d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021c0:	4b99      	ldr	r3, [pc, #612]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d05b      	beq.n	8002284 <HAL_RCC_OscConfig+0x108>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d157      	bne.n	8002284 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e23f      	b.n	8002658 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021e0:	d106      	bne.n	80021f0 <HAL_RCC_OscConfig+0x74>
 80021e2:	4b91      	ldr	r3, [pc, #580]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a90      	ldr	r2, [pc, #576]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 80021e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ec:	6013      	str	r3, [r2, #0]
 80021ee:	e01d      	b.n	800222c <HAL_RCC_OscConfig+0xb0>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021f8:	d10c      	bne.n	8002214 <HAL_RCC_OscConfig+0x98>
 80021fa:	4b8b      	ldr	r3, [pc, #556]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a8a      	ldr	r2, [pc, #552]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 8002200:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002204:	6013      	str	r3, [r2, #0]
 8002206:	4b88      	ldr	r3, [pc, #544]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a87      	ldr	r2, [pc, #540]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 800220c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002210:	6013      	str	r3, [r2, #0]
 8002212:	e00b      	b.n	800222c <HAL_RCC_OscConfig+0xb0>
 8002214:	4b84      	ldr	r3, [pc, #528]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a83      	ldr	r2, [pc, #524]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 800221a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800221e:	6013      	str	r3, [r2, #0]
 8002220:	4b81      	ldr	r3, [pc, #516]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a80      	ldr	r2, [pc, #512]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 8002226:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800222a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d013      	beq.n	800225c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002234:	f7ff fcd6 	bl	8001be4 <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800223a:	e008      	b.n	800224e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800223c:	f7ff fcd2 	bl	8001be4 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b64      	cmp	r3, #100	; 0x64
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e204      	b.n	8002658 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800224e:	4b76      	ldr	r3, [pc, #472]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d0f0      	beq.n	800223c <HAL_RCC_OscConfig+0xc0>
 800225a:	e014      	b.n	8002286 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225c:	f7ff fcc2 	bl	8001be4 <HAL_GetTick>
 8002260:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002264:	f7ff fcbe 	bl	8001be4 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b64      	cmp	r3, #100	; 0x64
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e1f0      	b.n	8002658 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002276:	4b6c      	ldr	r3, [pc, #432]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1f0      	bne.n	8002264 <HAL_RCC_OscConfig+0xe8>
 8002282:	e000      	b.n	8002286 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002284:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d063      	beq.n	800235a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002292:	4b65      	ldr	r3, [pc, #404]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f003 030c 	and.w	r3, r3, #12
 800229a:	2b00      	cmp	r3, #0
 800229c:	d00b      	beq.n	80022b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800229e:	4b62      	ldr	r3, [pc, #392]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022a6:	2b08      	cmp	r3, #8
 80022a8:	d11c      	bne.n	80022e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022aa:	4b5f      	ldr	r3, [pc, #380]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d116      	bne.n	80022e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022b6:	4b5c      	ldr	r3, [pc, #368]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d005      	beq.n	80022ce <HAL_RCC_OscConfig+0x152>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d001      	beq.n	80022ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e1c4      	b.n	8002658 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ce:	4b56      	ldr	r3, [pc, #344]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	00db      	lsls	r3, r3, #3
 80022dc:	4952      	ldr	r1, [pc, #328]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022e2:	e03a      	b.n	800235a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d020      	beq.n	800232e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022ec:	4b4f      	ldr	r3, [pc, #316]	; (800242c <HAL_RCC_OscConfig+0x2b0>)
 80022ee:	2201      	movs	r2, #1
 80022f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f2:	f7ff fc77 	bl	8001be4 <HAL_GetTick>
 80022f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022f8:	e008      	b.n	800230c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022fa:	f7ff fc73 	bl	8001be4 <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	2b02      	cmp	r3, #2
 8002306:	d901      	bls.n	800230c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e1a5      	b.n	8002658 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800230c:	4b46      	ldr	r3, [pc, #280]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d0f0      	beq.n	80022fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002318:	4b43      	ldr	r3, [pc, #268]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	4940      	ldr	r1, [pc, #256]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 8002328:	4313      	orrs	r3, r2
 800232a:	600b      	str	r3, [r1, #0]
 800232c:	e015      	b.n	800235a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800232e:	4b3f      	ldr	r3, [pc, #252]	; (800242c <HAL_RCC_OscConfig+0x2b0>)
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002334:	f7ff fc56 	bl	8001be4 <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800233a:	e008      	b.n	800234e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800233c:	f7ff fc52 	bl	8001be4 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e184      	b.n	8002658 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800234e:	4b36      	ldr	r3, [pc, #216]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1f0      	bne.n	800233c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0308 	and.w	r3, r3, #8
 8002362:	2b00      	cmp	r3, #0
 8002364:	d030      	beq.n	80023c8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d016      	beq.n	800239c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800236e:	4b30      	ldr	r3, [pc, #192]	; (8002430 <HAL_RCC_OscConfig+0x2b4>)
 8002370:	2201      	movs	r2, #1
 8002372:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002374:	f7ff fc36 	bl	8001be4 <HAL_GetTick>
 8002378:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800237a:	e008      	b.n	800238e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800237c:	f7ff fc32 	bl	8001be4 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e164      	b.n	8002658 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800238e:	4b26      	ldr	r3, [pc, #152]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 8002390:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d0f0      	beq.n	800237c <HAL_RCC_OscConfig+0x200>
 800239a:	e015      	b.n	80023c8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800239c:	4b24      	ldr	r3, [pc, #144]	; (8002430 <HAL_RCC_OscConfig+0x2b4>)
 800239e:	2200      	movs	r2, #0
 80023a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023a2:	f7ff fc1f 	bl	8001be4 <HAL_GetTick>
 80023a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023a8:	e008      	b.n	80023bc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023aa:	f7ff fc1b 	bl	8001be4 <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d901      	bls.n	80023bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e14d      	b.n	8002658 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023bc:	4b1a      	ldr	r3, [pc, #104]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 80023be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d1f0      	bne.n	80023aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0304 	and.w	r3, r3, #4
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	f000 80a0 	beq.w	8002516 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023d6:	2300      	movs	r3, #0
 80023d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023da:	4b13      	ldr	r3, [pc, #76]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d10f      	bne.n	8002406 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023e6:	2300      	movs	r3, #0
 80023e8:	60bb      	str	r3, [r7, #8]
 80023ea:	4b0f      	ldr	r3, [pc, #60]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 80023ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ee:	4a0e      	ldr	r2, [pc, #56]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 80023f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023f4:	6413      	str	r3, [r2, #64]	; 0x40
 80023f6:	4b0c      	ldr	r3, [pc, #48]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 80023f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023fe:	60bb      	str	r3, [r7, #8]
 8002400:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002402:	2301      	movs	r3, #1
 8002404:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002406:	4b0b      	ldr	r3, [pc, #44]	; (8002434 <HAL_RCC_OscConfig+0x2b8>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800240e:	2b00      	cmp	r3, #0
 8002410:	d121      	bne.n	8002456 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002412:	4b08      	ldr	r3, [pc, #32]	; (8002434 <HAL_RCC_OscConfig+0x2b8>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a07      	ldr	r2, [pc, #28]	; (8002434 <HAL_RCC_OscConfig+0x2b8>)
 8002418:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800241c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800241e:	f7ff fbe1 	bl	8001be4 <HAL_GetTick>
 8002422:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002424:	e011      	b.n	800244a <HAL_RCC_OscConfig+0x2ce>
 8002426:	bf00      	nop
 8002428:	40023800 	.word	0x40023800
 800242c:	42470000 	.word	0x42470000
 8002430:	42470e80 	.word	0x42470e80
 8002434:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002438:	f7ff fbd4 	bl	8001be4 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b02      	cmp	r3, #2
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e106      	b.n	8002658 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800244a:	4b85      	ldr	r3, [pc, #532]	; (8002660 <HAL_RCC_OscConfig+0x4e4>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002452:	2b00      	cmp	r3, #0
 8002454:	d0f0      	beq.n	8002438 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d106      	bne.n	800246c <HAL_RCC_OscConfig+0x2f0>
 800245e:	4b81      	ldr	r3, [pc, #516]	; (8002664 <HAL_RCC_OscConfig+0x4e8>)
 8002460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002462:	4a80      	ldr	r2, [pc, #512]	; (8002664 <HAL_RCC_OscConfig+0x4e8>)
 8002464:	f043 0301 	orr.w	r3, r3, #1
 8002468:	6713      	str	r3, [r2, #112]	; 0x70
 800246a:	e01c      	b.n	80024a6 <HAL_RCC_OscConfig+0x32a>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	2b05      	cmp	r3, #5
 8002472:	d10c      	bne.n	800248e <HAL_RCC_OscConfig+0x312>
 8002474:	4b7b      	ldr	r3, [pc, #492]	; (8002664 <HAL_RCC_OscConfig+0x4e8>)
 8002476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002478:	4a7a      	ldr	r2, [pc, #488]	; (8002664 <HAL_RCC_OscConfig+0x4e8>)
 800247a:	f043 0304 	orr.w	r3, r3, #4
 800247e:	6713      	str	r3, [r2, #112]	; 0x70
 8002480:	4b78      	ldr	r3, [pc, #480]	; (8002664 <HAL_RCC_OscConfig+0x4e8>)
 8002482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002484:	4a77      	ldr	r2, [pc, #476]	; (8002664 <HAL_RCC_OscConfig+0x4e8>)
 8002486:	f043 0301 	orr.w	r3, r3, #1
 800248a:	6713      	str	r3, [r2, #112]	; 0x70
 800248c:	e00b      	b.n	80024a6 <HAL_RCC_OscConfig+0x32a>
 800248e:	4b75      	ldr	r3, [pc, #468]	; (8002664 <HAL_RCC_OscConfig+0x4e8>)
 8002490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002492:	4a74      	ldr	r2, [pc, #464]	; (8002664 <HAL_RCC_OscConfig+0x4e8>)
 8002494:	f023 0301 	bic.w	r3, r3, #1
 8002498:	6713      	str	r3, [r2, #112]	; 0x70
 800249a:	4b72      	ldr	r3, [pc, #456]	; (8002664 <HAL_RCC_OscConfig+0x4e8>)
 800249c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800249e:	4a71      	ldr	r2, [pc, #452]	; (8002664 <HAL_RCC_OscConfig+0x4e8>)
 80024a0:	f023 0304 	bic.w	r3, r3, #4
 80024a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d015      	beq.n	80024da <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ae:	f7ff fb99 	bl	8001be4 <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024b4:	e00a      	b.n	80024cc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024b6:	f7ff fb95 	bl	8001be4 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d901      	bls.n	80024cc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e0c5      	b.n	8002658 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024cc:	4b65      	ldr	r3, [pc, #404]	; (8002664 <HAL_RCC_OscConfig+0x4e8>)
 80024ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d0:	f003 0302 	and.w	r3, r3, #2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d0ee      	beq.n	80024b6 <HAL_RCC_OscConfig+0x33a>
 80024d8:	e014      	b.n	8002504 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024da:	f7ff fb83 	bl	8001be4 <HAL_GetTick>
 80024de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024e0:	e00a      	b.n	80024f8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024e2:	f7ff fb7f 	bl	8001be4 <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e0af      	b.n	8002658 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024f8:	4b5a      	ldr	r3, [pc, #360]	; (8002664 <HAL_RCC_OscConfig+0x4e8>)
 80024fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d1ee      	bne.n	80024e2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002504:	7dfb      	ldrb	r3, [r7, #23]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d105      	bne.n	8002516 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800250a:	4b56      	ldr	r3, [pc, #344]	; (8002664 <HAL_RCC_OscConfig+0x4e8>)
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	4a55      	ldr	r2, [pc, #340]	; (8002664 <HAL_RCC_OscConfig+0x4e8>)
 8002510:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002514:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	2b00      	cmp	r3, #0
 800251c:	f000 809b 	beq.w	8002656 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002520:	4b50      	ldr	r3, [pc, #320]	; (8002664 <HAL_RCC_OscConfig+0x4e8>)
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f003 030c 	and.w	r3, r3, #12
 8002528:	2b08      	cmp	r3, #8
 800252a:	d05c      	beq.n	80025e6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	2b02      	cmp	r3, #2
 8002532:	d141      	bne.n	80025b8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002534:	4b4c      	ldr	r3, [pc, #304]	; (8002668 <HAL_RCC_OscConfig+0x4ec>)
 8002536:	2200      	movs	r2, #0
 8002538:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800253a:	f7ff fb53 	bl	8001be4 <HAL_GetTick>
 800253e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002540:	e008      	b.n	8002554 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002542:	f7ff fb4f 	bl	8001be4 <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	2b02      	cmp	r3, #2
 800254e:	d901      	bls.n	8002554 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e081      	b.n	8002658 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002554:	4b43      	ldr	r3, [pc, #268]	; (8002664 <HAL_RCC_OscConfig+0x4e8>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d1f0      	bne.n	8002542 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	69da      	ldr	r2, [r3, #28]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a1b      	ldr	r3, [r3, #32]
 8002568:	431a      	orrs	r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256e:	019b      	lsls	r3, r3, #6
 8002570:	431a      	orrs	r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002576:	085b      	lsrs	r3, r3, #1
 8002578:	3b01      	subs	r3, #1
 800257a:	041b      	lsls	r3, r3, #16
 800257c:	431a      	orrs	r2, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002582:	061b      	lsls	r3, r3, #24
 8002584:	4937      	ldr	r1, [pc, #220]	; (8002664 <HAL_RCC_OscConfig+0x4e8>)
 8002586:	4313      	orrs	r3, r2
 8002588:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800258a:	4b37      	ldr	r3, [pc, #220]	; (8002668 <HAL_RCC_OscConfig+0x4ec>)
 800258c:	2201      	movs	r2, #1
 800258e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002590:	f7ff fb28 	bl	8001be4 <HAL_GetTick>
 8002594:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002596:	e008      	b.n	80025aa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002598:	f7ff fb24 	bl	8001be4 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e056      	b.n	8002658 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025aa:	4b2e      	ldr	r3, [pc, #184]	; (8002664 <HAL_RCC_OscConfig+0x4e8>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d0f0      	beq.n	8002598 <HAL_RCC_OscConfig+0x41c>
 80025b6:	e04e      	b.n	8002656 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025b8:	4b2b      	ldr	r3, [pc, #172]	; (8002668 <HAL_RCC_OscConfig+0x4ec>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025be:	f7ff fb11 	bl	8001be4 <HAL_GetTick>
 80025c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025c4:	e008      	b.n	80025d8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025c6:	f7ff fb0d 	bl	8001be4 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d901      	bls.n	80025d8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e03f      	b.n	8002658 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025d8:	4b22      	ldr	r3, [pc, #136]	; (8002664 <HAL_RCC_OscConfig+0x4e8>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d1f0      	bne.n	80025c6 <HAL_RCC_OscConfig+0x44a>
 80025e4:	e037      	b.n	8002656 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	699b      	ldr	r3, [r3, #24]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d101      	bne.n	80025f2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e032      	b.n	8002658 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025f2:	4b1c      	ldr	r3, [pc, #112]	; (8002664 <HAL_RCC_OscConfig+0x4e8>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d028      	beq.n	8002652 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800260a:	429a      	cmp	r2, r3
 800260c:	d121      	bne.n	8002652 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002618:	429a      	cmp	r2, r3
 800261a:	d11a      	bne.n	8002652 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800261c:	68fa      	ldr	r2, [r7, #12]
 800261e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002622:	4013      	ands	r3, r2
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002628:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800262a:	4293      	cmp	r3, r2
 800262c:	d111      	bne.n	8002652 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002638:	085b      	lsrs	r3, r3, #1
 800263a:	3b01      	subs	r3, #1
 800263c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800263e:	429a      	cmp	r2, r3
 8002640:	d107      	bne.n	8002652 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800264c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800264e:	429a      	cmp	r2, r3
 8002650:	d001      	beq.n	8002656 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e000      	b.n	8002658 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002656:	2300      	movs	r3, #0
}
 8002658:	4618      	mov	r0, r3
 800265a:	3718      	adds	r7, #24
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40007000 	.word	0x40007000
 8002664:	40023800 	.word	0x40023800
 8002668:	42470060 	.word	0x42470060

0800266c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d101      	bne.n	8002680 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e0cc      	b.n	800281a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002680:	4b68      	ldr	r3, [pc, #416]	; (8002824 <HAL_RCC_ClockConfig+0x1b8>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0307 	and.w	r3, r3, #7
 8002688:	683a      	ldr	r2, [r7, #0]
 800268a:	429a      	cmp	r2, r3
 800268c:	d90c      	bls.n	80026a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800268e:	4b65      	ldr	r3, [pc, #404]	; (8002824 <HAL_RCC_ClockConfig+0x1b8>)
 8002690:	683a      	ldr	r2, [r7, #0]
 8002692:	b2d2      	uxtb	r2, r2
 8002694:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002696:	4b63      	ldr	r3, [pc, #396]	; (8002824 <HAL_RCC_ClockConfig+0x1b8>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0307 	and.w	r3, r3, #7
 800269e:	683a      	ldr	r2, [r7, #0]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d001      	beq.n	80026a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e0b8      	b.n	800281a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d020      	beq.n	80026f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0304 	and.w	r3, r3, #4
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d005      	beq.n	80026cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026c0:	4b59      	ldr	r3, [pc, #356]	; (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	4a58      	ldr	r2, [pc, #352]	; (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 80026c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0308 	and.w	r3, r3, #8
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d005      	beq.n	80026e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026d8:	4b53      	ldr	r3, [pc, #332]	; (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	4a52      	ldr	r2, [pc, #328]	; (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 80026de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026e4:	4b50      	ldr	r3, [pc, #320]	; (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	494d      	ldr	r1, [pc, #308]	; (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d044      	beq.n	800278c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	2b01      	cmp	r3, #1
 8002708:	d107      	bne.n	800271a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800270a:	4b47      	ldr	r3, [pc, #284]	; (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d119      	bne.n	800274a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e07f      	b.n	800281a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	2b02      	cmp	r3, #2
 8002720:	d003      	beq.n	800272a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002726:	2b03      	cmp	r3, #3
 8002728:	d107      	bne.n	800273a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800272a:	4b3f      	ldr	r3, [pc, #252]	; (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d109      	bne.n	800274a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e06f      	b.n	800281a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800273a:	4b3b      	ldr	r3, [pc, #236]	; (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e067      	b.n	800281a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800274a:	4b37      	ldr	r3, [pc, #220]	; (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f023 0203 	bic.w	r2, r3, #3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	4934      	ldr	r1, [pc, #208]	; (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 8002758:	4313      	orrs	r3, r2
 800275a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800275c:	f7ff fa42 	bl	8001be4 <HAL_GetTick>
 8002760:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002762:	e00a      	b.n	800277a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002764:	f7ff fa3e 	bl	8001be4 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002772:	4293      	cmp	r3, r2
 8002774:	d901      	bls.n	800277a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e04f      	b.n	800281a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800277a:	4b2b      	ldr	r3, [pc, #172]	; (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f003 020c 	and.w	r2, r3, #12
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	429a      	cmp	r2, r3
 800278a:	d1eb      	bne.n	8002764 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800278c:	4b25      	ldr	r3, [pc, #148]	; (8002824 <HAL_RCC_ClockConfig+0x1b8>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0307 	and.w	r3, r3, #7
 8002794:	683a      	ldr	r2, [r7, #0]
 8002796:	429a      	cmp	r2, r3
 8002798:	d20c      	bcs.n	80027b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800279a:	4b22      	ldr	r3, [pc, #136]	; (8002824 <HAL_RCC_ClockConfig+0x1b8>)
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	b2d2      	uxtb	r2, r2
 80027a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027a2:	4b20      	ldr	r3, [pc, #128]	; (8002824 <HAL_RCC_ClockConfig+0x1b8>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0307 	and.w	r3, r3, #7
 80027aa:	683a      	ldr	r2, [r7, #0]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d001      	beq.n	80027b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e032      	b.n	800281a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0304 	and.w	r3, r3, #4
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d008      	beq.n	80027d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027c0:	4b19      	ldr	r3, [pc, #100]	; (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	4916      	ldr	r1, [pc, #88]	; (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0308 	and.w	r3, r3, #8
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d009      	beq.n	80027f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027de:	4b12      	ldr	r3, [pc, #72]	; (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	490e      	ldr	r1, [pc, #56]	; (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027f2:	f000 f821 	bl	8002838 <HAL_RCC_GetSysClockFreq>
 80027f6:	4602      	mov	r2, r0
 80027f8:	4b0b      	ldr	r3, [pc, #44]	; (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	091b      	lsrs	r3, r3, #4
 80027fe:	f003 030f 	and.w	r3, r3, #15
 8002802:	490a      	ldr	r1, [pc, #40]	; (800282c <HAL_RCC_ClockConfig+0x1c0>)
 8002804:	5ccb      	ldrb	r3, [r1, r3]
 8002806:	fa22 f303 	lsr.w	r3, r2, r3
 800280a:	4a09      	ldr	r2, [pc, #36]	; (8002830 <HAL_RCC_ClockConfig+0x1c4>)
 800280c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800280e:	4b09      	ldr	r3, [pc, #36]	; (8002834 <HAL_RCC_ClockConfig+0x1c8>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4618      	mov	r0, r3
 8002814:	f7ff f9a2 	bl	8001b5c <HAL_InitTick>

  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3710      	adds	r7, #16
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	40023c00 	.word	0x40023c00
 8002828:	40023800 	.word	0x40023800
 800282c:	0800908c 	.word	0x0800908c
 8002830:	20000008 	.word	0x20000008
 8002834:	2000000c 	.word	0x2000000c

08002838 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002838:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800283c:	b084      	sub	sp, #16
 800283e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002840:	2300      	movs	r3, #0
 8002842:	607b      	str	r3, [r7, #4]
 8002844:	2300      	movs	r3, #0
 8002846:	60fb      	str	r3, [r7, #12]
 8002848:	2300      	movs	r3, #0
 800284a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800284c:	2300      	movs	r3, #0
 800284e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002850:	4b67      	ldr	r3, [pc, #412]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f003 030c 	and.w	r3, r3, #12
 8002858:	2b08      	cmp	r3, #8
 800285a:	d00d      	beq.n	8002878 <HAL_RCC_GetSysClockFreq+0x40>
 800285c:	2b08      	cmp	r3, #8
 800285e:	f200 80bd 	bhi.w	80029dc <HAL_RCC_GetSysClockFreq+0x1a4>
 8002862:	2b00      	cmp	r3, #0
 8002864:	d002      	beq.n	800286c <HAL_RCC_GetSysClockFreq+0x34>
 8002866:	2b04      	cmp	r3, #4
 8002868:	d003      	beq.n	8002872 <HAL_RCC_GetSysClockFreq+0x3a>
 800286a:	e0b7      	b.n	80029dc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800286c:	4b61      	ldr	r3, [pc, #388]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800286e:	60bb      	str	r3, [r7, #8]
       break;
 8002870:	e0b7      	b.n	80029e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002872:	4b61      	ldr	r3, [pc, #388]	; (80029f8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002874:	60bb      	str	r3, [r7, #8]
      break;
 8002876:	e0b4      	b.n	80029e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002878:	4b5d      	ldr	r3, [pc, #372]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002880:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002882:	4b5b      	ldr	r3, [pc, #364]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d04d      	beq.n	800292a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800288e:	4b58      	ldr	r3, [pc, #352]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	099b      	lsrs	r3, r3, #6
 8002894:	461a      	mov	r2, r3
 8002896:	f04f 0300 	mov.w	r3, #0
 800289a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800289e:	f04f 0100 	mov.w	r1, #0
 80028a2:	ea02 0800 	and.w	r8, r2, r0
 80028a6:	ea03 0901 	and.w	r9, r3, r1
 80028aa:	4640      	mov	r0, r8
 80028ac:	4649      	mov	r1, r9
 80028ae:	f04f 0200 	mov.w	r2, #0
 80028b2:	f04f 0300 	mov.w	r3, #0
 80028b6:	014b      	lsls	r3, r1, #5
 80028b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80028bc:	0142      	lsls	r2, r0, #5
 80028be:	4610      	mov	r0, r2
 80028c0:	4619      	mov	r1, r3
 80028c2:	ebb0 0008 	subs.w	r0, r0, r8
 80028c6:	eb61 0109 	sbc.w	r1, r1, r9
 80028ca:	f04f 0200 	mov.w	r2, #0
 80028ce:	f04f 0300 	mov.w	r3, #0
 80028d2:	018b      	lsls	r3, r1, #6
 80028d4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80028d8:	0182      	lsls	r2, r0, #6
 80028da:	1a12      	subs	r2, r2, r0
 80028dc:	eb63 0301 	sbc.w	r3, r3, r1
 80028e0:	f04f 0000 	mov.w	r0, #0
 80028e4:	f04f 0100 	mov.w	r1, #0
 80028e8:	00d9      	lsls	r1, r3, #3
 80028ea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80028ee:	00d0      	lsls	r0, r2, #3
 80028f0:	4602      	mov	r2, r0
 80028f2:	460b      	mov	r3, r1
 80028f4:	eb12 0208 	adds.w	r2, r2, r8
 80028f8:	eb43 0309 	adc.w	r3, r3, r9
 80028fc:	f04f 0000 	mov.w	r0, #0
 8002900:	f04f 0100 	mov.w	r1, #0
 8002904:	0259      	lsls	r1, r3, #9
 8002906:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800290a:	0250      	lsls	r0, r2, #9
 800290c:	4602      	mov	r2, r0
 800290e:	460b      	mov	r3, r1
 8002910:	4610      	mov	r0, r2
 8002912:	4619      	mov	r1, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	461a      	mov	r2, r3
 8002918:	f04f 0300 	mov.w	r3, #0
 800291c:	f7fe f9b4 	bl	8000c88 <__aeabi_uldivmod>
 8002920:	4602      	mov	r2, r0
 8002922:	460b      	mov	r3, r1
 8002924:	4613      	mov	r3, r2
 8002926:	60fb      	str	r3, [r7, #12]
 8002928:	e04a      	b.n	80029c0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800292a:	4b31      	ldr	r3, [pc, #196]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	099b      	lsrs	r3, r3, #6
 8002930:	461a      	mov	r2, r3
 8002932:	f04f 0300 	mov.w	r3, #0
 8002936:	f240 10ff 	movw	r0, #511	; 0x1ff
 800293a:	f04f 0100 	mov.w	r1, #0
 800293e:	ea02 0400 	and.w	r4, r2, r0
 8002942:	ea03 0501 	and.w	r5, r3, r1
 8002946:	4620      	mov	r0, r4
 8002948:	4629      	mov	r1, r5
 800294a:	f04f 0200 	mov.w	r2, #0
 800294e:	f04f 0300 	mov.w	r3, #0
 8002952:	014b      	lsls	r3, r1, #5
 8002954:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002958:	0142      	lsls	r2, r0, #5
 800295a:	4610      	mov	r0, r2
 800295c:	4619      	mov	r1, r3
 800295e:	1b00      	subs	r0, r0, r4
 8002960:	eb61 0105 	sbc.w	r1, r1, r5
 8002964:	f04f 0200 	mov.w	r2, #0
 8002968:	f04f 0300 	mov.w	r3, #0
 800296c:	018b      	lsls	r3, r1, #6
 800296e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002972:	0182      	lsls	r2, r0, #6
 8002974:	1a12      	subs	r2, r2, r0
 8002976:	eb63 0301 	sbc.w	r3, r3, r1
 800297a:	f04f 0000 	mov.w	r0, #0
 800297e:	f04f 0100 	mov.w	r1, #0
 8002982:	00d9      	lsls	r1, r3, #3
 8002984:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002988:	00d0      	lsls	r0, r2, #3
 800298a:	4602      	mov	r2, r0
 800298c:	460b      	mov	r3, r1
 800298e:	1912      	adds	r2, r2, r4
 8002990:	eb45 0303 	adc.w	r3, r5, r3
 8002994:	f04f 0000 	mov.w	r0, #0
 8002998:	f04f 0100 	mov.w	r1, #0
 800299c:	0299      	lsls	r1, r3, #10
 800299e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80029a2:	0290      	lsls	r0, r2, #10
 80029a4:	4602      	mov	r2, r0
 80029a6:	460b      	mov	r3, r1
 80029a8:	4610      	mov	r0, r2
 80029aa:	4619      	mov	r1, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	461a      	mov	r2, r3
 80029b0:	f04f 0300 	mov.w	r3, #0
 80029b4:	f7fe f968 	bl	8000c88 <__aeabi_uldivmod>
 80029b8:	4602      	mov	r2, r0
 80029ba:	460b      	mov	r3, r1
 80029bc:	4613      	mov	r3, r2
 80029be:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80029c0:	4b0b      	ldr	r3, [pc, #44]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	0c1b      	lsrs	r3, r3, #16
 80029c6:	f003 0303 	and.w	r3, r3, #3
 80029ca:	3301      	adds	r3, #1
 80029cc:	005b      	lsls	r3, r3, #1
 80029ce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029d8:	60bb      	str	r3, [r7, #8]
      break;
 80029da:	e002      	b.n	80029e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029dc:	4b05      	ldr	r3, [pc, #20]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80029de:	60bb      	str	r3, [r7, #8]
      break;
 80029e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029e2:	68bb      	ldr	r3, [r7, #8]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3710      	adds	r7, #16
 80029e8:	46bd      	mov	sp, r7
 80029ea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80029ee:	bf00      	nop
 80029f0:	40023800 	.word	0x40023800
 80029f4:	00f42400 	.word	0x00f42400
 80029f8:	007a1200 	.word	0x007a1200

080029fc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a04:	2300      	movs	r3, #0
 8002a06:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0301 	and.w	r3, r3, #1
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d105      	bne.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d035      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002a24:	4b62      	ldr	r3, [pc, #392]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002a2a:	f7ff f8db 	bl	8001be4 <HAL_GetTick>
 8002a2e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a30:	e008      	b.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002a32:	f7ff f8d7 	bl	8001be4 <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d901      	bls.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e0b0      	b.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a44:	4b5b      	ldr	r3, [pc, #364]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d1f0      	bne.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	019a      	lsls	r2, r3, #6
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	071b      	lsls	r3, r3, #28
 8002a5c:	4955      	ldr	r1, [pc, #340]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002a64:	4b52      	ldr	r3, [pc, #328]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002a66:	2201      	movs	r2, #1
 8002a68:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002a6a:	f7ff f8bb 	bl	8001be4 <HAL_GetTick>
 8002a6e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a70:	e008      	b.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002a72:	f7ff f8b7 	bl	8001be4 <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d901      	bls.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e090      	b.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a84:	4b4b      	ldr	r3, [pc, #300]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d0f0      	beq.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0302 	and.w	r3, r3, #2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f000 8083 	beq.w	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	60fb      	str	r3, [r7, #12]
 8002aa2:	4b44      	ldr	r3, [pc, #272]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa6:	4a43      	ldr	r2, [pc, #268]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002aa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aac:	6413      	str	r3, [r2, #64]	; 0x40
 8002aae:	4b41      	ldr	r3, [pc, #260]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab6:	60fb      	str	r3, [r7, #12]
 8002ab8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002aba:	4b3f      	ldr	r3, [pc, #252]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a3e      	ldr	r2, [pc, #248]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002ac0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ac4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002ac6:	f7ff f88d 	bl	8001be4 <HAL_GetTick>
 8002aca:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002acc:	e008      	b.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002ace:	f7ff f889 	bl	8001be4 <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d901      	bls.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e062      	b.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002ae0:	4b35      	ldr	r3, [pc, #212]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d0f0      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002aec:	4b31      	ldr	r3, [pc, #196]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002af4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d02f      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d028      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b0a:	4b2a      	ldr	r3, [pc, #168]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b12:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b14:	4b29      	ldr	r3, [pc, #164]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002b16:	2201      	movs	r2, #1
 8002b18:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b1a:	4b28      	ldr	r3, [pc, #160]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002b20:	4a24      	ldr	r2, [pc, #144]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002b26:	4b23      	ldr	r3, [pc, #140]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d114      	bne.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002b32:	f7ff f857 	bl	8001be4 <HAL_GetTick>
 8002b36:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b38:	e00a      	b.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b3a:	f7ff f853 	bl	8001be4 <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d901      	bls.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e02a      	b.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b50:	4b18      	ldr	r3, [pc, #96]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b54:	f003 0302 	and.w	r3, r3, #2
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d0ee      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b68:	d10d      	bne.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002b6a:	4b12      	ldr	r3, [pc, #72]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002b7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b7e:	490d      	ldr	r1, [pc, #52]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	608b      	str	r3, [r1, #8]
 8002b84:	e005      	b.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002b86:	4b0b      	ldr	r3, [pc, #44]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	4a0a      	ldr	r2, [pc, #40]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002b8c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002b90:	6093      	str	r3, [r2, #8]
 8002b92:	4b08      	ldr	r3, [pc, #32]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002b94:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b9e:	4905      	ldr	r1, [pc, #20]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3718      	adds	r7, #24
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	42470068 	.word	0x42470068
 8002bb4:	40023800 	.word	0x40023800
 8002bb8:	40007000 	.word	0x40007000
 8002bbc:	42470e40 	.word	0x42470e40

08002bc0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d101      	bne.n	8002bd2 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e083      	b.n	8002cda <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	7f5b      	ldrb	r3, [r3, #29]
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d105      	bne.n	8002be8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f7fe fdd8 	bl	8001798 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2202      	movs	r2, #2
 8002bec:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	22ca      	movs	r2, #202	; 0xca
 8002bf4:	625a      	str	r2, [r3, #36]	; 0x24
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2253      	movs	r2, #83	; 0x53
 8002bfc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 f9fb 	bl	8002ffa <RTC_EnterInitMode>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d008      	beq.n	8002c1c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	22ff      	movs	r2, #255	; 0xff
 8002c10:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2204      	movs	r2, #4
 8002c16:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e05e      	b.n	8002cda <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	6812      	ldr	r2, [r2, #0]
 8002c26:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002c2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c2e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	6899      	ldr	r1, [r3, #8]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685a      	ldr	r2, [r3, #4]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	431a      	orrs	r2, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	695b      	ldr	r3, [r3, #20]
 8002c44:	431a      	orrs	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	68d2      	ldr	r2, [r2, #12]
 8002c56:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6919      	ldr	r1, [r3, #16]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	041a      	lsls	r2, r3, #16
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	68da      	ldr	r2, [r3, #12]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c7a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f003 0320 	and.w	r3, r3, #32
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d10e      	bne.n	8002ca8 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 f98d 	bl	8002faa <HAL_RTC_WaitForSynchro>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d008      	beq.n	8002ca8 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	22ff      	movs	r2, #255	; 0xff
 8002c9c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2204      	movs	r2, #4
 8002ca2:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e018      	b.n	8002cda <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002cb6:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	699a      	ldr	r2, [r3, #24]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	22ff      	movs	r2, #255	; 0xff
 8002cd0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
  }
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3708      	adds	r7, #8
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002ce2:	b590      	push	{r4, r7, lr}
 8002ce4:	b087      	sub	sp, #28
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	60f8      	str	r0, [r7, #12]
 8002cea:	60b9      	str	r1, [r7, #8]
 8002cec:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	7f1b      	ldrb	r3, [r3, #28]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d101      	bne.n	8002cfe <HAL_RTC_SetTime+0x1c>
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	e0aa      	b.n	8002e54 <HAL_RTC_SetTime+0x172>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2201      	movs	r2, #1
 8002d02:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2202      	movs	r2, #2
 8002d08:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d126      	bne.n	8002d5e <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d102      	bne.n	8002d24 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	2200      	movs	r2, #0
 8002d22:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f000 f992 	bl	8003052 <RTC_ByteToBcd2>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	785b      	ldrb	r3, [r3, #1]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f000 f98b 	bl	8003052 <RTC_ByteToBcd2>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002d40:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	789b      	ldrb	r3, [r3, #2]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f000 f983 	bl	8003052 <RTC_ByteToBcd2>
 8002d4c:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002d4e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	78db      	ldrb	r3, [r3, #3]
 8002d56:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	617b      	str	r3, [r7, #20]
 8002d5c:	e018      	b.n	8002d90 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d102      	bne.n	8002d72 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	785b      	ldrb	r3, [r3, #1]
 8002d7c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002d7e:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8002d80:	68ba      	ldr	r2, [r7, #8]
 8002d82:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002d84:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	78db      	ldrb	r3, [r3, #3]
 8002d8a:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	22ca      	movs	r2, #202	; 0xca
 8002d96:	625a      	str	r2, [r3, #36]	; 0x24
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2253      	movs	r2, #83	; 0x53
 8002d9e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002da0:	68f8      	ldr	r0, [r7, #12]
 8002da2:	f000 f92a 	bl	8002ffa <RTC_EnterInitMode>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d00b      	beq.n	8002dc4 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	22ff      	movs	r2, #255	; 0xff
 8002db2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2204      	movs	r2, #4
 8002db8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e047      	b.n	8002e54 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002dce:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002dd2:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	689a      	ldr	r2, [r3, #8]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002de2:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	6899      	ldr	r1, [r3, #8]
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	68da      	ldr	r2, [r3, #12]
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	431a      	orrs	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68da      	ldr	r2, [r3, #12]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e0a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	f003 0320 	and.w	r3, r3, #32
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d111      	bne.n	8002e3e <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002e1a:	68f8      	ldr	r0, [r7, #12]
 8002e1c:	f000 f8c5 	bl	8002faa <HAL_RTC_WaitForSynchro>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00b      	beq.n	8002e3e <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	22ff      	movs	r2, #255	; 0xff
 8002e2c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2204      	movs	r2, #4
 8002e32:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2200      	movs	r2, #0
 8002e38:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e00a      	b.n	8002e54 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	22ff      	movs	r2, #255	; 0xff
 8002e44:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8002e52:	2300      	movs	r3, #0
  }
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	371c      	adds	r7, #28
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd90      	pop	{r4, r7, pc}

08002e5c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002e5c:	b590      	push	{r4, r7, lr}
 8002e5e:	b087      	sub	sp, #28
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	7f1b      	ldrb	r3, [r3, #28]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d101      	bne.n	8002e78 <HAL_RTC_SetDate+0x1c>
 8002e74:	2302      	movs	r3, #2
 8002e76:	e094      	b.n	8002fa2 <HAL_RTC_SetDate+0x146>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2202      	movs	r2, #2
 8002e82:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d10e      	bne.n	8002ea8 <HAL_RTC_SetDate+0x4c>
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	785b      	ldrb	r3, [r3, #1]
 8002e8e:	f003 0310 	and.w	r3, r3, #16
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d008      	beq.n	8002ea8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	785b      	ldrb	r3, [r3, #1]
 8002e9a:	f023 0310 	bic.w	r3, r3, #16
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	330a      	adds	r3, #10
 8002ea2:	b2da      	uxtb	r2, r3
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d11c      	bne.n	8002ee8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	78db      	ldrb	r3, [r3, #3]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f000 f8cd 	bl	8003052 <RTC_ByteToBcd2>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	785b      	ldrb	r3, [r3, #1]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f000 f8c6 	bl	8003052 <RTC_ByteToBcd2>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002eca:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	789b      	ldrb	r3, [r3, #2]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f000 f8be 	bl	8003052 <RTC_ByteToBcd2>
 8002ed6:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002ed8:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	617b      	str	r3, [r7, #20]
 8002ee6:	e00e      	b.n	8002f06 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	78db      	ldrb	r3, [r3, #3]
 8002eec:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	785b      	ldrb	r3, [r3, #1]
 8002ef2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002ef4:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8002ef6:	68ba      	ldr	r2, [r7, #8]
 8002ef8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8002efa:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002f02:	4313      	orrs	r3, r2
 8002f04:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	22ca      	movs	r2, #202	; 0xca
 8002f0c:	625a      	str	r2, [r3, #36]	; 0x24
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2253      	movs	r2, #83	; 0x53
 8002f14:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002f16:	68f8      	ldr	r0, [r7, #12]
 8002f18:	f000 f86f 	bl	8002ffa <RTC_EnterInitMode>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00b      	beq.n	8002f3a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	22ff      	movs	r2, #255	; 0xff
 8002f28:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2204      	movs	r2, #4
 8002f2e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2200      	movs	r2, #0
 8002f34:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e033      	b.n	8002fa2 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002f44:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002f48:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68da      	ldr	r2, [r3, #12]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f58:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	f003 0320 	and.w	r3, r3, #32
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d111      	bne.n	8002f8c <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002f68:	68f8      	ldr	r0, [r7, #12]
 8002f6a:	f000 f81e 	bl	8002faa <HAL_RTC_WaitForSynchro>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d00b      	beq.n	8002f8c <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	22ff      	movs	r2, #255	; 0xff
 8002f7a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2204      	movs	r2, #4
 8002f80:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2200      	movs	r2, #0
 8002f86:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e00a      	b.n	8002fa2 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	22ff      	movs	r2, #255	; 0xff
 8002f92:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2201      	movs	r2, #1
 8002f98:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
  }
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	371c      	adds	r7, #28
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd90      	pop	{r4, r7, pc}

08002faa <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b084      	sub	sp, #16
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68da      	ldr	r2, [r3, #12]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002fc4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002fc6:	f7fe fe0d 	bl	8001be4 <HAL_GetTick>
 8002fca:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002fcc:	e009      	b.n	8002fe2 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002fce:	f7fe fe09 	bl	8001be4 <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e007      	b.n	8002ff2 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	f003 0320 	and.w	r3, r3, #32
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d0ee      	beq.n	8002fce <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3710      	adds	r7, #16
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}

08002ffa <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002ffa:	b580      	push	{r7, lr}
 8002ffc:	b084      	sub	sp, #16
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003002:	2300      	movs	r3, #0
 8003004:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003010:	2b00      	cmp	r3, #0
 8003012:	d119      	bne.n	8003048 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f04f 32ff 	mov.w	r2, #4294967295
 800301c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800301e:	f7fe fde1 	bl	8001be4 <HAL_GetTick>
 8003022:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003024:	e009      	b.n	800303a <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003026:	f7fe fddd 	bl	8001be4 <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003034:	d901      	bls.n	800303a <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e007      	b.n	800304a <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003044:	2b00      	cmp	r3, #0
 8003046:	d0ee      	beq.n	8003026 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3710      	adds	r7, #16
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}

08003052 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003052:	b480      	push	{r7}
 8003054:	b085      	sub	sp, #20
 8003056:	af00      	add	r7, sp, #0
 8003058:	4603      	mov	r3, r0
 800305a:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800305c:	2300      	movs	r3, #0
 800305e:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8003060:	e005      	b.n	800306e <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	3301      	adds	r3, #1
 8003066:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8003068:	79fb      	ldrb	r3, [r7, #7]
 800306a:	3b0a      	subs	r3, #10
 800306c:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800306e:	79fb      	ldrb	r3, [r7, #7]
 8003070:	2b09      	cmp	r3, #9
 8003072:	d8f6      	bhi.n	8003062 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	b2db      	uxtb	r3, r3
 8003078:	011b      	lsls	r3, r3, #4
 800307a:	b2da      	uxtb	r2, r3
 800307c:	79fb      	ldrb	r3, [r7, #7]
 800307e:	4313      	orrs	r3, r2
 8003080:	b2db      	uxtb	r3, r3
}
 8003082:	4618      	mov	r0, r3
 8003084:	3714      	adds	r7, #20
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr

0800308e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b082      	sub	sp, #8
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d101      	bne.n	80030a0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e07b      	b.n	8003198 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d108      	bne.n	80030ba <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030b0:	d009      	beq.n	80030c6 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	61da      	str	r2, [r3, #28]
 80030b8:	e005      	b.n	80030c6 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d106      	bne.n	80030e6 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f7fe fb83 	bl	80017ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2202      	movs	r2, #2
 80030ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030fc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800310e:	431a      	orrs	r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003118:	431a      	orrs	r2, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	431a      	orrs	r2, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	695b      	ldr	r3, [r3, #20]
 8003128:	f003 0301 	and.w	r3, r3, #1
 800312c:	431a      	orrs	r2, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003136:	431a      	orrs	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	69db      	ldr	r3, [r3, #28]
 800313c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003140:	431a      	orrs	r2, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a1b      	ldr	r3, [r3, #32]
 8003146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800314a:	ea42 0103 	orr.w	r1, r2, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003152:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	430a      	orrs	r2, r1
 800315c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	0c1b      	lsrs	r3, r3, #16
 8003164:	f003 0104 	and.w	r1, r3, #4
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316c:	f003 0210 	and.w	r2, r3, #16
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	430a      	orrs	r2, r1
 8003176:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	69da      	ldr	r2, [r3, #28]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003186:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2201      	movs	r2, #1
 8003192:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003196:	2300      	movs	r3, #0
}
 8003198:	4618      	mov	r0, r3
 800319a:	3708      	adds	r7, #8
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}

080031a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d101      	bne.n	80031b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e041      	b.n	8003236 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d106      	bne.n	80031cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f7fe fb58 	bl	800187c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2202      	movs	r2, #2
 80031d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	3304      	adds	r3, #4
 80031dc:	4619      	mov	r1, r3
 80031de:	4610      	mov	r0, r2
 80031e0:	f000 f82e 	bl	8003240 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3708      	adds	r7, #8
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
	...

08003240 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003240:	b480      	push	{r7}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4a40      	ldr	r2, [pc, #256]	; (8003354 <TIM_Base_SetConfig+0x114>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d013      	beq.n	8003280 <TIM_Base_SetConfig+0x40>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800325e:	d00f      	beq.n	8003280 <TIM_Base_SetConfig+0x40>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a3d      	ldr	r2, [pc, #244]	; (8003358 <TIM_Base_SetConfig+0x118>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d00b      	beq.n	8003280 <TIM_Base_SetConfig+0x40>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a3c      	ldr	r2, [pc, #240]	; (800335c <TIM_Base_SetConfig+0x11c>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d007      	beq.n	8003280 <TIM_Base_SetConfig+0x40>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a3b      	ldr	r2, [pc, #236]	; (8003360 <TIM_Base_SetConfig+0x120>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d003      	beq.n	8003280 <TIM_Base_SetConfig+0x40>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a3a      	ldr	r2, [pc, #232]	; (8003364 <TIM_Base_SetConfig+0x124>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d108      	bne.n	8003292 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003286:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	68fa      	ldr	r2, [r7, #12]
 800328e:	4313      	orrs	r3, r2
 8003290:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a2f      	ldr	r2, [pc, #188]	; (8003354 <TIM_Base_SetConfig+0x114>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d02b      	beq.n	80032f2 <TIM_Base_SetConfig+0xb2>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032a0:	d027      	beq.n	80032f2 <TIM_Base_SetConfig+0xb2>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a2c      	ldr	r2, [pc, #176]	; (8003358 <TIM_Base_SetConfig+0x118>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d023      	beq.n	80032f2 <TIM_Base_SetConfig+0xb2>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a2b      	ldr	r2, [pc, #172]	; (800335c <TIM_Base_SetConfig+0x11c>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d01f      	beq.n	80032f2 <TIM_Base_SetConfig+0xb2>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a2a      	ldr	r2, [pc, #168]	; (8003360 <TIM_Base_SetConfig+0x120>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d01b      	beq.n	80032f2 <TIM_Base_SetConfig+0xb2>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a29      	ldr	r2, [pc, #164]	; (8003364 <TIM_Base_SetConfig+0x124>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d017      	beq.n	80032f2 <TIM_Base_SetConfig+0xb2>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a28      	ldr	r2, [pc, #160]	; (8003368 <TIM_Base_SetConfig+0x128>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d013      	beq.n	80032f2 <TIM_Base_SetConfig+0xb2>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a27      	ldr	r2, [pc, #156]	; (800336c <TIM_Base_SetConfig+0x12c>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d00f      	beq.n	80032f2 <TIM_Base_SetConfig+0xb2>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a26      	ldr	r2, [pc, #152]	; (8003370 <TIM_Base_SetConfig+0x130>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d00b      	beq.n	80032f2 <TIM_Base_SetConfig+0xb2>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a25      	ldr	r2, [pc, #148]	; (8003374 <TIM_Base_SetConfig+0x134>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d007      	beq.n	80032f2 <TIM_Base_SetConfig+0xb2>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a24      	ldr	r2, [pc, #144]	; (8003378 <TIM_Base_SetConfig+0x138>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d003      	beq.n	80032f2 <TIM_Base_SetConfig+0xb2>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a23      	ldr	r2, [pc, #140]	; (800337c <TIM_Base_SetConfig+0x13c>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d108      	bne.n	8003304 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	68fa      	ldr	r2, [r7, #12]
 8003300:	4313      	orrs	r3, r2
 8003302:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	4313      	orrs	r3, r2
 8003310:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	68fa      	ldr	r2, [r7, #12]
 8003316:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	689a      	ldr	r2, [r3, #8]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a0a      	ldr	r2, [pc, #40]	; (8003354 <TIM_Base_SetConfig+0x114>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d003      	beq.n	8003338 <TIM_Base_SetConfig+0xf8>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a0c      	ldr	r2, [pc, #48]	; (8003364 <TIM_Base_SetConfig+0x124>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d103      	bne.n	8003340 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	691a      	ldr	r2, [r3, #16]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	615a      	str	r2, [r3, #20]
}
 8003346:	bf00      	nop
 8003348:	3714      	adds	r7, #20
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	40010000 	.word	0x40010000
 8003358:	40000400 	.word	0x40000400
 800335c:	40000800 	.word	0x40000800
 8003360:	40000c00 	.word	0x40000c00
 8003364:	40010400 	.word	0x40010400
 8003368:	40014000 	.word	0x40014000
 800336c:	40014400 	.word	0x40014400
 8003370:	40014800 	.word	0x40014800
 8003374:	40001800 	.word	0x40001800
 8003378:	40001c00 	.word	0x40001c00
 800337c:	40002000 	.word	0x40002000

08003380 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003380:	b480      	push	{r7}
 8003382:	b085      	sub	sp, #20
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003390:	2b01      	cmp	r3, #1
 8003392:	d101      	bne.n	8003398 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003394:	2302      	movs	r3, #2
 8003396:	e05a      	b.n	800344e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2202      	movs	r2, #2
 80033a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68fa      	ldr	r2, [r7, #12]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a21      	ldr	r2, [pc, #132]	; (800345c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d022      	beq.n	8003422 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033e4:	d01d      	beq.n	8003422 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a1d      	ldr	r2, [pc, #116]	; (8003460 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d018      	beq.n	8003422 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a1b      	ldr	r2, [pc, #108]	; (8003464 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d013      	beq.n	8003422 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a1a      	ldr	r2, [pc, #104]	; (8003468 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d00e      	beq.n	8003422 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a18      	ldr	r2, [pc, #96]	; (800346c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d009      	beq.n	8003422 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a17      	ldr	r2, [pc, #92]	; (8003470 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d004      	beq.n	8003422 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a15      	ldr	r2, [pc, #84]	; (8003474 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d10c      	bne.n	800343c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003428:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	68ba      	ldr	r2, [r7, #8]
 8003430:	4313      	orrs	r3, r2
 8003432:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	68ba      	ldr	r2, [r7, #8]
 800343a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3714      	adds	r7, #20
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	40010000 	.word	0x40010000
 8003460:	40000400 	.word	0x40000400
 8003464:	40000800 	.word	0x40000800
 8003468:	40000c00 	.word	0x40000c00
 800346c:	40010400 	.word	0x40010400
 8003470:	40014000 	.word	0x40014000
 8003474:	40001800 	.word	0x40001800

08003478 <__errno>:
 8003478:	4b01      	ldr	r3, [pc, #4]	; (8003480 <__errno+0x8>)
 800347a:	6818      	ldr	r0, [r3, #0]
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	20000014 	.word	0x20000014

08003484 <__libc_init_array>:
 8003484:	b570      	push	{r4, r5, r6, lr}
 8003486:	4d0d      	ldr	r5, [pc, #52]	; (80034bc <__libc_init_array+0x38>)
 8003488:	4c0d      	ldr	r4, [pc, #52]	; (80034c0 <__libc_init_array+0x3c>)
 800348a:	1b64      	subs	r4, r4, r5
 800348c:	10a4      	asrs	r4, r4, #2
 800348e:	2600      	movs	r6, #0
 8003490:	42a6      	cmp	r6, r4
 8003492:	d109      	bne.n	80034a8 <__libc_init_array+0x24>
 8003494:	4d0b      	ldr	r5, [pc, #44]	; (80034c4 <__libc_init_array+0x40>)
 8003496:	4c0c      	ldr	r4, [pc, #48]	; (80034c8 <__libc_init_array+0x44>)
 8003498:	f004 fc46 	bl	8007d28 <_init>
 800349c:	1b64      	subs	r4, r4, r5
 800349e:	10a4      	asrs	r4, r4, #2
 80034a0:	2600      	movs	r6, #0
 80034a2:	42a6      	cmp	r6, r4
 80034a4:	d105      	bne.n	80034b2 <__libc_init_array+0x2e>
 80034a6:	bd70      	pop	{r4, r5, r6, pc}
 80034a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80034ac:	4798      	blx	r3
 80034ae:	3601      	adds	r6, #1
 80034b0:	e7ee      	b.n	8003490 <__libc_init_array+0xc>
 80034b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80034b6:	4798      	blx	r3
 80034b8:	3601      	adds	r6, #1
 80034ba:	e7f2      	b.n	80034a2 <__libc_init_array+0x1e>
 80034bc:	0800955c 	.word	0x0800955c
 80034c0:	0800955c 	.word	0x0800955c
 80034c4:	0800955c 	.word	0x0800955c
 80034c8:	08009560 	.word	0x08009560

080034cc <memset>:
 80034cc:	4402      	add	r2, r0
 80034ce:	4603      	mov	r3, r0
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d100      	bne.n	80034d6 <memset+0xa>
 80034d4:	4770      	bx	lr
 80034d6:	f803 1b01 	strb.w	r1, [r3], #1
 80034da:	e7f9      	b.n	80034d0 <memset+0x4>

080034dc <__cvt>:
 80034dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80034e0:	ec55 4b10 	vmov	r4, r5, d0
 80034e4:	2d00      	cmp	r5, #0
 80034e6:	460e      	mov	r6, r1
 80034e8:	4619      	mov	r1, r3
 80034ea:	462b      	mov	r3, r5
 80034ec:	bfbb      	ittet	lt
 80034ee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80034f2:	461d      	movlt	r5, r3
 80034f4:	2300      	movge	r3, #0
 80034f6:	232d      	movlt	r3, #45	; 0x2d
 80034f8:	700b      	strb	r3, [r1, #0]
 80034fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80034fc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003500:	4691      	mov	r9, r2
 8003502:	f023 0820 	bic.w	r8, r3, #32
 8003506:	bfbc      	itt	lt
 8003508:	4622      	movlt	r2, r4
 800350a:	4614      	movlt	r4, r2
 800350c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003510:	d005      	beq.n	800351e <__cvt+0x42>
 8003512:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003516:	d100      	bne.n	800351a <__cvt+0x3e>
 8003518:	3601      	adds	r6, #1
 800351a:	2102      	movs	r1, #2
 800351c:	e000      	b.n	8003520 <__cvt+0x44>
 800351e:	2103      	movs	r1, #3
 8003520:	ab03      	add	r3, sp, #12
 8003522:	9301      	str	r3, [sp, #4]
 8003524:	ab02      	add	r3, sp, #8
 8003526:	9300      	str	r3, [sp, #0]
 8003528:	ec45 4b10 	vmov	d0, r4, r5
 800352c:	4653      	mov	r3, sl
 800352e:	4632      	mov	r2, r6
 8003530:	f001 fdb6 	bl	80050a0 <_dtoa_r>
 8003534:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003538:	4607      	mov	r7, r0
 800353a:	d102      	bne.n	8003542 <__cvt+0x66>
 800353c:	f019 0f01 	tst.w	r9, #1
 8003540:	d022      	beq.n	8003588 <__cvt+0xac>
 8003542:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003546:	eb07 0906 	add.w	r9, r7, r6
 800354a:	d110      	bne.n	800356e <__cvt+0x92>
 800354c:	783b      	ldrb	r3, [r7, #0]
 800354e:	2b30      	cmp	r3, #48	; 0x30
 8003550:	d10a      	bne.n	8003568 <__cvt+0x8c>
 8003552:	2200      	movs	r2, #0
 8003554:	2300      	movs	r3, #0
 8003556:	4620      	mov	r0, r4
 8003558:	4629      	mov	r1, r5
 800355a:	f7fd fab5 	bl	8000ac8 <__aeabi_dcmpeq>
 800355e:	b918      	cbnz	r0, 8003568 <__cvt+0x8c>
 8003560:	f1c6 0601 	rsb	r6, r6, #1
 8003564:	f8ca 6000 	str.w	r6, [sl]
 8003568:	f8da 3000 	ldr.w	r3, [sl]
 800356c:	4499      	add	r9, r3
 800356e:	2200      	movs	r2, #0
 8003570:	2300      	movs	r3, #0
 8003572:	4620      	mov	r0, r4
 8003574:	4629      	mov	r1, r5
 8003576:	f7fd faa7 	bl	8000ac8 <__aeabi_dcmpeq>
 800357a:	b108      	cbz	r0, 8003580 <__cvt+0xa4>
 800357c:	f8cd 900c 	str.w	r9, [sp, #12]
 8003580:	2230      	movs	r2, #48	; 0x30
 8003582:	9b03      	ldr	r3, [sp, #12]
 8003584:	454b      	cmp	r3, r9
 8003586:	d307      	bcc.n	8003598 <__cvt+0xbc>
 8003588:	9b03      	ldr	r3, [sp, #12]
 800358a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800358c:	1bdb      	subs	r3, r3, r7
 800358e:	4638      	mov	r0, r7
 8003590:	6013      	str	r3, [r2, #0]
 8003592:	b004      	add	sp, #16
 8003594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003598:	1c59      	adds	r1, r3, #1
 800359a:	9103      	str	r1, [sp, #12]
 800359c:	701a      	strb	r2, [r3, #0]
 800359e:	e7f0      	b.n	8003582 <__cvt+0xa6>

080035a0 <__exponent>:
 80035a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80035a2:	4603      	mov	r3, r0
 80035a4:	2900      	cmp	r1, #0
 80035a6:	bfb8      	it	lt
 80035a8:	4249      	neglt	r1, r1
 80035aa:	f803 2b02 	strb.w	r2, [r3], #2
 80035ae:	bfb4      	ite	lt
 80035b0:	222d      	movlt	r2, #45	; 0x2d
 80035b2:	222b      	movge	r2, #43	; 0x2b
 80035b4:	2909      	cmp	r1, #9
 80035b6:	7042      	strb	r2, [r0, #1]
 80035b8:	dd2a      	ble.n	8003610 <__exponent+0x70>
 80035ba:	f10d 0407 	add.w	r4, sp, #7
 80035be:	46a4      	mov	ip, r4
 80035c0:	270a      	movs	r7, #10
 80035c2:	46a6      	mov	lr, r4
 80035c4:	460a      	mov	r2, r1
 80035c6:	fb91 f6f7 	sdiv	r6, r1, r7
 80035ca:	fb07 1516 	mls	r5, r7, r6, r1
 80035ce:	3530      	adds	r5, #48	; 0x30
 80035d0:	2a63      	cmp	r2, #99	; 0x63
 80035d2:	f104 34ff 	add.w	r4, r4, #4294967295
 80035d6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80035da:	4631      	mov	r1, r6
 80035dc:	dcf1      	bgt.n	80035c2 <__exponent+0x22>
 80035de:	3130      	adds	r1, #48	; 0x30
 80035e0:	f1ae 0502 	sub.w	r5, lr, #2
 80035e4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80035e8:	1c44      	adds	r4, r0, #1
 80035ea:	4629      	mov	r1, r5
 80035ec:	4561      	cmp	r1, ip
 80035ee:	d30a      	bcc.n	8003606 <__exponent+0x66>
 80035f0:	f10d 0209 	add.w	r2, sp, #9
 80035f4:	eba2 020e 	sub.w	r2, r2, lr
 80035f8:	4565      	cmp	r5, ip
 80035fa:	bf88      	it	hi
 80035fc:	2200      	movhi	r2, #0
 80035fe:	4413      	add	r3, r2
 8003600:	1a18      	subs	r0, r3, r0
 8003602:	b003      	add	sp, #12
 8003604:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003606:	f811 2b01 	ldrb.w	r2, [r1], #1
 800360a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800360e:	e7ed      	b.n	80035ec <__exponent+0x4c>
 8003610:	2330      	movs	r3, #48	; 0x30
 8003612:	3130      	adds	r1, #48	; 0x30
 8003614:	7083      	strb	r3, [r0, #2]
 8003616:	70c1      	strb	r1, [r0, #3]
 8003618:	1d03      	adds	r3, r0, #4
 800361a:	e7f1      	b.n	8003600 <__exponent+0x60>

0800361c <_printf_float>:
 800361c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003620:	ed2d 8b02 	vpush	{d8}
 8003624:	b08d      	sub	sp, #52	; 0x34
 8003626:	460c      	mov	r4, r1
 8003628:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800362c:	4616      	mov	r6, r2
 800362e:	461f      	mov	r7, r3
 8003630:	4605      	mov	r5, r0
 8003632:	f002 fe91 	bl	8006358 <_localeconv_r>
 8003636:	f8d0 a000 	ldr.w	sl, [r0]
 800363a:	4650      	mov	r0, sl
 800363c:	f7fc fdc8 	bl	80001d0 <strlen>
 8003640:	2300      	movs	r3, #0
 8003642:	930a      	str	r3, [sp, #40]	; 0x28
 8003644:	6823      	ldr	r3, [r4, #0]
 8003646:	9305      	str	r3, [sp, #20]
 8003648:	f8d8 3000 	ldr.w	r3, [r8]
 800364c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003650:	3307      	adds	r3, #7
 8003652:	f023 0307 	bic.w	r3, r3, #7
 8003656:	f103 0208 	add.w	r2, r3, #8
 800365a:	f8c8 2000 	str.w	r2, [r8]
 800365e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003662:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003666:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800366a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800366e:	9307      	str	r3, [sp, #28]
 8003670:	f8cd 8018 	str.w	r8, [sp, #24]
 8003674:	ee08 0a10 	vmov	s16, r0
 8003678:	4b9f      	ldr	r3, [pc, #636]	; (80038f8 <_printf_float+0x2dc>)
 800367a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800367e:	f04f 32ff 	mov.w	r2, #4294967295
 8003682:	f7fd fa53 	bl	8000b2c <__aeabi_dcmpun>
 8003686:	bb88      	cbnz	r0, 80036ec <_printf_float+0xd0>
 8003688:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800368c:	4b9a      	ldr	r3, [pc, #616]	; (80038f8 <_printf_float+0x2dc>)
 800368e:	f04f 32ff 	mov.w	r2, #4294967295
 8003692:	f7fd fa2d 	bl	8000af0 <__aeabi_dcmple>
 8003696:	bb48      	cbnz	r0, 80036ec <_printf_float+0xd0>
 8003698:	2200      	movs	r2, #0
 800369a:	2300      	movs	r3, #0
 800369c:	4640      	mov	r0, r8
 800369e:	4649      	mov	r1, r9
 80036a0:	f7fd fa1c 	bl	8000adc <__aeabi_dcmplt>
 80036a4:	b110      	cbz	r0, 80036ac <_printf_float+0x90>
 80036a6:	232d      	movs	r3, #45	; 0x2d
 80036a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036ac:	4b93      	ldr	r3, [pc, #588]	; (80038fc <_printf_float+0x2e0>)
 80036ae:	4894      	ldr	r0, [pc, #592]	; (8003900 <_printf_float+0x2e4>)
 80036b0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80036b4:	bf94      	ite	ls
 80036b6:	4698      	movls	r8, r3
 80036b8:	4680      	movhi	r8, r0
 80036ba:	2303      	movs	r3, #3
 80036bc:	6123      	str	r3, [r4, #16]
 80036be:	9b05      	ldr	r3, [sp, #20]
 80036c0:	f023 0204 	bic.w	r2, r3, #4
 80036c4:	6022      	str	r2, [r4, #0]
 80036c6:	f04f 0900 	mov.w	r9, #0
 80036ca:	9700      	str	r7, [sp, #0]
 80036cc:	4633      	mov	r3, r6
 80036ce:	aa0b      	add	r2, sp, #44	; 0x2c
 80036d0:	4621      	mov	r1, r4
 80036d2:	4628      	mov	r0, r5
 80036d4:	f000 f9d8 	bl	8003a88 <_printf_common>
 80036d8:	3001      	adds	r0, #1
 80036da:	f040 8090 	bne.w	80037fe <_printf_float+0x1e2>
 80036de:	f04f 30ff 	mov.w	r0, #4294967295
 80036e2:	b00d      	add	sp, #52	; 0x34
 80036e4:	ecbd 8b02 	vpop	{d8}
 80036e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036ec:	4642      	mov	r2, r8
 80036ee:	464b      	mov	r3, r9
 80036f0:	4640      	mov	r0, r8
 80036f2:	4649      	mov	r1, r9
 80036f4:	f7fd fa1a 	bl	8000b2c <__aeabi_dcmpun>
 80036f8:	b140      	cbz	r0, 800370c <_printf_float+0xf0>
 80036fa:	464b      	mov	r3, r9
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	bfbc      	itt	lt
 8003700:	232d      	movlt	r3, #45	; 0x2d
 8003702:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003706:	487f      	ldr	r0, [pc, #508]	; (8003904 <_printf_float+0x2e8>)
 8003708:	4b7f      	ldr	r3, [pc, #508]	; (8003908 <_printf_float+0x2ec>)
 800370a:	e7d1      	b.n	80036b0 <_printf_float+0x94>
 800370c:	6863      	ldr	r3, [r4, #4]
 800370e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003712:	9206      	str	r2, [sp, #24]
 8003714:	1c5a      	adds	r2, r3, #1
 8003716:	d13f      	bne.n	8003798 <_printf_float+0x17c>
 8003718:	2306      	movs	r3, #6
 800371a:	6063      	str	r3, [r4, #4]
 800371c:	9b05      	ldr	r3, [sp, #20]
 800371e:	6861      	ldr	r1, [r4, #4]
 8003720:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003724:	2300      	movs	r3, #0
 8003726:	9303      	str	r3, [sp, #12]
 8003728:	ab0a      	add	r3, sp, #40	; 0x28
 800372a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800372e:	ab09      	add	r3, sp, #36	; 0x24
 8003730:	ec49 8b10 	vmov	d0, r8, r9
 8003734:	9300      	str	r3, [sp, #0]
 8003736:	6022      	str	r2, [r4, #0]
 8003738:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800373c:	4628      	mov	r0, r5
 800373e:	f7ff fecd 	bl	80034dc <__cvt>
 8003742:	9b06      	ldr	r3, [sp, #24]
 8003744:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003746:	2b47      	cmp	r3, #71	; 0x47
 8003748:	4680      	mov	r8, r0
 800374a:	d108      	bne.n	800375e <_printf_float+0x142>
 800374c:	1cc8      	adds	r0, r1, #3
 800374e:	db02      	blt.n	8003756 <_printf_float+0x13a>
 8003750:	6863      	ldr	r3, [r4, #4]
 8003752:	4299      	cmp	r1, r3
 8003754:	dd41      	ble.n	80037da <_printf_float+0x1be>
 8003756:	f1ab 0b02 	sub.w	fp, fp, #2
 800375a:	fa5f fb8b 	uxtb.w	fp, fp
 800375e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003762:	d820      	bhi.n	80037a6 <_printf_float+0x18a>
 8003764:	3901      	subs	r1, #1
 8003766:	465a      	mov	r2, fp
 8003768:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800376c:	9109      	str	r1, [sp, #36]	; 0x24
 800376e:	f7ff ff17 	bl	80035a0 <__exponent>
 8003772:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003774:	1813      	adds	r3, r2, r0
 8003776:	2a01      	cmp	r2, #1
 8003778:	4681      	mov	r9, r0
 800377a:	6123      	str	r3, [r4, #16]
 800377c:	dc02      	bgt.n	8003784 <_printf_float+0x168>
 800377e:	6822      	ldr	r2, [r4, #0]
 8003780:	07d2      	lsls	r2, r2, #31
 8003782:	d501      	bpl.n	8003788 <_printf_float+0x16c>
 8003784:	3301      	adds	r3, #1
 8003786:	6123      	str	r3, [r4, #16]
 8003788:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800378c:	2b00      	cmp	r3, #0
 800378e:	d09c      	beq.n	80036ca <_printf_float+0xae>
 8003790:	232d      	movs	r3, #45	; 0x2d
 8003792:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003796:	e798      	b.n	80036ca <_printf_float+0xae>
 8003798:	9a06      	ldr	r2, [sp, #24]
 800379a:	2a47      	cmp	r2, #71	; 0x47
 800379c:	d1be      	bne.n	800371c <_printf_float+0x100>
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d1bc      	bne.n	800371c <_printf_float+0x100>
 80037a2:	2301      	movs	r3, #1
 80037a4:	e7b9      	b.n	800371a <_printf_float+0xfe>
 80037a6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80037aa:	d118      	bne.n	80037de <_printf_float+0x1c2>
 80037ac:	2900      	cmp	r1, #0
 80037ae:	6863      	ldr	r3, [r4, #4]
 80037b0:	dd0b      	ble.n	80037ca <_printf_float+0x1ae>
 80037b2:	6121      	str	r1, [r4, #16]
 80037b4:	b913      	cbnz	r3, 80037bc <_printf_float+0x1a0>
 80037b6:	6822      	ldr	r2, [r4, #0]
 80037b8:	07d0      	lsls	r0, r2, #31
 80037ba:	d502      	bpl.n	80037c2 <_printf_float+0x1a6>
 80037bc:	3301      	adds	r3, #1
 80037be:	440b      	add	r3, r1
 80037c0:	6123      	str	r3, [r4, #16]
 80037c2:	65a1      	str	r1, [r4, #88]	; 0x58
 80037c4:	f04f 0900 	mov.w	r9, #0
 80037c8:	e7de      	b.n	8003788 <_printf_float+0x16c>
 80037ca:	b913      	cbnz	r3, 80037d2 <_printf_float+0x1b6>
 80037cc:	6822      	ldr	r2, [r4, #0]
 80037ce:	07d2      	lsls	r2, r2, #31
 80037d0:	d501      	bpl.n	80037d6 <_printf_float+0x1ba>
 80037d2:	3302      	adds	r3, #2
 80037d4:	e7f4      	b.n	80037c0 <_printf_float+0x1a4>
 80037d6:	2301      	movs	r3, #1
 80037d8:	e7f2      	b.n	80037c0 <_printf_float+0x1a4>
 80037da:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80037de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80037e0:	4299      	cmp	r1, r3
 80037e2:	db05      	blt.n	80037f0 <_printf_float+0x1d4>
 80037e4:	6823      	ldr	r3, [r4, #0]
 80037e6:	6121      	str	r1, [r4, #16]
 80037e8:	07d8      	lsls	r0, r3, #31
 80037ea:	d5ea      	bpl.n	80037c2 <_printf_float+0x1a6>
 80037ec:	1c4b      	adds	r3, r1, #1
 80037ee:	e7e7      	b.n	80037c0 <_printf_float+0x1a4>
 80037f0:	2900      	cmp	r1, #0
 80037f2:	bfd4      	ite	le
 80037f4:	f1c1 0202 	rsble	r2, r1, #2
 80037f8:	2201      	movgt	r2, #1
 80037fa:	4413      	add	r3, r2
 80037fc:	e7e0      	b.n	80037c0 <_printf_float+0x1a4>
 80037fe:	6823      	ldr	r3, [r4, #0]
 8003800:	055a      	lsls	r2, r3, #21
 8003802:	d407      	bmi.n	8003814 <_printf_float+0x1f8>
 8003804:	6923      	ldr	r3, [r4, #16]
 8003806:	4642      	mov	r2, r8
 8003808:	4631      	mov	r1, r6
 800380a:	4628      	mov	r0, r5
 800380c:	47b8      	blx	r7
 800380e:	3001      	adds	r0, #1
 8003810:	d12c      	bne.n	800386c <_printf_float+0x250>
 8003812:	e764      	b.n	80036de <_printf_float+0xc2>
 8003814:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003818:	f240 80e0 	bls.w	80039dc <_printf_float+0x3c0>
 800381c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003820:	2200      	movs	r2, #0
 8003822:	2300      	movs	r3, #0
 8003824:	f7fd f950 	bl	8000ac8 <__aeabi_dcmpeq>
 8003828:	2800      	cmp	r0, #0
 800382a:	d034      	beq.n	8003896 <_printf_float+0x27a>
 800382c:	4a37      	ldr	r2, [pc, #220]	; (800390c <_printf_float+0x2f0>)
 800382e:	2301      	movs	r3, #1
 8003830:	4631      	mov	r1, r6
 8003832:	4628      	mov	r0, r5
 8003834:	47b8      	blx	r7
 8003836:	3001      	adds	r0, #1
 8003838:	f43f af51 	beq.w	80036de <_printf_float+0xc2>
 800383c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003840:	429a      	cmp	r2, r3
 8003842:	db02      	blt.n	800384a <_printf_float+0x22e>
 8003844:	6823      	ldr	r3, [r4, #0]
 8003846:	07d8      	lsls	r0, r3, #31
 8003848:	d510      	bpl.n	800386c <_printf_float+0x250>
 800384a:	ee18 3a10 	vmov	r3, s16
 800384e:	4652      	mov	r2, sl
 8003850:	4631      	mov	r1, r6
 8003852:	4628      	mov	r0, r5
 8003854:	47b8      	blx	r7
 8003856:	3001      	adds	r0, #1
 8003858:	f43f af41 	beq.w	80036de <_printf_float+0xc2>
 800385c:	f04f 0800 	mov.w	r8, #0
 8003860:	f104 091a 	add.w	r9, r4, #26
 8003864:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003866:	3b01      	subs	r3, #1
 8003868:	4543      	cmp	r3, r8
 800386a:	dc09      	bgt.n	8003880 <_printf_float+0x264>
 800386c:	6823      	ldr	r3, [r4, #0]
 800386e:	079b      	lsls	r3, r3, #30
 8003870:	f100 8105 	bmi.w	8003a7e <_printf_float+0x462>
 8003874:	68e0      	ldr	r0, [r4, #12]
 8003876:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003878:	4298      	cmp	r0, r3
 800387a:	bfb8      	it	lt
 800387c:	4618      	movlt	r0, r3
 800387e:	e730      	b.n	80036e2 <_printf_float+0xc6>
 8003880:	2301      	movs	r3, #1
 8003882:	464a      	mov	r2, r9
 8003884:	4631      	mov	r1, r6
 8003886:	4628      	mov	r0, r5
 8003888:	47b8      	blx	r7
 800388a:	3001      	adds	r0, #1
 800388c:	f43f af27 	beq.w	80036de <_printf_float+0xc2>
 8003890:	f108 0801 	add.w	r8, r8, #1
 8003894:	e7e6      	b.n	8003864 <_printf_float+0x248>
 8003896:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003898:	2b00      	cmp	r3, #0
 800389a:	dc39      	bgt.n	8003910 <_printf_float+0x2f4>
 800389c:	4a1b      	ldr	r2, [pc, #108]	; (800390c <_printf_float+0x2f0>)
 800389e:	2301      	movs	r3, #1
 80038a0:	4631      	mov	r1, r6
 80038a2:	4628      	mov	r0, r5
 80038a4:	47b8      	blx	r7
 80038a6:	3001      	adds	r0, #1
 80038a8:	f43f af19 	beq.w	80036de <_printf_float+0xc2>
 80038ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80038b0:	4313      	orrs	r3, r2
 80038b2:	d102      	bne.n	80038ba <_printf_float+0x29e>
 80038b4:	6823      	ldr	r3, [r4, #0]
 80038b6:	07d9      	lsls	r1, r3, #31
 80038b8:	d5d8      	bpl.n	800386c <_printf_float+0x250>
 80038ba:	ee18 3a10 	vmov	r3, s16
 80038be:	4652      	mov	r2, sl
 80038c0:	4631      	mov	r1, r6
 80038c2:	4628      	mov	r0, r5
 80038c4:	47b8      	blx	r7
 80038c6:	3001      	adds	r0, #1
 80038c8:	f43f af09 	beq.w	80036de <_printf_float+0xc2>
 80038cc:	f04f 0900 	mov.w	r9, #0
 80038d0:	f104 0a1a 	add.w	sl, r4, #26
 80038d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038d6:	425b      	negs	r3, r3
 80038d8:	454b      	cmp	r3, r9
 80038da:	dc01      	bgt.n	80038e0 <_printf_float+0x2c4>
 80038dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80038de:	e792      	b.n	8003806 <_printf_float+0x1ea>
 80038e0:	2301      	movs	r3, #1
 80038e2:	4652      	mov	r2, sl
 80038e4:	4631      	mov	r1, r6
 80038e6:	4628      	mov	r0, r5
 80038e8:	47b8      	blx	r7
 80038ea:	3001      	adds	r0, #1
 80038ec:	f43f aef7 	beq.w	80036de <_printf_float+0xc2>
 80038f0:	f109 0901 	add.w	r9, r9, #1
 80038f4:	e7ee      	b.n	80038d4 <_printf_float+0x2b8>
 80038f6:	bf00      	nop
 80038f8:	7fefffff 	.word	0x7fefffff
 80038fc:	080090a0 	.word	0x080090a0
 8003900:	080090a4 	.word	0x080090a4
 8003904:	080090ac 	.word	0x080090ac
 8003908:	080090a8 	.word	0x080090a8
 800390c:	080090b0 	.word	0x080090b0
 8003910:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003912:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003914:	429a      	cmp	r2, r3
 8003916:	bfa8      	it	ge
 8003918:	461a      	movge	r2, r3
 800391a:	2a00      	cmp	r2, #0
 800391c:	4691      	mov	r9, r2
 800391e:	dc37      	bgt.n	8003990 <_printf_float+0x374>
 8003920:	f04f 0b00 	mov.w	fp, #0
 8003924:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003928:	f104 021a 	add.w	r2, r4, #26
 800392c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800392e:	9305      	str	r3, [sp, #20]
 8003930:	eba3 0309 	sub.w	r3, r3, r9
 8003934:	455b      	cmp	r3, fp
 8003936:	dc33      	bgt.n	80039a0 <_printf_float+0x384>
 8003938:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800393c:	429a      	cmp	r2, r3
 800393e:	db3b      	blt.n	80039b8 <_printf_float+0x39c>
 8003940:	6823      	ldr	r3, [r4, #0]
 8003942:	07da      	lsls	r2, r3, #31
 8003944:	d438      	bmi.n	80039b8 <_printf_float+0x39c>
 8003946:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003948:	9b05      	ldr	r3, [sp, #20]
 800394a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	eba2 0901 	sub.w	r9, r2, r1
 8003952:	4599      	cmp	r9, r3
 8003954:	bfa8      	it	ge
 8003956:	4699      	movge	r9, r3
 8003958:	f1b9 0f00 	cmp.w	r9, #0
 800395c:	dc35      	bgt.n	80039ca <_printf_float+0x3ae>
 800395e:	f04f 0800 	mov.w	r8, #0
 8003962:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003966:	f104 0a1a 	add.w	sl, r4, #26
 800396a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800396e:	1a9b      	subs	r3, r3, r2
 8003970:	eba3 0309 	sub.w	r3, r3, r9
 8003974:	4543      	cmp	r3, r8
 8003976:	f77f af79 	ble.w	800386c <_printf_float+0x250>
 800397a:	2301      	movs	r3, #1
 800397c:	4652      	mov	r2, sl
 800397e:	4631      	mov	r1, r6
 8003980:	4628      	mov	r0, r5
 8003982:	47b8      	blx	r7
 8003984:	3001      	adds	r0, #1
 8003986:	f43f aeaa 	beq.w	80036de <_printf_float+0xc2>
 800398a:	f108 0801 	add.w	r8, r8, #1
 800398e:	e7ec      	b.n	800396a <_printf_float+0x34e>
 8003990:	4613      	mov	r3, r2
 8003992:	4631      	mov	r1, r6
 8003994:	4642      	mov	r2, r8
 8003996:	4628      	mov	r0, r5
 8003998:	47b8      	blx	r7
 800399a:	3001      	adds	r0, #1
 800399c:	d1c0      	bne.n	8003920 <_printf_float+0x304>
 800399e:	e69e      	b.n	80036de <_printf_float+0xc2>
 80039a0:	2301      	movs	r3, #1
 80039a2:	4631      	mov	r1, r6
 80039a4:	4628      	mov	r0, r5
 80039a6:	9205      	str	r2, [sp, #20]
 80039a8:	47b8      	blx	r7
 80039aa:	3001      	adds	r0, #1
 80039ac:	f43f ae97 	beq.w	80036de <_printf_float+0xc2>
 80039b0:	9a05      	ldr	r2, [sp, #20]
 80039b2:	f10b 0b01 	add.w	fp, fp, #1
 80039b6:	e7b9      	b.n	800392c <_printf_float+0x310>
 80039b8:	ee18 3a10 	vmov	r3, s16
 80039bc:	4652      	mov	r2, sl
 80039be:	4631      	mov	r1, r6
 80039c0:	4628      	mov	r0, r5
 80039c2:	47b8      	blx	r7
 80039c4:	3001      	adds	r0, #1
 80039c6:	d1be      	bne.n	8003946 <_printf_float+0x32a>
 80039c8:	e689      	b.n	80036de <_printf_float+0xc2>
 80039ca:	9a05      	ldr	r2, [sp, #20]
 80039cc:	464b      	mov	r3, r9
 80039ce:	4442      	add	r2, r8
 80039d0:	4631      	mov	r1, r6
 80039d2:	4628      	mov	r0, r5
 80039d4:	47b8      	blx	r7
 80039d6:	3001      	adds	r0, #1
 80039d8:	d1c1      	bne.n	800395e <_printf_float+0x342>
 80039da:	e680      	b.n	80036de <_printf_float+0xc2>
 80039dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80039de:	2a01      	cmp	r2, #1
 80039e0:	dc01      	bgt.n	80039e6 <_printf_float+0x3ca>
 80039e2:	07db      	lsls	r3, r3, #31
 80039e4:	d538      	bpl.n	8003a58 <_printf_float+0x43c>
 80039e6:	2301      	movs	r3, #1
 80039e8:	4642      	mov	r2, r8
 80039ea:	4631      	mov	r1, r6
 80039ec:	4628      	mov	r0, r5
 80039ee:	47b8      	blx	r7
 80039f0:	3001      	adds	r0, #1
 80039f2:	f43f ae74 	beq.w	80036de <_printf_float+0xc2>
 80039f6:	ee18 3a10 	vmov	r3, s16
 80039fa:	4652      	mov	r2, sl
 80039fc:	4631      	mov	r1, r6
 80039fe:	4628      	mov	r0, r5
 8003a00:	47b8      	blx	r7
 8003a02:	3001      	adds	r0, #1
 8003a04:	f43f ae6b 	beq.w	80036de <_printf_float+0xc2>
 8003a08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	2300      	movs	r3, #0
 8003a10:	f7fd f85a 	bl	8000ac8 <__aeabi_dcmpeq>
 8003a14:	b9d8      	cbnz	r0, 8003a4e <_printf_float+0x432>
 8003a16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003a18:	f108 0201 	add.w	r2, r8, #1
 8003a1c:	3b01      	subs	r3, #1
 8003a1e:	4631      	mov	r1, r6
 8003a20:	4628      	mov	r0, r5
 8003a22:	47b8      	blx	r7
 8003a24:	3001      	adds	r0, #1
 8003a26:	d10e      	bne.n	8003a46 <_printf_float+0x42a>
 8003a28:	e659      	b.n	80036de <_printf_float+0xc2>
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	4652      	mov	r2, sl
 8003a2e:	4631      	mov	r1, r6
 8003a30:	4628      	mov	r0, r5
 8003a32:	47b8      	blx	r7
 8003a34:	3001      	adds	r0, #1
 8003a36:	f43f ae52 	beq.w	80036de <_printf_float+0xc2>
 8003a3a:	f108 0801 	add.w	r8, r8, #1
 8003a3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003a40:	3b01      	subs	r3, #1
 8003a42:	4543      	cmp	r3, r8
 8003a44:	dcf1      	bgt.n	8003a2a <_printf_float+0x40e>
 8003a46:	464b      	mov	r3, r9
 8003a48:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003a4c:	e6dc      	b.n	8003808 <_printf_float+0x1ec>
 8003a4e:	f04f 0800 	mov.w	r8, #0
 8003a52:	f104 0a1a 	add.w	sl, r4, #26
 8003a56:	e7f2      	b.n	8003a3e <_printf_float+0x422>
 8003a58:	2301      	movs	r3, #1
 8003a5a:	4642      	mov	r2, r8
 8003a5c:	e7df      	b.n	8003a1e <_printf_float+0x402>
 8003a5e:	2301      	movs	r3, #1
 8003a60:	464a      	mov	r2, r9
 8003a62:	4631      	mov	r1, r6
 8003a64:	4628      	mov	r0, r5
 8003a66:	47b8      	blx	r7
 8003a68:	3001      	adds	r0, #1
 8003a6a:	f43f ae38 	beq.w	80036de <_printf_float+0xc2>
 8003a6e:	f108 0801 	add.w	r8, r8, #1
 8003a72:	68e3      	ldr	r3, [r4, #12]
 8003a74:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003a76:	1a5b      	subs	r3, r3, r1
 8003a78:	4543      	cmp	r3, r8
 8003a7a:	dcf0      	bgt.n	8003a5e <_printf_float+0x442>
 8003a7c:	e6fa      	b.n	8003874 <_printf_float+0x258>
 8003a7e:	f04f 0800 	mov.w	r8, #0
 8003a82:	f104 0919 	add.w	r9, r4, #25
 8003a86:	e7f4      	b.n	8003a72 <_printf_float+0x456>

08003a88 <_printf_common>:
 8003a88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a8c:	4616      	mov	r6, r2
 8003a8e:	4699      	mov	r9, r3
 8003a90:	688a      	ldr	r2, [r1, #8]
 8003a92:	690b      	ldr	r3, [r1, #16]
 8003a94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	bfb8      	it	lt
 8003a9c:	4613      	movlt	r3, r2
 8003a9e:	6033      	str	r3, [r6, #0]
 8003aa0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003aa4:	4607      	mov	r7, r0
 8003aa6:	460c      	mov	r4, r1
 8003aa8:	b10a      	cbz	r2, 8003aae <_printf_common+0x26>
 8003aaa:	3301      	adds	r3, #1
 8003aac:	6033      	str	r3, [r6, #0]
 8003aae:	6823      	ldr	r3, [r4, #0]
 8003ab0:	0699      	lsls	r1, r3, #26
 8003ab2:	bf42      	ittt	mi
 8003ab4:	6833      	ldrmi	r3, [r6, #0]
 8003ab6:	3302      	addmi	r3, #2
 8003ab8:	6033      	strmi	r3, [r6, #0]
 8003aba:	6825      	ldr	r5, [r4, #0]
 8003abc:	f015 0506 	ands.w	r5, r5, #6
 8003ac0:	d106      	bne.n	8003ad0 <_printf_common+0x48>
 8003ac2:	f104 0a19 	add.w	sl, r4, #25
 8003ac6:	68e3      	ldr	r3, [r4, #12]
 8003ac8:	6832      	ldr	r2, [r6, #0]
 8003aca:	1a9b      	subs	r3, r3, r2
 8003acc:	42ab      	cmp	r3, r5
 8003ace:	dc26      	bgt.n	8003b1e <_printf_common+0x96>
 8003ad0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003ad4:	1e13      	subs	r3, r2, #0
 8003ad6:	6822      	ldr	r2, [r4, #0]
 8003ad8:	bf18      	it	ne
 8003ada:	2301      	movne	r3, #1
 8003adc:	0692      	lsls	r2, r2, #26
 8003ade:	d42b      	bmi.n	8003b38 <_printf_common+0xb0>
 8003ae0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ae4:	4649      	mov	r1, r9
 8003ae6:	4638      	mov	r0, r7
 8003ae8:	47c0      	blx	r8
 8003aea:	3001      	adds	r0, #1
 8003aec:	d01e      	beq.n	8003b2c <_printf_common+0xa4>
 8003aee:	6823      	ldr	r3, [r4, #0]
 8003af0:	68e5      	ldr	r5, [r4, #12]
 8003af2:	6832      	ldr	r2, [r6, #0]
 8003af4:	f003 0306 	and.w	r3, r3, #6
 8003af8:	2b04      	cmp	r3, #4
 8003afa:	bf08      	it	eq
 8003afc:	1aad      	subeq	r5, r5, r2
 8003afe:	68a3      	ldr	r3, [r4, #8]
 8003b00:	6922      	ldr	r2, [r4, #16]
 8003b02:	bf0c      	ite	eq
 8003b04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b08:	2500      	movne	r5, #0
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	bfc4      	itt	gt
 8003b0e:	1a9b      	subgt	r3, r3, r2
 8003b10:	18ed      	addgt	r5, r5, r3
 8003b12:	2600      	movs	r6, #0
 8003b14:	341a      	adds	r4, #26
 8003b16:	42b5      	cmp	r5, r6
 8003b18:	d11a      	bne.n	8003b50 <_printf_common+0xc8>
 8003b1a:	2000      	movs	r0, #0
 8003b1c:	e008      	b.n	8003b30 <_printf_common+0xa8>
 8003b1e:	2301      	movs	r3, #1
 8003b20:	4652      	mov	r2, sl
 8003b22:	4649      	mov	r1, r9
 8003b24:	4638      	mov	r0, r7
 8003b26:	47c0      	blx	r8
 8003b28:	3001      	adds	r0, #1
 8003b2a:	d103      	bne.n	8003b34 <_printf_common+0xac>
 8003b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b34:	3501      	adds	r5, #1
 8003b36:	e7c6      	b.n	8003ac6 <_printf_common+0x3e>
 8003b38:	18e1      	adds	r1, r4, r3
 8003b3a:	1c5a      	adds	r2, r3, #1
 8003b3c:	2030      	movs	r0, #48	; 0x30
 8003b3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b42:	4422      	add	r2, r4
 8003b44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b4c:	3302      	adds	r3, #2
 8003b4e:	e7c7      	b.n	8003ae0 <_printf_common+0x58>
 8003b50:	2301      	movs	r3, #1
 8003b52:	4622      	mov	r2, r4
 8003b54:	4649      	mov	r1, r9
 8003b56:	4638      	mov	r0, r7
 8003b58:	47c0      	blx	r8
 8003b5a:	3001      	adds	r0, #1
 8003b5c:	d0e6      	beq.n	8003b2c <_printf_common+0xa4>
 8003b5e:	3601      	adds	r6, #1
 8003b60:	e7d9      	b.n	8003b16 <_printf_common+0x8e>
	...

08003b64 <_printf_i>:
 8003b64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b68:	460c      	mov	r4, r1
 8003b6a:	4691      	mov	r9, r2
 8003b6c:	7e27      	ldrb	r7, [r4, #24]
 8003b6e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003b70:	2f78      	cmp	r7, #120	; 0x78
 8003b72:	4680      	mov	r8, r0
 8003b74:	469a      	mov	sl, r3
 8003b76:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b7a:	d807      	bhi.n	8003b8c <_printf_i+0x28>
 8003b7c:	2f62      	cmp	r7, #98	; 0x62
 8003b7e:	d80a      	bhi.n	8003b96 <_printf_i+0x32>
 8003b80:	2f00      	cmp	r7, #0
 8003b82:	f000 80d8 	beq.w	8003d36 <_printf_i+0x1d2>
 8003b86:	2f58      	cmp	r7, #88	; 0x58
 8003b88:	f000 80a3 	beq.w	8003cd2 <_printf_i+0x16e>
 8003b8c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003b90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003b94:	e03a      	b.n	8003c0c <_printf_i+0xa8>
 8003b96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003b9a:	2b15      	cmp	r3, #21
 8003b9c:	d8f6      	bhi.n	8003b8c <_printf_i+0x28>
 8003b9e:	a001      	add	r0, pc, #4	; (adr r0, 8003ba4 <_printf_i+0x40>)
 8003ba0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003ba4:	08003bfd 	.word	0x08003bfd
 8003ba8:	08003c11 	.word	0x08003c11
 8003bac:	08003b8d 	.word	0x08003b8d
 8003bb0:	08003b8d 	.word	0x08003b8d
 8003bb4:	08003b8d 	.word	0x08003b8d
 8003bb8:	08003b8d 	.word	0x08003b8d
 8003bbc:	08003c11 	.word	0x08003c11
 8003bc0:	08003b8d 	.word	0x08003b8d
 8003bc4:	08003b8d 	.word	0x08003b8d
 8003bc8:	08003b8d 	.word	0x08003b8d
 8003bcc:	08003b8d 	.word	0x08003b8d
 8003bd0:	08003d1d 	.word	0x08003d1d
 8003bd4:	08003c41 	.word	0x08003c41
 8003bd8:	08003cff 	.word	0x08003cff
 8003bdc:	08003b8d 	.word	0x08003b8d
 8003be0:	08003b8d 	.word	0x08003b8d
 8003be4:	08003d3f 	.word	0x08003d3f
 8003be8:	08003b8d 	.word	0x08003b8d
 8003bec:	08003c41 	.word	0x08003c41
 8003bf0:	08003b8d 	.word	0x08003b8d
 8003bf4:	08003b8d 	.word	0x08003b8d
 8003bf8:	08003d07 	.word	0x08003d07
 8003bfc:	680b      	ldr	r3, [r1, #0]
 8003bfe:	1d1a      	adds	r2, r3, #4
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	600a      	str	r2, [r1, #0]
 8003c04:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003c08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e0a3      	b.n	8003d58 <_printf_i+0x1f4>
 8003c10:	6825      	ldr	r5, [r4, #0]
 8003c12:	6808      	ldr	r0, [r1, #0]
 8003c14:	062e      	lsls	r6, r5, #24
 8003c16:	f100 0304 	add.w	r3, r0, #4
 8003c1a:	d50a      	bpl.n	8003c32 <_printf_i+0xce>
 8003c1c:	6805      	ldr	r5, [r0, #0]
 8003c1e:	600b      	str	r3, [r1, #0]
 8003c20:	2d00      	cmp	r5, #0
 8003c22:	da03      	bge.n	8003c2c <_printf_i+0xc8>
 8003c24:	232d      	movs	r3, #45	; 0x2d
 8003c26:	426d      	negs	r5, r5
 8003c28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c2c:	485e      	ldr	r0, [pc, #376]	; (8003da8 <_printf_i+0x244>)
 8003c2e:	230a      	movs	r3, #10
 8003c30:	e019      	b.n	8003c66 <_printf_i+0x102>
 8003c32:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003c36:	6805      	ldr	r5, [r0, #0]
 8003c38:	600b      	str	r3, [r1, #0]
 8003c3a:	bf18      	it	ne
 8003c3c:	b22d      	sxthne	r5, r5
 8003c3e:	e7ef      	b.n	8003c20 <_printf_i+0xbc>
 8003c40:	680b      	ldr	r3, [r1, #0]
 8003c42:	6825      	ldr	r5, [r4, #0]
 8003c44:	1d18      	adds	r0, r3, #4
 8003c46:	6008      	str	r0, [r1, #0]
 8003c48:	0628      	lsls	r0, r5, #24
 8003c4a:	d501      	bpl.n	8003c50 <_printf_i+0xec>
 8003c4c:	681d      	ldr	r5, [r3, #0]
 8003c4e:	e002      	b.n	8003c56 <_printf_i+0xf2>
 8003c50:	0669      	lsls	r1, r5, #25
 8003c52:	d5fb      	bpl.n	8003c4c <_printf_i+0xe8>
 8003c54:	881d      	ldrh	r5, [r3, #0]
 8003c56:	4854      	ldr	r0, [pc, #336]	; (8003da8 <_printf_i+0x244>)
 8003c58:	2f6f      	cmp	r7, #111	; 0x6f
 8003c5a:	bf0c      	ite	eq
 8003c5c:	2308      	moveq	r3, #8
 8003c5e:	230a      	movne	r3, #10
 8003c60:	2100      	movs	r1, #0
 8003c62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003c66:	6866      	ldr	r6, [r4, #4]
 8003c68:	60a6      	str	r6, [r4, #8]
 8003c6a:	2e00      	cmp	r6, #0
 8003c6c:	bfa2      	ittt	ge
 8003c6e:	6821      	ldrge	r1, [r4, #0]
 8003c70:	f021 0104 	bicge.w	r1, r1, #4
 8003c74:	6021      	strge	r1, [r4, #0]
 8003c76:	b90d      	cbnz	r5, 8003c7c <_printf_i+0x118>
 8003c78:	2e00      	cmp	r6, #0
 8003c7a:	d04d      	beq.n	8003d18 <_printf_i+0x1b4>
 8003c7c:	4616      	mov	r6, r2
 8003c7e:	fbb5 f1f3 	udiv	r1, r5, r3
 8003c82:	fb03 5711 	mls	r7, r3, r1, r5
 8003c86:	5dc7      	ldrb	r7, [r0, r7]
 8003c88:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003c8c:	462f      	mov	r7, r5
 8003c8e:	42bb      	cmp	r3, r7
 8003c90:	460d      	mov	r5, r1
 8003c92:	d9f4      	bls.n	8003c7e <_printf_i+0x11a>
 8003c94:	2b08      	cmp	r3, #8
 8003c96:	d10b      	bne.n	8003cb0 <_printf_i+0x14c>
 8003c98:	6823      	ldr	r3, [r4, #0]
 8003c9a:	07df      	lsls	r7, r3, #31
 8003c9c:	d508      	bpl.n	8003cb0 <_printf_i+0x14c>
 8003c9e:	6923      	ldr	r3, [r4, #16]
 8003ca0:	6861      	ldr	r1, [r4, #4]
 8003ca2:	4299      	cmp	r1, r3
 8003ca4:	bfde      	ittt	le
 8003ca6:	2330      	movle	r3, #48	; 0x30
 8003ca8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003cac:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003cb0:	1b92      	subs	r2, r2, r6
 8003cb2:	6122      	str	r2, [r4, #16]
 8003cb4:	f8cd a000 	str.w	sl, [sp]
 8003cb8:	464b      	mov	r3, r9
 8003cba:	aa03      	add	r2, sp, #12
 8003cbc:	4621      	mov	r1, r4
 8003cbe:	4640      	mov	r0, r8
 8003cc0:	f7ff fee2 	bl	8003a88 <_printf_common>
 8003cc4:	3001      	adds	r0, #1
 8003cc6:	d14c      	bne.n	8003d62 <_printf_i+0x1fe>
 8003cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8003ccc:	b004      	add	sp, #16
 8003cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cd2:	4835      	ldr	r0, [pc, #212]	; (8003da8 <_printf_i+0x244>)
 8003cd4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003cd8:	6823      	ldr	r3, [r4, #0]
 8003cda:	680e      	ldr	r6, [r1, #0]
 8003cdc:	061f      	lsls	r7, r3, #24
 8003cde:	f856 5b04 	ldr.w	r5, [r6], #4
 8003ce2:	600e      	str	r6, [r1, #0]
 8003ce4:	d514      	bpl.n	8003d10 <_printf_i+0x1ac>
 8003ce6:	07d9      	lsls	r1, r3, #31
 8003ce8:	bf44      	itt	mi
 8003cea:	f043 0320 	orrmi.w	r3, r3, #32
 8003cee:	6023      	strmi	r3, [r4, #0]
 8003cf0:	b91d      	cbnz	r5, 8003cfa <_printf_i+0x196>
 8003cf2:	6823      	ldr	r3, [r4, #0]
 8003cf4:	f023 0320 	bic.w	r3, r3, #32
 8003cf8:	6023      	str	r3, [r4, #0]
 8003cfa:	2310      	movs	r3, #16
 8003cfc:	e7b0      	b.n	8003c60 <_printf_i+0xfc>
 8003cfe:	6823      	ldr	r3, [r4, #0]
 8003d00:	f043 0320 	orr.w	r3, r3, #32
 8003d04:	6023      	str	r3, [r4, #0]
 8003d06:	2378      	movs	r3, #120	; 0x78
 8003d08:	4828      	ldr	r0, [pc, #160]	; (8003dac <_printf_i+0x248>)
 8003d0a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003d0e:	e7e3      	b.n	8003cd8 <_printf_i+0x174>
 8003d10:	065e      	lsls	r6, r3, #25
 8003d12:	bf48      	it	mi
 8003d14:	b2ad      	uxthmi	r5, r5
 8003d16:	e7e6      	b.n	8003ce6 <_printf_i+0x182>
 8003d18:	4616      	mov	r6, r2
 8003d1a:	e7bb      	b.n	8003c94 <_printf_i+0x130>
 8003d1c:	680b      	ldr	r3, [r1, #0]
 8003d1e:	6826      	ldr	r6, [r4, #0]
 8003d20:	6960      	ldr	r0, [r4, #20]
 8003d22:	1d1d      	adds	r5, r3, #4
 8003d24:	600d      	str	r5, [r1, #0]
 8003d26:	0635      	lsls	r5, r6, #24
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	d501      	bpl.n	8003d30 <_printf_i+0x1cc>
 8003d2c:	6018      	str	r0, [r3, #0]
 8003d2e:	e002      	b.n	8003d36 <_printf_i+0x1d2>
 8003d30:	0671      	lsls	r1, r6, #25
 8003d32:	d5fb      	bpl.n	8003d2c <_printf_i+0x1c8>
 8003d34:	8018      	strh	r0, [r3, #0]
 8003d36:	2300      	movs	r3, #0
 8003d38:	6123      	str	r3, [r4, #16]
 8003d3a:	4616      	mov	r6, r2
 8003d3c:	e7ba      	b.n	8003cb4 <_printf_i+0x150>
 8003d3e:	680b      	ldr	r3, [r1, #0]
 8003d40:	1d1a      	adds	r2, r3, #4
 8003d42:	600a      	str	r2, [r1, #0]
 8003d44:	681e      	ldr	r6, [r3, #0]
 8003d46:	6862      	ldr	r2, [r4, #4]
 8003d48:	2100      	movs	r1, #0
 8003d4a:	4630      	mov	r0, r6
 8003d4c:	f7fc fa48 	bl	80001e0 <memchr>
 8003d50:	b108      	cbz	r0, 8003d56 <_printf_i+0x1f2>
 8003d52:	1b80      	subs	r0, r0, r6
 8003d54:	6060      	str	r0, [r4, #4]
 8003d56:	6863      	ldr	r3, [r4, #4]
 8003d58:	6123      	str	r3, [r4, #16]
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d60:	e7a8      	b.n	8003cb4 <_printf_i+0x150>
 8003d62:	6923      	ldr	r3, [r4, #16]
 8003d64:	4632      	mov	r2, r6
 8003d66:	4649      	mov	r1, r9
 8003d68:	4640      	mov	r0, r8
 8003d6a:	47d0      	blx	sl
 8003d6c:	3001      	adds	r0, #1
 8003d6e:	d0ab      	beq.n	8003cc8 <_printf_i+0x164>
 8003d70:	6823      	ldr	r3, [r4, #0]
 8003d72:	079b      	lsls	r3, r3, #30
 8003d74:	d413      	bmi.n	8003d9e <_printf_i+0x23a>
 8003d76:	68e0      	ldr	r0, [r4, #12]
 8003d78:	9b03      	ldr	r3, [sp, #12]
 8003d7a:	4298      	cmp	r0, r3
 8003d7c:	bfb8      	it	lt
 8003d7e:	4618      	movlt	r0, r3
 8003d80:	e7a4      	b.n	8003ccc <_printf_i+0x168>
 8003d82:	2301      	movs	r3, #1
 8003d84:	4632      	mov	r2, r6
 8003d86:	4649      	mov	r1, r9
 8003d88:	4640      	mov	r0, r8
 8003d8a:	47d0      	blx	sl
 8003d8c:	3001      	adds	r0, #1
 8003d8e:	d09b      	beq.n	8003cc8 <_printf_i+0x164>
 8003d90:	3501      	adds	r5, #1
 8003d92:	68e3      	ldr	r3, [r4, #12]
 8003d94:	9903      	ldr	r1, [sp, #12]
 8003d96:	1a5b      	subs	r3, r3, r1
 8003d98:	42ab      	cmp	r3, r5
 8003d9a:	dcf2      	bgt.n	8003d82 <_printf_i+0x21e>
 8003d9c:	e7eb      	b.n	8003d76 <_printf_i+0x212>
 8003d9e:	2500      	movs	r5, #0
 8003da0:	f104 0619 	add.w	r6, r4, #25
 8003da4:	e7f5      	b.n	8003d92 <_printf_i+0x22e>
 8003da6:	bf00      	nop
 8003da8:	080090b2 	.word	0x080090b2
 8003dac:	080090c3 	.word	0x080090c3

08003db0 <_scanf_float>:
 8003db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003db4:	b087      	sub	sp, #28
 8003db6:	4617      	mov	r7, r2
 8003db8:	9303      	str	r3, [sp, #12]
 8003dba:	688b      	ldr	r3, [r1, #8]
 8003dbc:	1e5a      	subs	r2, r3, #1
 8003dbe:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8003dc2:	bf83      	ittte	hi
 8003dc4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8003dc8:	195b      	addhi	r3, r3, r5
 8003dca:	9302      	strhi	r3, [sp, #8]
 8003dcc:	2300      	movls	r3, #0
 8003dce:	bf86      	itte	hi
 8003dd0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003dd4:	608b      	strhi	r3, [r1, #8]
 8003dd6:	9302      	strls	r3, [sp, #8]
 8003dd8:	680b      	ldr	r3, [r1, #0]
 8003dda:	468b      	mov	fp, r1
 8003ddc:	2500      	movs	r5, #0
 8003dde:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8003de2:	f84b 3b1c 	str.w	r3, [fp], #28
 8003de6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8003dea:	4680      	mov	r8, r0
 8003dec:	460c      	mov	r4, r1
 8003dee:	465e      	mov	r6, fp
 8003df0:	46aa      	mov	sl, r5
 8003df2:	46a9      	mov	r9, r5
 8003df4:	9501      	str	r5, [sp, #4]
 8003df6:	68a2      	ldr	r2, [r4, #8]
 8003df8:	b152      	cbz	r2, 8003e10 <_scanf_float+0x60>
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	2b4e      	cmp	r3, #78	; 0x4e
 8003e00:	d864      	bhi.n	8003ecc <_scanf_float+0x11c>
 8003e02:	2b40      	cmp	r3, #64	; 0x40
 8003e04:	d83c      	bhi.n	8003e80 <_scanf_float+0xd0>
 8003e06:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8003e0a:	b2c8      	uxtb	r0, r1
 8003e0c:	280e      	cmp	r0, #14
 8003e0e:	d93a      	bls.n	8003e86 <_scanf_float+0xd6>
 8003e10:	f1b9 0f00 	cmp.w	r9, #0
 8003e14:	d003      	beq.n	8003e1e <_scanf_float+0x6e>
 8003e16:	6823      	ldr	r3, [r4, #0]
 8003e18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e1c:	6023      	str	r3, [r4, #0]
 8003e1e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003e22:	f1ba 0f01 	cmp.w	sl, #1
 8003e26:	f200 8113 	bhi.w	8004050 <_scanf_float+0x2a0>
 8003e2a:	455e      	cmp	r6, fp
 8003e2c:	f200 8105 	bhi.w	800403a <_scanf_float+0x28a>
 8003e30:	2501      	movs	r5, #1
 8003e32:	4628      	mov	r0, r5
 8003e34:	b007      	add	sp, #28
 8003e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e3a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8003e3e:	2a0d      	cmp	r2, #13
 8003e40:	d8e6      	bhi.n	8003e10 <_scanf_float+0x60>
 8003e42:	a101      	add	r1, pc, #4	; (adr r1, 8003e48 <_scanf_float+0x98>)
 8003e44:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003e48:	08003f87 	.word	0x08003f87
 8003e4c:	08003e11 	.word	0x08003e11
 8003e50:	08003e11 	.word	0x08003e11
 8003e54:	08003e11 	.word	0x08003e11
 8003e58:	08003fe7 	.word	0x08003fe7
 8003e5c:	08003fbf 	.word	0x08003fbf
 8003e60:	08003e11 	.word	0x08003e11
 8003e64:	08003e11 	.word	0x08003e11
 8003e68:	08003f95 	.word	0x08003f95
 8003e6c:	08003e11 	.word	0x08003e11
 8003e70:	08003e11 	.word	0x08003e11
 8003e74:	08003e11 	.word	0x08003e11
 8003e78:	08003e11 	.word	0x08003e11
 8003e7c:	08003f4d 	.word	0x08003f4d
 8003e80:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8003e84:	e7db      	b.n	8003e3e <_scanf_float+0x8e>
 8003e86:	290e      	cmp	r1, #14
 8003e88:	d8c2      	bhi.n	8003e10 <_scanf_float+0x60>
 8003e8a:	a001      	add	r0, pc, #4	; (adr r0, 8003e90 <_scanf_float+0xe0>)
 8003e8c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8003e90:	08003f3f 	.word	0x08003f3f
 8003e94:	08003e11 	.word	0x08003e11
 8003e98:	08003f3f 	.word	0x08003f3f
 8003e9c:	08003fd3 	.word	0x08003fd3
 8003ea0:	08003e11 	.word	0x08003e11
 8003ea4:	08003eed 	.word	0x08003eed
 8003ea8:	08003f29 	.word	0x08003f29
 8003eac:	08003f29 	.word	0x08003f29
 8003eb0:	08003f29 	.word	0x08003f29
 8003eb4:	08003f29 	.word	0x08003f29
 8003eb8:	08003f29 	.word	0x08003f29
 8003ebc:	08003f29 	.word	0x08003f29
 8003ec0:	08003f29 	.word	0x08003f29
 8003ec4:	08003f29 	.word	0x08003f29
 8003ec8:	08003f29 	.word	0x08003f29
 8003ecc:	2b6e      	cmp	r3, #110	; 0x6e
 8003ece:	d809      	bhi.n	8003ee4 <_scanf_float+0x134>
 8003ed0:	2b60      	cmp	r3, #96	; 0x60
 8003ed2:	d8b2      	bhi.n	8003e3a <_scanf_float+0x8a>
 8003ed4:	2b54      	cmp	r3, #84	; 0x54
 8003ed6:	d077      	beq.n	8003fc8 <_scanf_float+0x218>
 8003ed8:	2b59      	cmp	r3, #89	; 0x59
 8003eda:	d199      	bne.n	8003e10 <_scanf_float+0x60>
 8003edc:	2d07      	cmp	r5, #7
 8003ede:	d197      	bne.n	8003e10 <_scanf_float+0x60>
 8003ee0:	2508      	movs	r5, #8
 8003ee2:	e029      	b.n	8003f38 <_scanf_float+0x188>
 8003ee4:	2b74      	cmp	r3, #116	; 0x74
 8003ee6:	d06f      	beq.n	8003fc8 <_scanf_float+0x218>
 8003ee8:	2b79      	cmp	r3, #121	; 0x79
 8003eea:	e7f6      	b.n	8003eda <_scanf_float+0x12a>
 8003eec:	6821      	ldr	r1, [r4, #0]
 8003eee:	05c8      	lsls	r0, r1, #23
 8003ef0:	d51a      	bpl.n	8003f28 <_scanf_float+0x178>
 8003ef2:	9b02      	ldr	r3, [sp, #8]
 8003ef4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8003ef8:	6021      	str	r1, [r4, #0]
 8003efa:	f109 0901 	add.w	r9, r9, #1
 8003efe:	b11b      	cbz	r3, 8003f08 <_scanf_float+0x158>
 8003f00:	3b01      	subs	r3, #1
 8003f02:	3201      	adds	r2, #1
 8003f04:	9302      	str	r3, [sp, #8]
 8003f06:	60a2      	str	r2, [r4, #8]
 8003f08:	68a3      	ldr	r3, [r4, #8]
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	60a3      	str	r3, [r4, #8]
 8003f0e:	6923      	ldr	r3, [r4, #16]
 8003f10:	3301      	adds	r3, #1
 8003f12:	6123      	str	r3, [r4, #16]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	3b01      	subs	r3, #1
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	607b      	str	r3, [r7, #4]
 8003f1c:	f340 8084 	ble.w	8004028 <_scanf_float+0x278>
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	3301      	adds	r3, #1
 8003f24:	603b      	str	r3, [r7, #0]
 8003f26:	e766      	b.n	8003df6 <_scanf_float+0x46>
 8003f28:	eb1a 0f05 	cmn.w	sl, r5
 8003f2c:	f47f af70 	bne.w	8003e10 <_scanf_float+0x60>
 8003f30:	6822      	ldr	r2, [r4, #0]
 8003f32:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8003f36:	6022      	str	r2, [r4, #0]
 8003f38:	f806 3b01 	strb.w	r3, [r6], #1
 8003f3c:	e7e4      	b.n	8003f08 <_scanf_float+0x158>
 8003f3e:	6822      	ldr	r2, [r4, #0]
 8003f40:	0610      	lsls	r0, r2, #24
 8003f42:	f57f af65 	bpl.w	8003e10 <_scanf_float+0x60>
 8003f46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f4a:	e7f4      	b.n	8003f36 <_scanf_float+0x186>
 8003f4c:	f1ba 0f00 	cmp.w	sl, #0
 8003f50:	d10e      	bne.n	8003f70 <_scanf_float+0x1c0>
 8003f52:	f1b9 0f00 	cmp.w	r9, #0
 8003f56:	d10e      	bne.n	8003f76 <_scanf_float+0x1c6>
 8003f58:	6822      	ldr	r2, [r4, #0]
 8003f5a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8003f5e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003f62:	d108      	bne.n	8003f76 <_scanf_float+0x1c6>
 8003f64:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003f68:	6022      	str	r2, [r4, #0]
 8003f6a:	f04f 0a01 	mov.w	sl, #1
 8003f6e:	e7e3      	b.n	8003f38 <_scanf_float+0x188>
 8003f70:	f1ba 0f02 	cmp.w	sl, #2
 8003f74:	d055      	beq.n	8004022 <_scanf_float+0x272>
 8003f76:	2d01      	cmp	r5, #1
 8003f78:	d002      	beq.n	8003f80 <_scanf_float+0x1d0>
 8003f7a:	2d04      	cmp	r5, #4
 8003f7c:	f47f af48 	bne.w	8003e10 <_scanf_float+0x60>
 8003f80:	3501      	adds	r5, #1
 8003f82:	b2ed      	uxtb	r5, r5
 8003f84:	e7d8      	b.n	8003f38 <_scanf_float+0x188>
 8003f86:	f1ba 0f01 	cmp.w	sl, #1
 8003f8a:	f47f af41 	bne.w	8003e10 <_scanf_float+0x60>
 8003f8e:	f04f 0a02 	mov.w	sl, #2
 8003f92:	e7d1      	b.n	8003f38 <_scanf_float+0x188>
 8003f94:	b97d      	cbnz	r5, 8003fb6 <_scanf_float+0x206>
 8003f96:	f1b9 0f00 	cmp.w	r9, #0
 8003f9a:	f47f af3c 	bne.w	8003e16 <_scanf_float+0x66>
 8003f9e:	6822      	ldr	r2, [r4, #0]
 8003fa0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8003fa4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003fa8:	f47f af39 	bne.w	8003e1e <_scanf_float+0x6e>
 8003fac:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003fb0:	6022      	str	r2, [r4, #0]
 8003fb2:	2501      	movs	r5, #1
 8003fb4:	e7c0      	b.n	8003f38 <_scanf_float+0x188>
 8003fb6:	2d03      	cmp	r5, #3
 8003fb8:	d0e2      	beq.n	8003f80 <_scanf_float+0x1d0>
 8003fba:	2d05      	cmp	r5, #5
 8003fbc:	e7de      	b.n	8003f7c <_scanf_float+0x1cc>
 8003fbe:	2d02      	cmp	r5, #2
 8003fc0:	f47f af26 	bne.w	8003e10 <_scanf_float+0x60>
 8003fc4:	2503      	movs	r5, #3
 8003fc6:	e7b7      	b.n	8003f38 <_scanf_float+0x188>
 8003fc8:	2d06      	cmp	r5, #6
 8003fca:	f47f af21 	bne.w	8003e10 <_scanf_float+0x60>
 8003fce:	2507      	movs	r5, #7
 8003fd0:	e7b2      	b.n	8003f38 <_scanf_float+0x188>
 8003fd2:	6822      	ldr	r2, [r4, #0]
 8003fd4:	0591      	lsls	r1, r2, #22
 8003fd6:	f57f af1b 	bpl.w	8003e10 <_scanf_float+0x60>
 8003fda:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8003fde:	6022      	str	r2, [r4, #0]
 8003fe0:	f8cd 9004 	str.w	r9, [sp, #4]
 8003fe4:	e7a8      	b.n	8003f38 <_scanf_float+0x188>
 8003fe6:	6822      	ldr	r2, [r4, #0]
 8003fe8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8003fec:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8003ff0:	d006      	beq.n	8004000 <_scanf_float+0x250>
 8003ff2:	0550      	lsls	r0, r2, #21
 8003ff4:	f57f af0c 	bpl.w	8003e10 <_scanf_float+0x60>
 8003ff8:	f1b9 0f00 	cmp.w	r9, #0
 8003ffc:	f43f af0f 	beq.w	8003e1e <_scanf_float+0x6e>
 8004000:	0591      	lsls	r1, r2, #22
 8004002:	bf58      	it	pl
 8004004:	9901      	ldrpl	r1, [sp, #4]
 8004006:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800400a:	bf58      	it	pl
 800400c:	eba9 0101 	subpl.w	r1, r9, r1
 8004010:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8004014:	bf58      	it	pl
 8004016:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800401a:	6022      	str	r2, [r4, #0]
 800401c:	f04f 0900 	mov.w	r9, #0
 8004020:	e78a      	b.n	8003f38 <_scanf_float+0x188>
 8004022:	f04f 0a03 	mov.w	sl, #3
 8004026:	e787      	b.n	8003f38 <_scanf_float+0x188>
 8004028:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800402c:	4639      	mov	r1, r7
 800402e:	4640      	mov	r0, r8
 8004030:	4798      	blx	r3
 8004032:	2800      	cmp	r0, #0
 8004034:	f43f aedf 	beq.w	8003df6 <_scanf_float+0x46>
 8004038:	e6ea      	b.n	8003e10 <_scanf_float+0x60>
 800403a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800403e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004042:	463a      	mov	r2, r7
 8004044:	4640      	mov	r0, r8
 8004046:	4798      	blx	r3
 8004048:	6923      	ldr	r3, [r4, #16]
 800404a:	3b01      	subs	r3, #1
 800404c:	6123      	str	r3, [r4, #16]
 800404e:	e6ec      	b.n	8003e2a <_scanf_float+0x7a>
 8004050:	1e6b      	subs	r3, r5, #1
 8004052:	2b06      	cmp	r3, #6
 8004054:	d825      	bhi.n	80040a2 <_scanf_float+0x2f2>
 8004056:	2d02      	cmp	r5, #2
 8004058:	d836      	bhi.n	80040c8 <_scanf_float+0x318>
 800405a:	455e      	cmp	r6, fp
 800405c:	f67f aee8 	bls.w	8003e30 <_scanf_float+0x80>
 8004060:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004064:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004068:	463a      	mov	r2, r7
 800406a:	4640      	mov	r0, r8
 800406c:	4798      	blx	r3
 800406e:	6923      	ldr	r3, [r4, #16]
 8004070:	3b01      	subs	r3, #1
 8004072:	6123      	str	r3, [r4, #16]
 8004074:	e7f1      	b.n	800405a <_scanf_float+0x2aa>
 8004076:	9802      	ldr	r0, [sp, #8]
 8004078:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800407c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004080:	9002      	str	r0, [sp, #8]
 8004082:	463a      	mov	r2, r7
 8004084:	4640      	mov	r0, r8
 8004086:	4798      	blx	r3
 8004088:	6923      	ldr	r3, [r4, #16]
 800408a:	3b01      	subs	r3, #1
 800408c:	6123      	str	r3, [r4, #16]
 800408e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004092:	fa5f fa8a 	uxtb.w	sl, sl
 8004096:	f1ba 0f02 	cmp.w	sl, #2
 800409a:	d1ec      	bne.n	8004076 <_scanf_float+0x2c6>
 800409c:	3d03      	subs	r5, #3
 800409e:	b2ed      	uxtb	r5, r5
 80040a0:	1b76      	subs	r6, r6, r5
 80040a2:	6823      	ldr	r3, [r4, #0]
 80040a4:	05da      	lsls	r2, r3, #23
 80040a6:	d52f      	bpl.n	8004108 <_scanf_float+0x358>
 80040a8:	055b      	lsls	r3, r3, #21
 80040aa:	d510      	bpl.n	80040ce <_scanf_float+0x31e>
 80040ac:	455e      	cmp	r6, fp
 80040ae:	f67f aebf 	bls.w	8003e30 <_scanf_float+0x80>
 80040b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80040b6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80040ba:	463a      	mov	r2, r7
 80040bc:	4640      	mov	r0, r8
 80040be:	4798      	blx	r3
 80040c0:	6923      	ldr	r3, [r4, #16]
 80040c2:	3b01      	subs	r3, #1
 80040c4:	6123      	str	r3, [r4, #16]
 80040c6:	e7f1      	b.n	80040ac <_scanf_float+0x2fc>
 80040c8:	46aa      	mov	sl, r5
 80040ca:	9602      	str	r6, [sp, #8]
 80040cc:	e7df      	b.n	800408e <_scanf_float+0x2de>
 80040ce:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80040d2:	6923      	ldr	r3, [r4, #16]
 80040d4:	2965      	cmp	r1, #101	; 0x65
 80040d6:	f103 33ff 	add.w	r3, r3, #4294967295
 80040da:	f106 35ff 	add.w	r5, r6, #4294967295
 80040de:	6123      	str	r3, [r4, #16]
 80040e0:	d00c      	beq.n	80040fc <_scanf_float+0x34c>
 80040e2:	2945      	cmp	r1, #69	; 0x45
 80040e4:	d00a      	beq.n	80040fc <_scanf_float+0x34c>
 80040e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80040ea:	463a      	mov	r2, r7
 80040ec:	4640      	mov	r0, r8
 80040ee:	4798      	blx	r3
 80040f0:	6923      	ldr	r3, [r4, #16]
 80040f2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80040f6:	3b01      	subs	r3, #1
 80040f8:	1eb5      	subs	r5, r6, #2
 80040fa:	6123      	str	r3, [r4, #16]
 80040fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004100:	463a      	mov	r2, r7
 8004102:	4640      	mov	r0, r8
 8004104:	4798      	blx	r3
 8004106:	462e      	mov	r6, r5
 8004108:	6825      	ldr	r5, [r4, #0]
 800410a:	f015 0510 	ands.w	r5, r5, #16
 800410e:	d158      	bne.n	80041c2 <_scanf_float+0x412>
 8004110:	7035      	strb	r5, [r6, #0]
 8004112:	6823      	ldr	r3, [r4, #0]
 8004114:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004118:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800411c:	d11c      	bne.n	8004158 <_scanf_float+0x3a8>
 800411e:	9b01      	ldr	r3, [sp, #4]
 8004120:	454b      	cmp	r3, r9
 8004122:	eba3 0209 	sub.w	r2, r3, r9
 8004126:	d124      	bne.n	8004172 <_scanf_float+0x3c2>
 8004128:	2200      	movs	r2, #0
 800412a:	4659      	mov	r1, fp
 800412c:	4640      	mov	r0, r8
 800412e:	f000 fe9d 	bl	8004e6c <_strtod_r>
 8004132:	9b03      	ldr	r3, [sp, #12]
 8004134:	6821      	ldr	r1, [r4, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f011 0f02 	tst.w	r1, #2
 800413c:	ec57 6b10 	vmov	r6, r7, d0
 8004140:	f103 0204 	add.w	r2, r3, #4
 8004144:	d020      	beq.n	8004188 <_scanf_float+0x3d8>
 8004146:	9903      	ldr	r1, [sp, #12]
 8004148:	600a      	str	r2, [r1, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	e9c3 6700 	strd	r6, r7, [r3]
 8004150:	68e3      	ldr	r3, [r4, #12]
 8004152:	3301      	adds	r3, #1
 8004154:	60e3      	str	r3, [r4, #12]
 8004156:	e66c      	b.n	8003e32 <_scanf_float+0x82>
 8004158:	9b04      	ldr	r3, [sp, #16]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d0e4      	beq.n	8004128 <_scanf_float+0x378>
 800415e:	9905      	ldr	r1, [sp, #20]
 8004160:	230a      	movs	r3, #10
 8004162:	462a      	mov	r2, r5
 8004164:	3101      	adds	r1, #1
 8004166:	4640      	mov	r0, r8
 8004168:	f000 ff0a 	bl	8004f80 <_strtol_r>
 800416c:	9b04      	ldr	r3, [sp, #16]
 800416e:	9e05      	ldr	r6, [sp, #20]
 8004170:	1ac2      	subs	r2, r0, r3
 8004172:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004176:	429e      	cmp	r6, r3
 8004178:	bf28      	it	cs
 800417a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800417e:	4912      	ldr	r1, [pc, #72]	; (80041c8 <_scanf_float+0x418>)
 8004180:	4630      	mov	r0, r6
 8004182:	f000 f82b 	bl	80041dc <siprintf>
 8004186:	e7cf      	b.n	8004128 <_scanf_float+0x378>
 8004188:	f011 0f04 	tst.w	r1, #4
 800418c:	9903      	ldr	r1, [sp, #12]
 800418e:	600a      	str	r2, [r1, #0]
 8004190:	d1db      	bne.n	800414a <_scanf_float+0x39a>
 8004192:	f8d3 8000 	ldr.w	r8, [r3]
 8004196:	ee10 2a10 	vmov	r2, s0
 800419a:	ee10 0a10 	vmov	r0, s0
 800419e:	463b      	mov	r3, r7
 80041a0:	4639      	mov	r1, r7
 80041a2:	f7fc fcc3 	bl	8000b2c <__aeabi_dcmpun>
 80041a6:	b128      	cbz	r0, 80041b4 <_scanf_float+0x404>
 80041a8:	4808      	ldr	r0, [pc, #32]	; (80041cc <_scanf_float+0x41c>)
 80041aa:	f000 f811 	bl	80041d0 <nanf>
 80041ae:	ed88 0a00 	vstr	s0, [r8]
 80041b2:	e7cd      	b.n	8004150 <_scanf_float+0x3a0>
 80041b4:	4630      	mov	r0, r6
 80041b6:	4639      	mov	r1, r7
 80041b8:	f7fc fd16 	bl	8000be8 <__aeabi_d2f>
 80041bc:	f8c8 0000 	str.w	r0, [r8]
 80041c0:	e7c6      	b.n	8004150 <_scanf_float+0x3a0>
 80041c2:	2500      	movs	r5, #0
 80041c4:	e635      	b.n	8003e32 <_scanf_float+0x82>
 80041c6:	bf00      	nop
 80041c8:	080090d4 	.word	0x080090d4
 80041cc:	080094f0 	.word	0x080094f0

080041d0 <nanf>:
 80041d0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80041d8 <nanf+0x8>
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	7fc00000 	.word	0x7fc00000

080041dc <siprintf>:
 80041dc:	b40e      	push	{r1, r2, r3}
 80041de:	b500      	push	{lr}
 80041e0:	b09c      	sub	sp, #112	; 0x70
 80041e2:	ab1d      	add	r3, sp, #116	; 0x74
 80041e4:	9002      	str	r0, [sp, #8]
 80041e6:	9006      	str	r0, [sp, #24]
 80041e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80041ec:	4809      	ldr	r0, [pc, #36]	; (8004214 <siprintf+0x38>)
 80041ee:	9107      	str	r1, [sp, #28]
 80041f0:	9104      	str	r1, [sp, #16]
 80041f2:	4909      	ldr	r1, [pc, #36]	; (8004218 <siprintf+0x3c>)
 80041f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80041f8:	9105      	str	r1, [sp, #20]
 80041fa:	6800      	ldr	r0, [r0, #0]
 80041fc:	9301      	str	r3, [sp, #4]
 80041fe:	a902      	add	r1, sp, #8
 8004200:	f002 fea6 	bl	8006f50 <_svfiprintf_r>
 8004204:	9b02      	ldr	r3, [sp, #8]
 8004206:	2200      	movs	r2, #0
 8004208:	701a      	strb	r2, [r3, #0]
 800420a:	b01c      	add	sp, #112	; 0x70
 800420c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004210:	b003      	add	sp, #12
 8004212:	4770      	bx	lr
 8004214:	20000014 	.word	0x20000014
 8004218:	ffff0208 	.word	0xffff0208

0800421c <sulp>:
 800421c:	b570      	push	{r4, r5, r6, lr}
 800421e:	4604      	mov	r4, r0
 8004220:	460d      	mov	r5, r1
 8004222:	ec45 4b10 	vmov	d0, r4, r5
 8004226:	4616      	mov	r6, r2
 8004228:	f002 fc2e 	bl	8006a88 <__ulp>
 800422c:	ec51 0b10 	vmov	r0, r1, d0
 8004230:	b17e      	cbz	r6, 8004252 <sulp+0x36>
 8004232:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8004236:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800423a:	2b00      	cmp	r3, #0
 800423c:	dd09      	ble.n	8004252 <sulp+0x36>
 800423e:	051b      	lsls	r3, r3, #20
 8004240:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004244:	2400      	movs	r4, #0
 8004246:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800424a:	4622      	mov	r2, r4
 800424c:	462b      	mov	r3, r5
 800424e:	f7fc f9d3 	bl	80005f8 <__aeabi_dmul>
 8004252:	bd70      	pop	{r4, r5, r6, pc}
 8004254:	0000      	movs	r0, r0
	...

08004258 <_strtod_l>:
 8004258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800425c:	b0a3      	sub	sp, #140	; 0x8c
 800425e:	461f      	mov	r7, r3
 8004260:	2300      	movs	r3, #0
 8004262:	931e      	str	r3, [sp, #120]	; 0x78
 8004264:	4ba4      	ldr	r3, [pc, #656]	; (80044f8 <_strtod_l+0x2a0>)
 8004266:	9219      	str	r2, [sp, #100]	; 0x64
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	9307      	str	r3, [sp, #28]
 800426c:	4604      	mov	r4, r0
 800426e:	4618      	mov	r0, r3
 8004270:	4688      	mov	r8, r1
 8004272:	f7fb ffad 	bl	80001d0 <strlen>
 8004276:	f04f 0a00 	mov.w	sl, #0
 800427a:	4605      	mov	r5, r0
 800427c:	f04f 0b00 	mov.w	fp, #0
 8004280:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8004284:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004286:	781a      	ldrb	r2, [r3, #0]
 8004288:	2a2b      	cmp	r2, #43	; 0x2b
 800428a:	d04c      	beq.n	8004326 <_strtod_l+0xce>
 800428c:	d839      	bhi.n	8004302 <_strtod_l+0xaa>
 800428e:	2a0d      	cmp	r2, #13
 8004290:	d832      	bhi.n	80042f8 <_strtod_l+0xa0>
 8004292:	2a08      	cmp	r2, #8
 8004294:	d832      	bhi.n	80042fc <_strtod_l+0xa4>
 8004296:	2a00      	cmp	r2, #0
 8004298:	d03c      	beq.n	8004314 <_strtod_l+0xbc>
 800429a:	2300      	movs	r3, #0
 800429c:	930e      	str	r3, [sp, #56]	; 0x38
 800429e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80042a0:	7833      	ldrb	r3, [r6, #0]
 80042a2:	2b30      	cmp	r3, #48	; 0x30
 80042a4:	f040 80b4 	bne.w	8004410 <_strtod_l+0x1b8>
 80042a8:	7873      	ldrb	r3, [r6, #1]
 80042aa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80042ae:	2b58      	cmp	r3, #88	; 0x58
 80042b0:	d16c      	bne.n	800438c <_strtod_l+0x134>
 80042b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80042b4:	9301      	str	r3, [sp, #4]
 80042b6:	ab1e      	add	r3, sp, #120	; 0x78
 80042b8:	9702      	str	r7, [sp, #8]
 80042ba:	9300      	str	r3, [sp, #0]
 80042bc:	4a8f      	ldr	r2, [pc, #572]	; (80044fc <_strtod_l+0x2a4>)
 80042be:	ab1f      	add	r3, sp, #124	; 0x7c
 80042c0:	a91d      	add	r1, sp, #116	; 0x74
 80042c2:	4620      	mov	r0, r4
 80042c4:	f001 fd40 	bl	8005d48 <__gethex>
 80042c8:	f010 0707 	ands.w	r7, r0, #7
 80042cc:	4605      	mov	r5, r0
 80042ce:	d005      	beq.n	80042dc <_strtod_l+0x84>
 80042d0:	2f06      	cmp	r7, #6
 80042d2:	d12a      	bne.n	800432a <_strtod_l+0xd2>
 80042d4:	3601      	adds	r6, #1
 80042d6:	2300      	movs	r3, #0
 80042d8:	961d      	str	r6, [sp, #116]	; 0x74
 80042da:	930e      	str	r3, [sp, #56]	; 0x38
 80042dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80042de:	2b00      	cmp	r3, #0
 80042e0:	f040 8596 	bne.w	8004e10 <_strtod_l+0xbb8>
 80042e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80042e6:	b1db      	cbz	r3, 8004320 <_strtod_l+0xc8>
 80042e8:	4652      	mov	r2, sl
 80042ea:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80042ee:	ec43 2b10 	vmov	d0, r2, r3
 80042f2:	b023      	add	sp, #140	; 0x8c
 80042f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042f8:	2a20      	cmp	r2, #32
 80042fa:	d1ce      	bne.n	800429a <_strtod_l+0x42>
 80042fc:	3301      	adds	r3, #1
 80042fe:	931d      	str	r3, [sp, #116]	; 0x74
 8004300:	e7c0      	b.n	8004284 <_strtod_l+0x2c>
 8004302:	2a2d      	cmp	r2, #45	; 0x2d
 8004304:	d1c9      	bne.n	800429a <_strtod_l+0x42>
 8004306:	2201      	movs	r2, #1
 8004308:	920e      	str	r2, [sp, #56]	; 0x38
 800430a:	1c5a      	adds	r2, r3, #1
 800430c:	921d      	str	r2, [sp, #116]	; 0x74
 800430e:	785b      	ldrb	r3, [r3, #1]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d1c4      	bne.n	800429e <_strtod_l+0x46>
 8004314:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004316:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800431a:	2b00      	cmp	r3, #0
 800431c:	f040 8576 	bne.w	8004e0c <_strtod_l+0xbb4>
 8004320:	4652      	mov	r2, sl
 8004322:	465b      	mov	r3, fp
 8004324:	e7e3      	b.n	80042ee <_strtod_l+0x96>
 8004326:	2200      	movs	r2, #0
 8004328:	e7ee      	b.n	8004308 <_strtod_l+0xb0>
 800432a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800432c:	b13a      	cbz	r2, 800433e <_strtod_l+0xe6>
 800432e:	2135      	movs	r1, #53	; 0x35
 8004330:	a820      	add	r0, sp, #128	; 0x80
 8004332:	f002 fcb4 	bl	8006c9e <__copybits>
 8004336:	991e      	ldr	r1, [sp, #120]	; 0x78
 8004338:	4620      	mov	r0, r4
 800433a:	f002 f879 	bl	8006430 <_Bfree>
 800433e:	3f01      	subs	r7, #1
 8004340:	2f05      	cmp	r7, #5
 8004342:	d807      	bhi.n	8004354 <_strtod_l+0xfc>
 8004344:	e8df f007 	tbb	[pc, r7]
 8004348:	1d180b0e 	.word	0x1d180b0e
 800434c:	030e      	.short	0x030e
 800434e:	f04f 0b00 	mov.w	fp, #0
 8004352:	46da      	mov	sl, fp
 8004354:	0728      	lsls	r0, r5, #28
 8004356:	d5c1      	bpl.n	80042dc <_strtod_l+0x84>
 8004358:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800435c:	e7be      	b.n	80042dc <_strtod_l+0x84>
 800435e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8004362:	e7f7      	b.n	8004354 <_strtod_l+0xfc>
 8004364:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8004368:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800436a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800436e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004372:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8004376:	e7ed      	b.n	8004354 <_strtod_l+0xfc>
 8004378:	f8df b184 	ldr.w	fp, [pc, #388]	; 8004500 <_strtod_l+0x2a8>
 800437c:	f04f 0a00 	mov.w	sl, #0
 8004380:	e7e8      	b.n	8004354 <_strtod_l+0xfc>
 8004382:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8004386:	f04f 3aff 	mov.w	sl, #4294967295
 800438a:	e7e3      	b.n	8004354 <_strtod_l+0xfc>
 800438c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800438e:	1c5a      	adds	r2, r3, #1
 8004390:	921d      	str	r2, [sp, #116]	; 0x74
 8004392:	785b      	ldrb	r3, [r3, #1]
 8004394:	2b30      	cmp	r3, #48	; 0x30
 8004396:	d0f9      	beq.n	800438c <_strtod_l+0x134>
 8004398:	2b00      	cmp	r3, #0
 800439a:	d09f      	beq.n	80042dc <_strtod_l+0x84>
 800439c:	2301      	movs	r3, #1
 800439e:	f04f 0900 	mov.w	r9, #0
 80043a2:	9304      	str	r3, [sp, #16]
 80043a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80043a6:	930a      	str	r3, [sp, #40]	; 0x28
 80043a8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80043ac:	464f      	mov	r7, r9
 80043ae:	220a      	movs	r2, #10
 80043b0:	981d      	ldr	r0, [sp, #116]	; 0x74
 80043b2:	7806      	ldrb	r6, [r0, #0]
 80043b4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80043b8:	b2d9      	uxtb	r1, r3
 80043ba:	2909      	cmp	r1, #9
 80043bc:	d92a      	bls.n	8004414 <_strtod_l+0x1bc>
 80043be:	9907      	ldr	r1, [sp, #28]
 80043c0:	462a      	mov	r2, r5
 80043c2:	f002 fedd 	bl	8007180 <strncmp>
 80043c6:	b398      	cbz	r0, 8004430 <_strtod_l+0x1d8>
 80043c8:	2000      	movs	r0, #0
 80043ca:	4633      	mov	r3, r6
 80043cc:	463d      	mov	r5, r7
 80043ce:	9007      	str	r0, [sp, #28]
 80043d0:	4602      	mov	r2, r0
 80043d2:	2b65      	cmp	r3, #101	; 0x65
 80043d4:	d001      	beq.n	80043da <_strtod_l+0x182>
 80043d6:	2b45      	cmp	r3, #69	; 0x45
 80043d8:	d118      	bne.n	800440c <_strtod_l+0x1b4>
 80043da:	b91d      	cbnz	r5, 80043e4 <_strtod_l+0x18c>
 80043dc:	9b04      	ldr	r3, [sp, #16]
 80043de:	4303      	orrs	r3, r0
 80043e0:	d098      	beq.n	8004314 <_strtod_l+0xbc>
 80043e2:	2500      	movs	r5, #0
 80043e4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80043e8:	f108 0301 	add.w	r3, r8, #1
 80043ec:	931d      	str	r3, [sp, #116]	; 0x74
 80043ee:	f898 3001 	ldrb.w	r3, [r8, #1]
 80043f2:	2b2b      	cmp	r3, #43	; 0x2b
 80043f4:	d075      	beq.n	80044e2 <_strtod_l+0x28a>
 80043f6:	2b2d      	cmp	r3, #45	; 0x2d
 80043f8:	d07b      	beq.n	80044f2 <_strtod_l+0x29a>
 80043fa:	f04f 0c00 	mov.w	ip, #0
 80043fe:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8004402:	2909      	cmp	r1, #9
 8004404:	f240 8082 	bls.w	800450c <_strtod_l+0x2b4>
 8004408:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800440c:	2600      	movs	r6, #0
 800440e:	e09d      	b.n	800454c <_strtod_l+0x2f4>
 8004410:	2300      	movs	r3, #0
 8004412:	e7c4      	b.n	800439e <_strtod_l+0x146>
 8004414:	2f08      	cmp	r7, #8
 8004416:	bfd8      	it	le
 8004418:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800441a:	f100 0001 	add.w	r0, r0, #1
 800441e:	bfda      	itte	le
 8004420:	fb02 3301 	mlale	r3, r2, r1, r3
 8004424:	9309      	strle	r3, [sp, #36]	; 0x24
 8004426:	fb02 3909 	mlagt	r9, r2, r9, r3
 800442a:	3701      	adds	r7, #1
 800442c:	901d      	str	r0, [sp, #116]	; 0x74
 800442e:	e7bf      	b.n	80043b0 <_strtod_l+0x158>
 8004430:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004432:	195a      	adds	r2, r3, r5
 8004434:	921d      	str	r2, [sp, #116]	; 0x74
 8004436:	5d5b      	ldrb	r3, [r3, r5]
 8004438:	2f00      	cmp	r7, #0
 800443a:	d037      	beq.n	80044ac <_strtod_l+0x254>
 800443c:	9007      	str	r0, [sp, #28]
 800443e:	463d      	mov	r5, r7
 8004440:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8004444:	2a09      	cmp	r2, #9
 8004446:	d912      	bls.n	800446e <_strtod_l+0x216>
 8004448:	2201      	movs	r2, #1
 800444a:	e7c2      	b.n	80043d2 <_strtod_l+0x17a>
 800444c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800444e:	1c5a      	adds	r2, r3, #1
 8004450:	921d      	str	r2, [sp, #116]	; 0x74
 8004452:	785b      	ldrb	r3, [r3, #1]
 8004454:	3001      	adds	r0, #1
 8004456:	2b30      	cmp	r3, #48	; 0x30
 8004458:	d0f8      	beq.n	800444c <_strtod_l+0x1f4>
 800445a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800445e:	2a08      	cmp	r2, #8
 8004460:	f200 84db 	bhi.w	8004e1a <_strtod_l+0xbc2>
 8004464:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8004466:	9007      	str	r0, [sp, #28]
 8004468:	2000      	movs	r0, #0
 800446a:	920a      	str	r2, [sp, #40]	; 0x28
 800446c:	4605      	mov	r5, r0
 800446e:	3b30      	subs	r3, #48	; 0x30
 8004470:	f100 0201 	add.w	r2, r0, #1
 8004474:	d014      	beq.n	80044a0 <_strtod_l+0x248>
 8004476:	9907      	ldr	r1, [sp, #28]
 8004478:	4411      	add	r1, r2
 800447a:	9107      	str	r1, [sp, #28]
 800447c:	462a      	mov	r2, r5
 800447e:	eb00 0e05 	add.w	lr, r0, r5
 8004482:	210a      	movs	r1, #10
 8004484:	4572      	cmp	r2, lr
 8004486:	d113      	bne.n	80044b0 <_strtod_l+0x258>
 8004488:	182a      	adds	r2, r5, r0
 800448a:	2a08      	cmp	r2, #8
 800448c:	f105 0501 	add.w	r5, r5, #1
 8004490:	4405      	add	r5, r0
 8004492:	dc1c      	bgt.n	80044ce <_strtod_l+0x276>
 8004494:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004496:	220a      	movs	r2, #10
 8004498:	fb02 3301 	mla	r3, r2, r1, r3
 800449c:	9309      	str	r3, [sp, #36]	; 0x24
 800449e:	2200      	movs	r2, #0
 80044a0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80044a2:	1c59      	adds	r1, r3, #1
 80044a4:	911d      	str	r1, [sp, #116]	; 0x74
 80044a6:	785b      	ldrb	r3, [r3, #1]
 80044a8:	4610      	mov	r0, r2
 80044aa:	e7c9      	b.n	8004440 <_strtod_l+0x1e8>
 80044ac:	4638      	mov	r0, r7
 80044ae:	e7d2      	b.n	8004456 <_strtod_l+0x1fe>
 80044b0:	2a08      	cmp	r2, #8
 80044b2:	dc04      	bgt.n	80044be <_strtod_l+0x266>
 80044b4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80044b6:	434e      	muls	r6, r1
 80044b8:	9609      	str	r6, [sp, #36]	; 0x24
 80044ba:	3201      	adds	r2, #1
 80044bc:	e7e2      	b.n	8004484 <_strtod_l+0x22c>
 80044be:	f102 0c01 	add.w	ip, r2, #1
 80044c2:	f1bc 0f10 	cmp.w	ip, #16
 80044c6:	bfd8      	it	le
 80044c8:	fb01 f909 	mulle.w	r9, r1, r9
 80044cc:	e7f5      	b.n	80044ba <_strtod_l+0x262>
 80044ce:	2d10      	cmp	r5, #16
 80044d0:	bfdc      	itt	le
 80044d2:	220a      	movle	r2, #10
 80044d4:	fb02 3909 	mlale	r9, r2, r9, r3
 80044d8:	e7e1      	b.n	800449e <_strtod_l+0x246>
 80044da:	2300      	movs	r3, #0
 80044dc:	9307      	str	r3, [sp, #28]
 80044de:	2201      	movs	r2, #1
 80044e0:	e77c      	b.n	80043dc <_strtod_l+0x184>
 80044e2:	f04f 0c00 	mov.w	ip, #0
 80044e6:	f108 0302 	add.w	r3, r8, #2
 80044ea:	931d      	str	r3, [sp, #116]	; 0x74
 80044ec:	f898 3002 	ldrb.w	r3, [r8, #2]
 80044f0:	e785      	b.n	80043fe <_strtod_l+0x1a6>
 80044f2:	f04f 0c01 	mov.w	ip, #1
 80044f6:	e7f6      	b.n	80044e6 <_strtod_l+0x28e>
 80044f8:	08009330 	.word	0x08009330
 80044fc:	080090dc 	.word	0x080090dc
 8004500:	7ff00000 	.word	0x7ff00000
 8004504:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004506:	1c59      	adds	r1, r3, #1
 8004508:	911d      	str	r1, [sp, #116]	; 0x74
 800450a:	785b      	ldrb	r3, [r3, #1]
 800450c:	2b30      	cmp	r3, #48	; 0x30
 800450e:	d0f9      	beq.n	8004504 <_strtod_l+0x2ac>
 8004510:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8004514:	2908      	cmp	r1, #8
 8004516:	f63f af79 	bhi.w	800440c <_strtod_l+0x1b4>
 800451a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800451e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004520:	9308      	str	r3, [sp, #32]
 8004522:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004524:	1c59      	adds	r1, r3, #1
 8004526:	911d      	str	r1, [sp, #116]	; 0x74
 8004528:	785b      	ldrb	r3, [r3, #1]
 800452a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800452e:	2e09      	cmp	r6, #9
 8004530:	d937      	bls.n	80045a2 <_strtod_l+0x34a>
 8004532:	9e08      	ldr	r6, [sp, #32]
 8004534:	1b89      	subs	r1, r1, r6
 8004536:	2908      	cmp	r1, #8
 8004538:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800453c:	dc02      	bgt.n	8004544 <_strtod_l+0x2ec>
 800453e:	4576      	cmp	r6, lr
 8004540:	bfa8      	it	ge
 8004542:	4676      	movge	r6, lr
 8004544:	f1bc 0f00 	cmp.w	ip, #0
 8004548:	d000      	beq.n	800454c <_strtod_l+0x2f4>
 800454a:	4276      	negs	r6, r6
 800454c:	2d00      	cmp	r5, #0
 800454e:	d14f      	bne.n	80045f0 <_strtod_l+0x398>
 8004550:	9904      	ldr	r1, [sp, #16]
 8004552:	4301      	orrs	r1, r0
 8004554:	f47f aec2 	bne.w	80042dc <_strtod_l+0x84>
 8004558:	2a00      	cmp	r2, #0
 800455a:	f47f aedb 	bne.w	8004314 <_strtod_l+0xbc>
 800455e:	2b69      	cmp	r3, #105	; 0x69
 8004560:	d027      	beq.n	80045b2 <_strtod_l+0x35a>
 8004562:	dc24      	bgt.n	80045ae <_strtod_l+0x356>
 8004564:	2b49      	cmp	r3, #73	; 0x49
 8004566:	d024      	beq.n	80045b2 <_strtod_l+0x35a>
 8004568:	2b4e      	cmp	r3, #78	; 0x4e
 800456a:	f47f aed3 	bne.w	8004314 <_strtod_l+0xbc>
 800456e:	499e      	ldr	r1, [pc, #632]	; (80047e8 <_strtod_l+0x590>)
 8004570:	a81d      	add	r0, sp, #116	; 0x74
 8004572:	f001 fe41 	bl	80061f8 <__match>
 8004576:	2800      	cmp	r0, #0
 8004578:	f43f aecc 	beq.w	8004314 <_strtod_l+0xbc>
 800457c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	2b28      	cmp	r3, #40	; 0x28
 8004582:	d12d      	bne.n	80045e0 <_strtod_l+0x388>
 8004584:	4999      	ldr	r1, [pc, #612]	; (80047ec <_strtod_l+0x594>)
 8004586:	aa20      	add	r2, sp, #128	; 0x80
 8004588:	a81d      	add	r0, sp, #116	; 0x74
 800458a:	f001 fe49 	bl	8006220 <__hexnan>
 800458e:	2805      	cmp	r0, #5
 8004590:	d126      	bne.n	80045e0 <_strtod_l+0x388>
 8004592:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004594:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8004598:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800459c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80045a0:	e69c      	b.n	80042dc <_strtod_l+0x84>
 80045a2:	210a      	movs	r1, #10
 80045a4:	fb01 3e0e 	mla	lr, r1, lr, r3
 80045a8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80045ac:	e7b9      	b.n	8004522 <_strtod_l+0x2ca>
 80045ae:	2b6e      	cmp	r3, #110	; 0x6e
 80045b0:	e7db      	b.n	800456a <_strtod_l+0x312>
 80045b2:	498f      	ldr	r1, [pc, #572]	; (80047f0 <_strtod_l+0x598>)
 80045b4:	a81d      	add	r0, sp, #116	; 0x74
 80045b6:	f001 fe1f 	bl	80061f8 <__match>
 80045ba:	2800      	cmp	r0, #0
 80045bc:	f43f aeaa 	beq.w	8004314 <_strtod_l+0xbc>
 80045c0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80045c2:	498c      	ldr	r1, [pc, #560]	; (80047f4 <_strtod_l+0x59c>)
 80045c4:	3b01      	subs	r3, #1
 80045c6:	a81d      	add	r0, sp, #116	; 0x74
 80045c8:	931d      	str	r3, [sp, #116]	; 0x74
 80045ca:	f001 fe15 	bl	80061f8 <__match>
 80045ce:	b910      	cbnz	r0, 80045d6 <_strtod_l+0x37e>
 80045d0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80045d2:	3301      	adds	r3, #1
 80045d4:	931d      	str	r3, [sp, #116]	; 0x74
 80045d6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8004804 <_strtod_l+0x5ac>
 80045da:	f04f 0a00 	mov.w	sl, #0
 80045de:	e67d      	b.n	80042dc <_strtod_l+0x84>
 80045e0:	4885      	ldr	r0, [pc, #532]	; (80047f8 <_strtod_l+0x5a0>)
 80045e2:	f002 fdb5 	bl	8007150 <nan>
 80045e6:	ed8d 0b04 	vstr	d0, [sp, #16]
 80045ea:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80045ee:	e675      	b.n	80042dc <_strtod_l+0x84>
 80045f0:	9b07      	ldr	r3, [sp, #28]
 80045f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80045f4:	1af3      	subs	r3, r6, r3
 80045f6:	2f00      	cmp	r7, #0
 80045f8:	bf08      	it	eq
 80045fa:	462f      	moveq	r7, r5
 80045fc:	2d10      	cmp	r5, #16
 80045fe:	9308      	str	r3, [sp, #32]
 8004600:	46a8      	mov	r8, r5
 8004602:	bfa8      	it	ge
 8004604:	f04f 0810 	movge.w	r8, #16
 8004608:	f7fb ff7c 	bl	8000504 <__aeabi_ui2d>
 800460c:	2d09      	cmp	r5, #9
 800460e:	4682      	mov	sl, r0
 8004610:	468b      	mov	fp, r1
 8004612:	dd13      	ble.n	800463c <_strtod_l+0x3e4>
 8004614:	4b79      	ldr	r3, [pc, #484]	; (80047fc <_strtod_l+0x5a4>)
 8004616:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800461a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800461e:	f7fb ffeb 	bl	80005f8 <__aeabi_dmul>
 8004622:	4682      	mov	sl, r0
 8004624:	4648      	mov	r0, r9
 8004626:	468b      	mov	fp, r1
 8004628:	f7fb ff6c 	bl	8000504 <__aeabi_ui2d>
 800462c:	4602      	mov	r2, r0
 800462e:	460b      	mov	r3, r1
 8004630:	4650      	mov	r0, sl
 8004632:	4659      	mov	r1, fp
 8004634:	f7fb fe2a 	bl	800028c <__adddf3>
 8004638:	4682      	mov	sl, r0
 800463a:	468b      	mov	fp, r1
 800463c:	2d0f      	cmp	r5, #15
 800463e:	dc38      	bgt.n	80046b2 <_strtod_l+0x45a>
 8004640:	9b08      	ldr	r3, [sp, #32]
 8004642:	2b00      	cmp	r3, #0
 8004644:	f43f ae4a 	beq.w	80042dc <_strtod_l+0x84>
 8004648:	dd24      	ble.n	8004694 <_strtod_l+0x43c>
 800464a:	2b16      	cmp	r3, #22
 800464c:	dc0b      	bgt.n	8004666 <_strtod_l+0x40e>
 800464e:	4d6b      	ldr	r5, [pc, #428]	; (80047fc <_strtod_l+0x5a4>)
 8004650:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8004654:	e9d5 0100 	ldrd	r0, r1, [r5]
 8004658:	4652      	mov	r2, sl
 800465a:	465b      	mov	r3, fp
 800465c:	f7fb ffcc 	bl	80005f8 <__aeabi_dmul>
 8004660:	4682      	mov	sl, r0
 8004662:	468b      	mov	fp, r1
 8004664:	e63a      	b.n	80042dc <_strtod_l+0x84>
 8004666:	9a08      	ldr	r2, [sp, #32]
 8004668:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800466c:	4293      	cmp	r3, r2
 800466e:	db20      	blt.n	80046b2 <_strtod_l+0x45a>
 8004670:	4c62      	ldr	r4, [pc, #392]	; (80047fc <_strtod_l+0x5a4>)
 8004672:	f1c5 050f 	rsb	r5, r5, #15
 8004676:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800467a:	4652      	mov	r2, sl
 800467c:	465b      	mov	r3, fp
 800467e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004682:	f7fb ffb9 	bl	80005f8 <__aeabi_dmul>
 8004686:	9b08      	ldr	r3, [sp, #32]
 8004688:	1b5d      	subs	r5, r3, r5
 800468a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800468e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8004692:	e7e3      	b.n	800465c <_strtod_l+0x404>
 8004694:	9b08      	ldr	r3, [sp, #32]
 8004696:	3316      	adds	r3, #22
 8004698:	db0b      	blt.n	80046b2 <_strtod_l+0x45a>
 800469a:	9b07      	ldr	r3, [sp, #28]
 800469c:	4a57      	ldr	r2, [pc, #348]	; (80047fc <_strtod_l+0x5a4>)
 800469e:	1b9e      	subs	r6, r3, r6
 80046a0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80046a4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80046a8:	4650      	mov	r0, sl
 80046aa:	4659      	mov	r1, fp
 80046ac:	f7fc f8ce 	bl	800084c <__aeabi_ddiv>
 80046b0:	e7d6      	b.n	8004660 <_strtod_l+0x408>
 80046b2:	9b08      	ldr	r3, [sp, #32]
 80046b4:	eba5 0808 	sub.w	r8, r5, r8
 80046b8:	4498      	add	r8, r3
 80046ba:	f1b8 0f00 	cmp.w	r8, #0
 80046be:	dd71      	ble.n	80047a4 <_strtod_l+0x54c>
 80046c0:	f018 030f 	ands.w	r3, r8, #15
 80046c4:	d00a      	beq.n	80046dc <_strtod_l+0x484>
 80046c6:	494d      	ldr	r1, [pc, #308]	; (80047fc <_strtod_l+0x5a4>)
 80046c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80046cc:	4652      	mov	r2, sl
 80046ce:	465b      	mov	r3, fp
 80046d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80046d4:	f7fb ff90 	bl	80005f8 <__aeabi_dmul>
 80046d8:	4682      	mov	sl, r0
 80046da:	468b      	mov	fp, r1
 80046dc:	f038 080f 	bics.w	r8, r8, #15
 80046e0:	d04d      	beq.n	800477e <_strtod_l+0x526>
 80046e2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80046e6:	dd22      	ble.n	800472e <_strtod_l+0x4d6>
 80046e8:	2500      	movs	r5, #0
 80046ea:	462e      	mov	r6, r5
 80046ec:	9509      	str	r5, [sp, #36]	; 0x24
 80046ee:	9507      	str	r5, [sp, #28]
 80046f0:	2322      	movs	r3, #34	; 0x22
 80046f2:	f8df b110 	ldr.w	fp, [pc, #272]	; 8004804 <_strtod_l+0x5ac>
 80046f6:	6023      	str	r3, [r4, #0]
 80046f8:	f04f 0a00 	mov.w	sl, #0
 80046fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046fe:	2b00      	cmp	r3, #0
 8004700:	f43f adec 	beq.w	80042dc <_strtod_l+0x84>
 8004704:	991e      	ldr	r1, [sp, #120]	; 0x78
 8004706:	4620      	mov	r0, r4
 8004708:	f001 fe92 	bl	8006430 <_Bfree>
 800470c:	9907      	ldr	r1, [sp, #28]
 800470e:	4620      	mov	r0, r4
 8004710:	f001 fe8e 	bl	8006430 <_Bfree>
 8004714:	4631      	mov	r1, r6
 8004716:	4620      	mov	r0, r4
 8004718:	f001 fe8a 	bl	8006430 <_Bfree>
 800471c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800471e:	4620      	mov	r0, r4
 8004720:	f001 fe86 	bl	8006430 <_Bfree>
 8004724:	4629      	mov	r1, r5
 8004726:	4620      	mov	r0, r4
 8004728:	f001 fe82 	bl	8006430 <_Bfree>
 800472c:	e5d6      	b.n	80042dc <_strtod_l+0x84>
 800472e:	2300      	movs	r3, #0
 8004730:	ea4f 1828 	mov.w	r8, r8, asr #4
 8004734:	4650      	mov	r0, sl
 8004736:	4659      	mov	r1, fp
 8004738:	4699      	mov	r9, r3
 800473a:	f1b8 0f01 	cmp.w	r8, #1
 800473e:	dc21      	bgt.n	8004784 <_strtod_l+0x52c>
 8004740:	b10b      	cbz	r3, 8004746 <_strtod_l+0x4ee>
 8004742:	4682      	mov	sl, r0
 8004744:	468b      	mov	fp, r1
 8004746:	4b2e      	ldr	r3, [pc, #184]	; (8004800 <_strtod_l+0x5a8>)
 8004748:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800474c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8004750:	4652      	mov	r2, sl
 8004752:	465b      	mov	r3, fp
 8004754:	e9d9 0100 	ldrd	r0, r1, [r9]
 8004758:	f7fb ff4e 	bl	80005f8 <__aeabi_dmul>
 800475c:	4b29      	ldr	r3, [pc, #164]	; (8004804 <_strtod_l+0x5ac>)
 800475e:	460a      	mov	r2, r1
 8004760:	400b      	ands	r3, r1
 8004762:	4929      	ldr	r1, [pc, #164]	; (8004808 <_strtod_l+0x5b0>)
 8004764:	428b      	cmp	r3, r1
 8004766:	4682      	mov	sl, r0
 8004768:	d8be      	bhi.n	80046e8 <_strtod_l+0x490>
 800476a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800476e:	428b      	cmp	r3, r1
 8004770:	bf86      	itte	hi
 8004772:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800480c <_strtod_l+0x5b4>
 8004776:	f04f 3aff 	movhi.w	sl, #4294967295
 800477a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800477e:	2300      	movs	r3, #0
 8004780:	9304      	str	r3, [sp, #16]
 8004782:	e081      	b.n	8004888 <_strtod_l+0x630>
 8004784:	f018 0f01 	tst.w	r8, #1
 8004788:	d007      	beq.n	800479a <_strtod_l+0x542>
 800478a:	4b1d      	ldr	r3, [pc, #116]	; (8004800 <_strtod_l+0x5a8>)
 800478c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8004790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004794:	f7fb ff30 	bl	80005f8 <__aeabi_dmul>
 8004798:	2301      	movs	r3, #1
 800479a:	f109 0901 	add.w	r9, r9, #1
 800479e:	ea4f 0868 	mov.w	r8, r8, asr #1
 80047a2:	e7ca      	b.n	800473a <_strtod_l+0x4e2>
 80047a4:	d0eb      	beq.n	800477e <_strtod_l+0x526>
 80047a6:	f1c8 0800 	rsb	r8, r8, #0
 80047aa:	f018 020f 	ands.w	r2, r8, #15
 80047ae:	d00a      	beq.n	80047c6 <_strtod_l+0x56e>
 80047b0:	4b12      	ldr	r3, [pc, #72]	; (80047fc <_strtod_l+0x5a4>)
 80047b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80047b6:	4650      	mov	r0, sl
 80047b8:	4659      	mov	r1, fp
 80047ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047be:	f7fc f845 	bl	800084c <__aeabi_ddiv>
 80047c2:	4682      	mov	sl, r0
 80047c4:	468b      	mov	fp, r1
 80047c6:	ea5f 1828 	movs.w	r8, r8, asr #4
 80047ca:	d0d8      	beq.n	800477e <_strtod_l+0x526>
 80047cc:	f1b8 0f1f 	cmp.w	r8, #31
 80047d0:	dd1e      	ble.n	8004810 <_strtod_l+0x5b8>
 80047d2:	2500      	movs	r5, #0
 80047d4:	462e      	mov	r6, r5
 80047d6:	9509      	str	r5, [sp, #36]	; 0x24
 80047d8:	9507      	str	r5, [sp, #28]
 80047da:	2322      	movs	r3, #34	; 0x22
 80047dc:	f04f 0a00 	mov.w	sl, #0
 80047e0:	f04f 0b00 	mov.w	fp, #0
 80047e4:	6023      	str	r3, [r4, #0]
 80047e6:	e789      	b.n	80046fc <_strtod_l+0x4a4>
 80047e8:	080090ad 	.word	0x080090ad
 80047ec:	080090f0 	.word	0x080090f0
 80047f0:	080090a5 	.word	0x080090a5
 80047f4:	08009234 	.word	0x08009234
 80047f8:	080094f0 	.word	0x080094f0
 80047fc:	080093d0 	.word	0x080093d0
 8004800:	080093a8 	.word	0x080093a8
 8004804:	7ff00000 	.word	0x7ff00000
 8004808:	7ca00000 	.word	0x7ca00000
 800480c:	7fefffff 	.word	0x7fefffff
 8004810:	f018 0310 	ands.w	r3, r8, #16
 8004814:	bf18      	it	ne
 8004816:	236a      	movne	r3, #106	; 0x6a
 8004818:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8004bd0 <_strtod_l+0x978>
 800481c:	9304      	str	r3, [sp, #16]
 800481e:	4650      	mov	r0, sl
 8004820:	4659      	mov	r1, fp
 8004822:	2300      	movs	r3, #0
 8004824:	f018 0f01 	tst.w	r8, #1
 8004828:	d004      	beq.n	8004834 <_strtod_l+0x5dc>
 800482a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800482e:	f7fb fee3 	bl	80005f8 <__aeabi_dmul>
 8004832:	2301      	movs	r3, #1
 8004834:	ea5f 0868 	movs.w	r8, r8, asr #1
 8004838:	f109 0908 	add.w	r9, r9, #8
 800483c:	d1f2      	bne.n	8004824 <_strtod_l+0x5cc>
 800483e:	b10b      	cbz	r3, 8004844 <_strtod_l+0x5ec>
 8004840:	4682      	mov	sl, r0
 8004842:	468b      	mov	fp, r1
 8004844:	9b04      	ldr	r3, [sp, #16]
 8004846:	b1bb      	cbz	r3, 8004878 <_strtod_l+0x620>
 8004848:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800484c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004850:	2b00      	cmp	r3, #0
 8004852:	4659      	mov	r1, fp
 8004854:	dd10      	ble.n	8004878 <_strtod_l+0x620>
 8004856:	2b1f      	cmp	r3, #31
 8004858:	f340 8128 	ble.w	8004aac <_strtod_l+0x854>
 800485c:	2b34      	cmp	r3, #52	; 0x34
 800485e:	bfde      	ittt	le
 8004860:	3b20      	suble	r3, #32
 8004862:	f04f 32ff 	movle.w	r2, #4294967295
 8004866:	fa02 f303 	lslle.w	r3, r2, r3
 800486a:	f04f 0a00 	mov.w	sl, #0
 800486e:	bfcc      	ite	gt
 8004870:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8004874:	ea03 0b01 	andle.w	fp, r3, r1
 8004878:	2200      	movs	r2, #0
 800487a:	2300      	movs	r3, #0
 800487c:	4650      	mov	r0, sl
 800487e:	4659      	mov	r1, fp
 8004880:	f7fc f922 	bl	8000ac8 <__aeabi_dcmpeq>
 8004884:	2800      	cmp	r0, #0
 8004886:	d1a4      	bne.n	80047d2 <_strtod_l+0x57a>
 8004888:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800488a:	9300      	str	r3, [sp, #0]
 800488c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800488e:	462b      	mov	r3, r5
 8004890:	463a      	mov	r2, r7
 8004892:	4620      	mov	r0, r4
 8004894:	f001 fe38 	bl	8006508 <__s2b>
 8004898:	9009      	str	r0, [sp, #36]	; 0x24
 800489a:	2800      	cmp	r0, #0
 800489c:	f43f af24 	beq.w	80046e8 <_strtod_l+0x490>
 80048a0:	9b07      	ldr	r3, [sp, #28]
 80048a2:	1b9e      	subs	r6, r3, r6
 80048a4:	9b08      	ldr	r3, [sp, #32]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	bfb4      	ite	lt
 80048aa:	4633      	movlt	r3, r6
 80048ac:	2300      	movge	r3, #0
 80048ae:	9310      	str	r3, [sp, #64]	; 0x40
 80048b0:	9b08      	ldr	r3, [sp, #32]
 80048b2:	2500      	movs	r5, #0
 80048b4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80048b8:	9318      	str	r3, [sp, #96]	; 0x60
 80048ba:	462e      	mov	r6, r5
 80048bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048be:	4620      	mov	r0, r4
 80048c0:	6859      	ldr	r1, [r3, #4]
 80048c2:	f001 fd75 	bl	80063b0 <_Balloc>
 80048c6:	9007      	str	r0, [sp, #28]
 80048c8:	2800      	cmp	r0, #0
 80048ca:	f43f af11 	beq.w	80046f0 <_strtod_l+0x498>
 80048ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048d0:	691a      	ldr	r2, [r3, #16]
 80048d2:	3202      	adds	r2, #2
 80048d4:	f103 010c 	add.w	r1, r3, #12
 80048d8:	0092      	lsls	r2, r2, #2
 80048da:	300c      	adds	r0, #12
 80048dc:	f001 fd5a 	bl	8006394 <memcpy>
 80048e0:	ec4b ab10 	vmov	d0, sl, fp
 80048e4:	aa20      	add	r2, sp, #128	; 0x80
 80048e6:	a91f      	add	r1, sp, #124	; 0x7c
 80048e8:	4620      	mov	r0, r4
 80048ea:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80048ee:	f002 f947 	bl	8006b80 <__d2b>
 80048f2:	901e      	str	r0, [sp, #120]	; 0x78
 80048f4:	2800      	cmp	r0, #0
 80048f6:	f43f aefb 	beq.w	80046f0 <_strtod_l+0x498>
 80048fa:	2101      	movs	r1, #1
 80048fc:	4620      	mov	r0, r4
 80048fe:	f001 fe9d 	bl	800663c <__i2b>
 8004902:	4606      	mov	r6, r0
 8004904:	2800      	cmp	r0, #0
 8004906:	f43f aef3 	beq.w	80046f0 <_strtod_l+0x498>
 800490a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800490c:	9904      	ldr	r1, [sp, #16]
 800490e:	2b00      	cmp	r3, #0
 8004910:	bfab      	itete	ge
 8004912:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8004914:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8004916:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8004918:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800491c:	bfac      	ite	ge
 800491e:	eb03 0902 	addge.w	r9, r3, r2
 8004922:	1ad7      	sublt	r7, r2, r3
 8004924:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004926:	eba3 0801 	sub.w	r8, r3, r1
 800492a:	4490      	add	r8, r2
 800492c:	4ba3      	ldr	r3, [pc, #652]	; (8004bbc <_strtod_l+0x964>)
 800492e:	f108 38ff 	add.w	r8, r8, #4294967295
 8004932:	4598      	cmp	r8, r3
 8004934:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004938:	f280 80cc 	bge.w	8004ad4 <_strtod_l+0x87c>
 800493c:	eba3 0308 	sub.w	r3, r3, r8
 8004940:	2b1f      	cmp	r3, #31
 8004942:	eba2 0203 	sub.w	r2, r2, r3
 8004946:	f04f 0101 	mov.w	r1, #1
 800494a:	f300 80b6 	bgt.w	8004aba <_strtod_l+0x862>
 800494e:	fa01 f303 	lsl.w	r3, r1, r3
 8004952:	9311      	str	r3, [sp, #68]	; 0x44
 8004954:	2300      	movs	r3, #0
 8004956:	930c      	str	r3, [sp, #48]	; 0x30
 8004958:	eb09 0802 	add.w	r8, r9, r2
 800495c:	9b04      	ldr	r3, [sp, #16]
 800495e:	45c1      	cmp	r9, r8
 8004960:	4417      	add	r7, r2
 8004962:	441f      	add	r7, r3
 8004964:	464b      	mov	r3, r9
 8004966:	bfa8      	it	ge
 8004968:	4643      	movge	r3, r8
 800496a:	42bb      	cmp	r3, r7
 800496c:	bfa8      	it	ge
 800496e:	463b      	movge	r3, r7
 8004970:	2b00      	cmp	r3, #0
 8004972:	bfc2      	ittt	gt
 8004974:	eba8 0803 	subgt.w	r8, r8, r3
 8004978:	1aff      	subgt	r7, r7, r3
 800497a:	eba9 0903 	subgt.w	r9, r9, r3
 800497e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004980:	2b00      	cmp	r3, #0
 8004982:	dd17      	ble.n	80049b4 <_strtod_l+0x75c>
 8004984:	4631      	mov	r1, r6
 8004986:	461a      	mov	r2, r3
 8004988:	4620      	mov	r0, r4
 800498a:	f001 ff13 	bl	80067b4 <__pow5mult>
 800498e:	4606      	mov	r6, r0
 8004990:	2800      	cmp	r0, #0
 8004992:	f43f aead 	beq.w	80046f0 <_strtod_l+0x498>
 8004996:	4601      	mov	r1, r0
 8004998:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800499a:	4620      	mov	r0, r4
 800499c:	f001 fe64 	bl	8006668 <__multiply>
 80049a0:	900f      	str	r0, [sp, #60]	; 0x3c
 80049a2:	2800      	cmp	r0, #0
 80049a4:	f43f aea4 	beq.w	80046f0 <_strtod_l+0x498>
 80049a8:	991e      	ldr	r1, [sp, #120]	; 0x78
 80049aa:	4620      	mov	r0, r4
 80049ac:	f001 fd40 	bl	8006430 <_Bfree>
 80049b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80049b2:	931e      	str	r3, [sp, #120]	; 0x78
 80049b4:	f1b8 0f00 	cmp.w	r8, #0
 80049b8:	f300 8091 	bgt.w	8004ade <_strtod_l+0x886>
 80049bc:	9b08      	ldr	r3, [sp, #32]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	dd08      	ble.n	80049d4 <_strtod_l+0x77c>
 80049c2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80049c4:	9907      	ldr	r1, [sp, #28]
 80049c6:	4620      	mov	r0, r4
 80049c8:	f001 fef4 	bl	80067b4 <__pow5mult>
 80049cc:	9007      	str	r0, [sp, #28]
 80049ce:	2800      	cmp	r0, #0
 80049d0:	f43f ae8e 	beq.w	80046f0 <_strtod_l+0x498>
 80049d4:	2f00      	cmp	r7, #0
 80049d6:	dd08      	ble.n	80049ea <_strtod_l+0x792>
 80049d8:	9907      	ldr	r1, [sp, #28]
 80049da:	463a      	mov	r2, r7
 80049dc:	4620      	mov	r0, r4
 80049de:	f001 ff43 	bl	8006868 <__lshift>
 80049e2:	9007      	str	r0, [sp, #28]
 80049e4:	2800      	cmp	r0, #0
 80049e6:	f43f ae83 	beq.w	80046f0 <_strtod_l+0x498>
 80049ea:	f1b9 0f00 	cmp.w	r9, #0
 80049ee:	dd08      	ble.n	8004a02 <_strtod_l+0x7aa>
 80049f0:	4631      	mov	r1, r6
 80049f2:	464a      	mov	r2, r9
 80049f4:	4620      	mov	r0, r4
 80049f6:	f001 ff37 	bl	8006868 <__lshift>
 80049fa:	4606      	mov	r6, r0
 80049fc:	2800      	cmp	r0, #0
 80049fe:	f43f ae77 	beq.w	80046f0 <_strtod_l+0x498>
 8004a02:	9a07      	ldr	r2, [sp, #28]
 8004a04:	991e      	ldr	r1, [sp, #120]	; 0x78
 8004a06:	4620      	mov	r0, r4
 8004a08:	f001 ffb6 	bl	8006978 <__mdiff>
 8004a0c:	4605      	mov	r5, r0
 8004a0e:	2800      	cmp	r0, #0
 8004a10:	f43f ae6e 	beq.w	80046f0 <_strtod_l+0x498>
 8004a14:	68c3      	ldr	r3, [r0, #12]
 8004a16:	930f      	str	r3, [sp, #60]	; 0x3c
 8004a18:	2300      	movs	r3, #0
 8004a1a:	60c3      	str	r3, [r0, #12]
 8004a1c:	4631      	mov	r1, r6
 8004a1e:	f001 ff8f 	bl	8006940 <__mcmp>
 8004a22:	2800      	cmp	r0, #0
 8004a24:	da65      	bge.n	8004af2 <_strtod_l+0x89a>
 8004a26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004a28:	ea53 030a 	orrs.w	r3, r3, sl
 8004a2c:	f040 8087 	bne.w	8004b3e <_strtod_l+0x8e6>
 8004a30:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	f040 8082 	bne.w	8004b3e <_strtod_l+0x8e6>
 8004a3a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004a3e:	0d1b      	lsrs	r3, r3, #20
 8004a40:	051b      	lsls	r3, r3, #20
 8004a42:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004a46:	d97a      	bls.n	8004b3e <_strtod_l+0x8e6>
 8004a48:	696b      	ldr	r3, [r5, #20]
 8004a4a:	b913      	cbnz	r3, 8004a52 <_strtod_l+0x7fa>
 8004a4c:	692b      	ldr	r3, [r5, #16]
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	dd75      	ble.n	8004b3e <_strtod_l+0x8e6>
 8004a52:	4629      	mov	r1, r5
 8004a54:	2201      	movs	r2, #1
 8004a56:	4620      	mov	r0, r4
 8004a58:	f001 ff06 	bl	8006868 <__lshift>
 8004a5c:	4631      	mov	r1, r6
 8004a5e:	4605      	mov	r5, r0
 8004a60:	f001 ff6e 	bl	8006940 <__mcmp>
 8004a64:	2800      	cmp	r0, #0
 8004a66:	dd6a      	ble.n	8004b3e <_strtod_l+0x8e6>
 8004a68:	9904      	ldr	r1, [sp, #16]
 8004a6a:	4a55      	ldr	r2, [pc, #340]	; (8004bc0 <_strtod_l+0x968>)
 8004a6c:	465b      	mov	r3, fp
 8004a6e:	2900      	cmp	r1, #0
 8004a70:	f000 8085 	beq.w	8004b7e <_strtod_l+0x926>
 8004a74:	ea02 010b 	and.w	r1, r2, fp
 8004a78:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8004a7c:	dc7f      	bgt.n	8004b7e <_strtod_l+0x926>
 8004a7e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8004a82:	f77f aeaa 	ble.w	80047da <_strtod_l+0x582>
 8004a86:	4a4f      	ldr	r2, [pc, #316]	; (8004bc4 <_strtod_l+0x96c>)
 8004a88:	2300      	movs	r3, #0
 8004a8a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8004a8e:	4650      	mov	r0, sl
 8004a90:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8004a94:	4659      	mov	r1, fp
 8004a96:	f7fb fdaf 	bl	80005f8 <__aeabi_dmul>
 8004a9a:	460b      	mov	r3, r1
 8004a9c:	4303      	orrs	r3, r0
 8004a9e:	bf08      	it	eq
 8004aa0:	2322      	moveq	r3, #34	; 0x22
 8004aa2:	4682      	mov	sl, r0
 8004aa4:	468b      	mov	fp, r1
 8004aa6:	bf08      	it	eq
 8004aa8:	6023      	streq	r3, [r4, #0]
 8004aaa:	e62b      	b.n	8004704 <_strtod_l+0x4ac>
 8004aac:	f04f 32ff 	mov.w	r2, #4294967295
 8004ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab4:	ea03 0a0a 	and.w	sl, r3, sl
 8004ab8:	e6de      	b.n	8004878 <_strtod_l+0x620>
 8004aba:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8004abe:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8004ac2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8004ac6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8004aca:	fa01 f308 	lsl.w	r3, r1, r8
 8004ace:	930c      	str	r3, [sp, #48]	; 0x30
 8004ad0:	9111      	str	r1, [sp, #68]	; 0x44
 8004ad2:	e741      	b.n	8004958 <_strtod_l+0x700>
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	930c      	str	r3, [sp, #48]	; 0x30
 8004ad8:	2301      	movs	r3, #1
 8004ada:	9311      	str	r3, [sp, #68]	; 0x44
 8004adc:	e73c      	b.n	8004958 <_strtod_l+0x700>
 8004ade:	991e      	ldr	r1, [sp, #120]	; 0x78
 8004ae0:	4642      	mov	r2, r8
 8004ae2:	4620      	mov	r0, r4
 8004ae4:	f001 fec0 	bl	8006868 <__lshift>
 8004ae8:	901e      	str	r0, [sp, #120]	; 0x78
 8004aea:	2800      	cmp	r0, #0
 8004aec:	f47f af66 	bne.w	80049bc <_strtod_l+0x764>
 8004af0:	e5fe      	b.n	80046f0 <_strtod_l+0x498>
 8004af2:	465f      	mov	r7, fp
 8004af4:	d16e      	bne.n	8004bd4 <_strtod_l+0x97c>
 8004af6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004af8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004afc:	b342      	cbz	r2, 8004b50 <_strtod_l+0x8f8>
 8004afe:	4a32      	ldr	r2, [pc, #200]	; (8004bc8 <_strtod_l+0x970>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d128      	bne.n	8004b56 <_strtod_l+0x8fe>
 8004b04:	9b04      	ldr	r3, [sp, #16]
 8004b06:	4650      	mov	r0, sl
 8004b08:	b1eb      	cbz	r3, 8004b46 <_strtod_l+0x8ee>
 8004b0a:	4a2d      	ldr	r2, [pc, #180]	; (8004bc0 <_strtod_l+0x968>)
 8004b0c:	403a      	ands	r2, r7
 8004b0e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8004b12:	f04f 31ff 	mov.w	r1, #4294967295
 8004b16:	d819      	bhi.n	8004b4c <_strtod_l+0x8f4>
 8004b18:	0d12      	lsrs	r2, r2, #20
 8004b1a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b22:	4298      	cmp	r0, r3
 8004b24:	d117      	bne.n	8004b56 <_strtod_l+0x8fe>
 8004b26:	4b29      	ldr	r3, [pc, #164]	; (8004bcc <_strtod_l+0x974>)
 8004b28:	429f      	cmp	r7, r3
 8004b2a:	d102      	bne.n	8004b32 <_strtod_l+0x8da>
 8004b2c:	3001      	adds	r0, #1
 8004b2e:	f43f addf 	beq.w	80046f0 <_strtod_l+0x498>
 8004b32:	4b23      	ldr	r3, [pc, #140]	; (8004bc0 <_strtod_l+0x968>)
 8004b34:	403b      	ands	r3, r7
 8004b36:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8004b3a:	f04f 0a00 	mov.w	sl, #0
 8004b3e:	9b04      	ldr	r3, [sp, #16]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d1a0      	bne.n	8004a86 <_strtod_l+0x82e>
 8004b44:	e5de      	b.n	8004704 <_strtod_l+0x4ac>
 8004b46:	f04f 33ff 	mov.w	r3, #4294967295
 8004b4a:	e7ea      	b.n	8004b22 <_strtod_l+0x8ca>
 8004b4c:	460b      	mov	r3, r1
 8004b4e:	e7e8      	b.n	8004b22 <_strtod_l+0x8ca>
 8004b50:	ea53 030a 	orrs.w	r3, r3, sl
 8004b54:	d088      	beq.n	8004a68 <_strtod_l+0x810>
 8004b56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004b58:	b1db      	cbz	r3, 8004b92 <_strtod_l+0x93a>
 8004b5a:	423b      	tst	r3, r7
 8004b5c:	d0ef      	beq.n	8004b3e <_strtod_l+0x8e6>
 8004b5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004b60:	9a04      	ldr	r2, [sp, #16]
 8004b62:	4650      	mov	r0, sl
 8004b64:	4659      	mov	r1, fp
 8004b66:	b1c3      	cbz	r3, 8004b9a <_strtod_l+0x942>
 8004b68:	f7ff fb58 	bl	800421c <sulp>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	460b      	mov	r3, r1
 8004b70:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004b74:	f7fb fb8a 	bl	800028c <__adddf3>
 8004b78:	4682      	mov	sl, r0
 8004b7a:	468b      	mov	fp, r1
 8004b7c:	e7df      	b.n	8004b3e <_strtod_l+0x8e6>
 8004b7e:	4013      	ands	r3, r2
 8004b80:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8004b84:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8004b88:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8004b8c:	f04f 3aff 	mov.w	sl, #4294967295
 8004b90:	e7d5      	b.n	8004b3e <_strtod_l+0x8e6>
 8004b92:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004b94:	ea13 0f0a 	tst.w	r3, sl
 8004b98:	e7e0      	b.n	8004b5c <_strtod_l+0x904>
 8004b9a:	f7ff fb3f 	bl	800421c <sulp>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004ba6:	f7fb fb6f 	bl	8000288 <__aeabi_dsub>
 8004baa:	2200      	movs	r2, #0
 8004bac:	2300      	movs	r3, #0
 8004bae:	4682      	mov	sl, r0
 8004bb0:	468b      	mov	fp, r1
 8004bb2:	f7fb ff89 	bl	8000ac8 <__aeabi_dcmpeq>
 8004bb6:	2800      	cmp	r0, #0
 8004bb8:	d0c1      	beq.n	8004b3e <_strtod_l+0x8e6>
 8004bba:	e60e      	b.n	80047da <_strtod_l+0x582>
 8004bbc:	fffffc02 	.word	0xfffffc02
 8004bc0:	7ff00000 	.word	0x7ff00000
 8004bc4:	39500000 	.word	0x39500000
 8004bc8:	000fffff 	.word	0x000fffff
 8004bcc:	7fefffff 	.word	0x7fefffff
 8004bd0:	08009108 	.word	0x08009108
 8004bd4:	4631      	mov	r1, r6
 8004bd6:	4628      	mov	r0, r5
 8004bd8:	f002 f82e 	bl	8006c38 <__ratio>
 8004bdc:	ec59 8b10 	vmov	r8, r9, d0
 8004be0:	ee10 0a10 	vmov	r0, s0
 8004be4:	2200      	movs	r2, #0
 8004be6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004bea:	4649      	mov	r1, r9
 8004bec:	f7fb ff80 	bl	8000af0 <__aeabi_dcmple>
 8004bf0:	2800      	cmp	r0, #0
 8004bf2:	d07c      	beq.n	8004cee <_strtod_l+0xa96>
 8004bf4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d04c      	beq.n	8004c94 <_strtod_l+0xa3c>
 8004bfa:	4b95      	ldr	r3, [pc, #596]	; (8004e50 <_strtod_l+0xbf8>)
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8004c02:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8004e50 <_strtod_l+0xbf8>
 8004c06:	f04f 0800 	mov.w	r8, #0
 8004c0a:	4b92      	ldr	r3, [pc, #584]	; (8004e54 <_strtod_l+0xbfc>)
 8004c0c:	403b      	ands	r3, r7
 8004c0e:	9311      	str	r3, [sp, #68]	; 0x44
 8004c10:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004c12:	4b91      	ldr	r3, [pc, #580]	; (8004e58 <_strtod_l+0xc00>)
 8004c14:	429a      	cmp	r2, r3
 8004c16:	f040 80b2 	bne.w	8004d7e <_strtod_l+0xb26>
 8004c1a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004c1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004c22:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8004c26:	ec4b ab10 	vmov	d0, sl, fp
 8004c2a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8004c2e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004c32:	f001 ff29 	bl	8006a88 <__ulp>
 8004c36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004c3a:	ec53 2b10 	vmov	r2, r3, d0
 8004c3e:	f7fb fcdb 	bl	80005f8 <__aeabi_dmul>
 8004c42:	4652      	mov	r2, sl
 8004c44:	465b      	mov	r3, fp
 8004c46:	f7fb fb21 	bl	800028c <__adddf3>
 8004c4a:	460b      	mov	r3, r1
 8004c4c:	4981      	ldr	r1, [pc, #516]	; (8004e54 <_strtod_l+0xbfc>)
 8004c4e:	4a83      	ldr	r2, [pc, #524]	; (8004e5c <_strtod_l+0xc04>)
 8004c50:	4019      	ands	r1, r3
 8004c52:	4291      	cmp	r1, r2
 8004c54:	4682      	mov	sl, r0
 8004c56:	d95e      	bls.n	8004d16 <_strtod_l+0xabe>
 8004c58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c5a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d103      	bne.n	8004c6a <_strtod_l+0xa12>
 8004c62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c64:	3301      	adds	r3, #1
 8004c66:	f43f ad43 	beq.w	80046f0 <_strtod_l+0x498>
 8004c6a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8004e68 <_strtod_l+0xc10>
 8004c6e:	f04f 3aff 	mov.w	sl, #4294967295
 8004c72:	991e      	ldr	r1, [sp, #120]	; 0x78
 8004c74:	4620      	mov	r0, r4
 8004c76:	f001 fbdb 	bl	8006430 <_Bfree>
 8004c7a:	9907      	ldr	r1, [sp, #28]
 8004c7c:	4620      	mov	r0, r4
 8004c7e:	f001 fbd7 	bl	8006430 <_Bfree>
 8004c82:	4631      	mov	r1, r6
 8004c84:	4620      	mov	r0, r4
 8004c86:	f001 fbd3 	bl	8006430 <_Bfree>
 8004c8a:	4629      	mov	r1, r5
 8004c8c:	4620      	mov	r0, r4
 8004c8e:	f001 fbcf 	bl	8006430 <_Bfree>
 8004c92:	e613      	b.n	80048bc <_strtod_l+0x664>
 8004c94:	f1ba 0f00 	cmp.w	sl, #0
 8004c98:	d11b      	bne.n	8004cd2 <_strtod_l+0xa7a>
 8004c9a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004c9e:	b9f3      	cbnz	r3, 8004cde <_strtod_l+0xa86>
 8004ca0:	4b6b      	ldr	r3, [pc, #428]	; (8004e50 <_strtod_l+0xbf8>)
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	4640      	mov	r0, r8
 8004ca6:	4649      	mov	r1, r9
 8004ca8:	f7fb ff18 	bl	8000adc <__aeabi_dcmplt>
 8004cac:	b9d0      	cbnz	r0, 8004ce4 <_strtod_l+0xa8c>
 8004cae:	4640      	mov	r0, r8
 8004cb0:	4649      	mov	r1, r9
 8004cb2:	4b6b      	ldr	r3, [pc, #428]	; (8004e60 <_strtod_l+0xc08>)
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f7fb fc9f 	bl	80005f8 <__aeabi_dmul>
 8004cba:	4680      	mov	r8, r0
 8004cbc:	4689      	mov	r9, r1
 8004cbe:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004cc2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8004cc6:	931b      	str	r3, [sp, #108]	; 0x6c
 8004cc8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8004ccc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8004cd0:	e79b      	b.n	8004c0a <_strtod_l+0x9b2>
 8004cd2:	f1ba 0f01 	cmp.w	sl, #1
 8004cd6:	d102      	bne.n	8004cde <_strtod_l+0xa86>
 8004cd8:	2f00      	cmp	r7, #0
 8004cda:	f43f ad7e 	beq.w	80047da <_strtod_l+0x582>
 8004cde:	4b61      	ldr	r3, [pc, #388]	; (8004e64 <_strtod_l+0xc0c>)
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	e78c      	b.n	8004bfe <_strtod_l+0x9a6>
 8004ce4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8004e60 <_strtod_l+0xc08>
 8004ce8:	f04f 0800 	mov.w	r8, #0
 8004cec:	e7e7      	b.n	8004cbe <_strtod_l+0xa66>
 8004cee:	4b5c      	ldr	r3, [pc, #368]	; (8004e60 <_strtod_l+0xc08>)
 8004cf0:	4640      	mov	r0, r8
 8004cf2:	4649      	mov	r1, r9
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f7fb fc7f 	bl	80005f8 <__aeabi_dmul>
 8004cfa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004cfc:	4680      	mov	r8, r0
 8004cfe:	4689      	mov	r9, r1
 8004d00:	b933      	cbnz	r3, 8004d10 <_strtod_l+0xab8>
 8004d02:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004d06:	9012      	str	r0, [sp, #72]	; 0x48
 8004d08:	9313      	str	r3, [sp, #76]	; 0x4c
 8004d0a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8004d0e:	e7dd      	b.n	8004ccc <_strtod_l+0xa74>
 8004d10:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8004d14:	e7f9      	b.n	8004d0a <_strtod_l+0xab2>
 8004d16:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8004d1a:	9b04      	ldr	r3, [sp, #16]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d1a8      	bne.n	8004c72 <_strtod_l+0xa1a>
 8004d20:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004d24:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004d26:	0d1b      	lsrs	r3, r3, #20
 8004d28:	051b      	lsls	r3, r3, #20
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d1a1      	bne.n	8004c72 <_strtod_l+0xa1a>
 8004d2e:	4640      	mov	r0, r8
 8004d30:	4649      	mov	r1, r9
 8004d32:	f7fb ffc1 	bl	8000cb8 <__aeabi_d2lz>
 8004d36:	f7fb fc31 	bl	800059c <__aeabi_l2d>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	4640      	mov	r0, r8
 8004d40:	4649      	mov	r1, r9
 8004d42:	f7fb faa1 	bl	8000288 <__aeabi_dsub>
 8004d46:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004d48:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004d4c:	ea43 030a 	orr.w	r3, r3, sl
 8004d50:	4313      	orrs	r3, r2
 8004d52:	4680      	mov	r8, r0
 8004d54:	4689      	mov	r9, r1
 8004d56:	d053      	beq.n	8004e00 <_strtod_l+0xba8>
 8004d58:	a335      	add	r3, pc, #212	; (adr r3, 8004e30 <_strtod_l+0xbd8>)
 8004d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d5e:	f7fb febd 	bl	8000adc <__aeabi_dcmplt>
 8004d62:	2800      	cmp	r0, #0
 8004d64:	f47f acce 	bne.w	8004704 <_strtod_l+0x4ac>
 8004d68:	a333      	add	r3, pc, #204	; (adr r3, 8004e38 <_strtod_l+0xbe0>)
 8004d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d6e:	4640      	mov	r0, r8
 8004d70:	4649      	mov	r1, r9
 8004d72:	f7fb fed1 	bl	8000b18 <__aeabi_dcmpgt>
 8004d76:	2800      	cmp	r0, #0
 8004d78:	f43f af7b 	beq.w	8004c72 <_strtod_l+0xa1a>
 8004d7c:	e4c2      	b.n	8004704 <_strtod_l+0x4ac>
 8004d7e:	9b04      	ldr	r3, [sp, #16]
 8004d80:	b333      	cbz	r3, 8004dd0 <_strtod_l+0xb78>
 8004d82:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004d84:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004d88:	d822      	bhi.n	8004dd0 <_strtod_l+0xb78>
 8004d8a:	a32d      	add	r3, pc, #180	; (adr r3, 8004e40 <_strtod_l+0xbe8>)
 8004d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d90:	4640      	mov	r0, r8
 8004d92:	4649      	mov	r1, r9
 8004d94:	f7fb feac 	bl	8000af0 <__aeabi_dcmple>
 8004d98:	b1a0      	cbz	r0, 8004dc4 <_strtod_l+0xb6c>
 8004d9a:	4649      	mov	r1, r9
 8004d9c:	4640      	mov	r0, r8
 8004d9e:	f7fb ff03 	bl	8000ba8 <__aeabi_d2uiz>
 8004da2:	2801      	cmp	r0, #1
 8004da4:	bf38      	it	cc
 8004da6:	2001      	movcc	r0, #1
 8004da8:	f7fb fbac 	bl	8000504 <__aeabi_ui2d>
 8004dac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004dae:	4680      	mov	r8, r0
 8004db0:	4689      	mov	r9, r1
 8004db2:	bb13      	cbnz	r3, 8004dfa <_strtod_l+0xba2>
 8004db4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004db8:	9014      	str	r0, [sp, #80]	; 0x50
 8004dba:	9315      	str	r3, [sp, #84]	; 0x54
 8004dbc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8004dc0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8004dc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004dc6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004dc8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8004dcc:	1a9b      	subs	r3, r3, r2
 8004dce:	930d      	str	r3, [sp, #52]	; 0x34
 8004dd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004dd4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8004dd8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004ddc:	f001 fe54 	bl	8006a88 <__ulp>
 8004de0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004de4:	ec53 2b10 	vmov	r2, r3, d0
 8004de8:	f7fb fc06 	bl	80005f8 <__aeabi_dmul>
 8004dec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004df0:	f7fb fa4c 	bl	800028c <__adddf3>
 8004df4:	4682      	mov	sl, r0
 8004df6:	468b      	mov	fp, r1
 8004df8:	e78f      	b.n	8004d1a <_strtod_l+0xac2>
 8004dfa:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8004dfe:	e7dd      	b.n	8004dbc <_strtod_l+0xb64>
 8004e00:	a311      	add	r3, pc, #68	; (adr r3, 8004e48 <_strtod_l+0xbf0>)
 8004e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e06:	f7fb fe69 	bl	8000adc <__aeabi_dcmplt>
 8004e0a:	e7b4      	b.n	8004d76 <_strtod_l+0xb1e>
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	930e      	str	r3, [sp, #56]	; 0x38
 8004e10:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004e12:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004e14:	6013      	str	r3, [r2, #0]
 8004e16:	f7ff ba65 	b.w	80042e4 <_strtod_l+0x8c>
 8004e1a:	2b65      	cmp	r3, #101	; 0x65
 8004e1c:	f43f ab5d 	beq.w	80044da <_strtod_l+0x282>
 8004e20:	2b45      	cmp	r3, #69	; 0x45
 8004e22:	f43f ab5a 	beq.w	80044da <_strtod_l+0x282>
 8004e26:	2201      	movs	r2, #1
 8004e28:	f7ff bb92 	b.w	8004550 <_strtod_l+0x2f8>
 8004e2c:	f3af 8000 	nop.w
 8004e30:	94a03595 	.word	0x94a03595
 8004e34:	3fdfffff 	.word	0x3fdfffff
 8004e38:	35afe535 	.word	0x35afe535
 8004e3c:	3fe00000 	.word	0x3fe00000
 8004e40:	ffc00000 	.word	0xffc00000
 8004e44:	41dfffff 	.word	0x41dfffff
 8004e48:	94a03595 	.word	0x94a03595
 8004e4c:	3fcfffff 	.word	0x3fcfffff
 8004e50:	3ff00000 	.word	0x3ff00000
 8004e54:	7ff00000 	.word	0x7ff00000
 8004e58:	7fe00000 	.word	0x7fe00000
 8004e5c:	7c9fffff 	.word	0x7c9fffff
 8004e60:	3fe00000 	.word	0x3fe00000
 8004e64:	bff00000 	.word	0xbff00000
 8004e68:	7fefffff 	.word	0x7fefffff

08004e6c <_strtod_r>:
 8004e6c:	4b01      	ldr	r3, [pc, #4]	; (8004e74 <_strtod_r+0x8>)
 8004e6e:	f7ff b9f3 	b.w	8004258 <_strtod_l>
 8004e72:	bf00      	nop
 8004e74:	2000007c 	.word	0x2000007c

08004e78 <_strtol_l.isra.0>:
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e7e:	d001      	beq.n	8004e84 <_strtol_l.isra.0+0xc>
 8004e80:	2b24      	cmp	r3, #36	; 0x24
 8004e82:	d906      	bls.n	8004e92 <_strtol_l.isra.0+0x1a>
 8004e84:	f7fe faf8 	bl	8003478 <__errno>
 8004e88:	2316      	movs	r3, #22
 8004e8a:	6003      	str	r3, [r0, #0]
 8004e8c:	2000      	movs	r0, #0
 8004e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e92:	4f3a      	ldr	r7, [pc, #232]	; (8004f7c <_strtol_l.isra.0+0x104>)
 8004e94:	468e      	mov	lr, r1
 8004e96:	4676      	mov	r6, lr
 8004e98:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8004e9c:	5de5      	ldrb	r5, [r4, r7]
 8004e9e:	f015 0508 	ands.w	r5, r5, #8
 8004ea2:	d1f8      	bne.n	8004e96 <_strtol_l.isra.0+0x1e>
 8004ea4:	2c2d      	cmp	r4, #45	; 0x2d
 8004ea6:	d134      	bne.n	8004f12 <_strtol_l.isra.0+0x9a>
 8004ea8:	f89e 4000 	ldrb.w	r4, [lr]
 8004eac:	f04f 0801 	mov.w	r8, #1
 8004eb0:	f106 0e02 	add.w	lr, r6, #2
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d05c      	beq.n	8004f72 <_strtol_l.isra.0+0xfa>
 8004eb8:	2b10      	cmp	r3, #16
 8004eba:	d10c      	bne.n	8004ed6 <_strtol_l.isra.0+0x5e>
 8004ebc:	2c30      	cmp	r4, #48	; 0x30
 8004ebe:	d10a      	bne.n	8004ed6 <_strtol_l.isra.0+0x5e>
 8004ec0:	f89e 4000 	ldrb.w	r4, [lr]
 8004ec4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004ec8:	2c58      	cmp	r4, #88	; 0x58
 8004eca:	d14d      	bne.n	8004f68 <_strtol_l.isra.0+0xf0>
 8004ecc:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8004ed0:	2310      	movs	r3, #16
 8004ed2:	f10e 0e02 	add.w	lr, lr, #2
 8004ed6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8004eda:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004ede:	2600      	movs	r6, #0
 8004ee0:	fbbc f9f3 	udiv	r9, ip, r3
 8004ee4:	4635      	mov	r5, r6
 8004ee6:	fb03 ca19 	mls	sl, r3, r9, ip
 8004eea:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8004eee:	2f09      	cmp	r7, #9
 8004ef0:	d818      	bhi.n	8004f24 <_strtol_l.isra.0+0xac>
 8004ef2:	463c      	mov	r4, r7
 8004ef4:	42a3      	cmp	r3, r4
 8004ef6:	dd24      	ble.n	8004f42 <_strtol_l.isra.0+0xca>
 8004ef8:	2e00      	cmp	r6, #0
 8004efa:	db1f      	blt.n	8004f3c <_strtol_l.isra.0+0xc4>
 8004efc:	45a9      	cmp	r9, r5
 8004efe:	d31d      	bcc.n	8004f3c <_strtol_l.isra.0+0xc4>
 8004f00:	d101      	bne.n	8004f06 <_strtol_l.isra.0+0x8e>
 8004f02:	45a2      	cmp	sl, r4
 8004f04:	db1a      	blt.n	8004f3c <_strtol_l.isra.0+0xc4>
 8004f06:	fb05 4503 	mla	r5, r5, r3, r4
 8004f0a:	2601      	movs	r6, #1
 8004f0c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8004f10:	e7eb      	b.n	8004eea <_strtol_l.isra.0+0x72>
 8004f12:	2c2b      	cmp	r4, #43	; 0x2b
 8004f14:	bf08      	it	eq
 8004f16:	f89e 4000 	ldrbeq.w	r4, [lr]
 8004f1a:	46a8      	mov	r8, r5
 8004f1c:	bf08      	it	eq
 8004f1e:	f106 0e02 	addeq.w	lr, r6, #2
 8004f22:	e7c7      	b.n	8004eb4 <_strtol_l.isra.0+0x3c>
 8004f24:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8004f28:	2f19      	cmp	r7, #25
 8004f2a:	d801      	bhi.n	8004f30 <_strtol_l.isra.0+0xb8>
 8004f2c:	3c37      	subs	r4, #55	; 0x37
 8004f2e:	e7e1      	b.n	8004ef4 <_strtol_l.isra.0+0x7c>
 8004f30:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8004f34:	2f19      	cmp	r7, #25
 8004f36:	d804      	bhi.n	8004f42 <_strtol_l.isra.0+0xca>
 8004f38:	3c57      	subs	r4, #87	; 0x57
 8004f3a:	e7db      	b.n	8004ef4 <_strtol_l.isra.0+0x7c>
 8004f3c:	f04f 36ff 	mov.w	r6, #4294967295
 8004f40:	e7e4      	b.n	8004f0c <_strtol_l.isra.0+0x94>
 8004f42:	2e00      	cmp	r6, #0
 8004f44:	da05      	bge.n	8004f52 <_strtol_l.isra.0+0xda>
 8004f46:	2322      	movs	r3, #34	; 0x22
 8004f48:	6003      	str	r3, [r0, #0]
 8004f4a:	4665      	mov	r5, ip
 8004f4c:	b942      	cbnz	r2, 8004f60 <_strtol_l.isra.0+0xe8>
 8004f4e:	4628      	mov	r0, r5
 8004f50:	e79d      	b.n	8004e8e <_strtol_l.isra.0+0x16>
 8004f52:	f1b8 0f00 	cmp.w	r8, #0
 8004f56:	d000      	beq.n	8004f5a <_strtol_l.isra.0+0xe2>
 8004f58:	426d      	negs	r5, r5
 8004f5a:	2a00      	cmp	r2, #0
 8004f5c:	d0f7      	beq.n	8004f4e <_strtol_l.isra.0+0xd6>
 8004f5e:	b10e      	cbz	r6, 8004f64 <_strtol_l.isra.0+0xec>
 8004f60:	f10e 31ff 	add.w	r1, lr, #4294967295
 8004f64:	6011      	str	r1, [r2, #0]
 8004f66:	e7f2      	b.n	8004f4e <_strtol_l.isra.0+0xd6>
 8004f68:	2430      	movs	r4, #48	; 0x30
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1b3      	bne.n	8004ed6 <_strtol_l.isra.0+0x5e>
 8004f6e:	2308      	movs	r3, #8
 8004f70:	e7b1      	b.n	8004ed6 <_strtol_l.isra.0+0x5e>
 8004f72:	2c30      	cmp	r4, #48	; 0x30
 8004f74:	d0a4      	beq.n	8004ec0 <_strtol_l.isra.0+0x48>
 8004f76:	230a      	movs	r3, #10
 8004f78:	e7ad      	b.n	8004ed6 <_strtol_l.isra.0+0x5e>
 8004f7a:	bf00      	nop
 8004f7c:	08009131 	.word	0x08009131

08004f80 <_strtol_r>:
 8004f80:	f7ff bf7a 	b.w	8004e78 <_strtol_l.isra.0>

08004f84 <quorem>:
 8004f84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f88:	6903      	ldr	r3, [r0, #16]
 8004f8a:	690c      	ldr	r4, [r1, #16]
 8004f8c:	42a3      	cmp	r3, r4
 8004f8e:	4607      	mov	r7, r0
 8004f90:	f2c0 8081 	blt.w	8005096 <quorem+0x112>
 8004f94:	3c01      	subs	r4, #1
 8004f96:	f101 0814 	add.w	r8, r1, #20
 8004f9a:	f100 0514 	add.w	r5, r0, #20
 8004f9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004fa2:	9301      	str	r3, [sp, #4]
 8004fa4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004fa8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004fac:	3301      	adds	r3, #1
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004fb4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004fb8:	fbb2 f6f3 	udiv	r6, r2, r3
 8004fbc:	d331      	bcc.n	8005022 <quorem+0x9e>
 8004fbe:	f04f 0e00 	mov.w	lr, #0
 8004fc2:	4640      	mov	r0, r8
 8004fc4:	46ac      	mov	ip, r5
 8004fc6:	46f2      	mov	sl, lr
 8004fc8:	f850 2b04 	ldr.w	r2, [r0], #4
 8004fcc:	b293      	uxth	r3, r2
 8004fce:	fb06 e303 	mla	r3, r6, r3, lr
 8004fd2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	ebaa 0303 	sub.w	r3, sl, r3
 8004fdc:	0c12      	lsrs	r2, r2, #16
 8004fde:	f8dc a000 	ldr.w	sl, [ip]
 8004fe2:	fb06 e202 	mla	r2, r6, r2, lr
 8004fe6:	fa13 f38a 	uxtah	r3, r3, sl
 8004fea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004fee:	fa1f fa82 	uxth.w	sl, r2
 8004ff2:	f8dc 2000 	ldr.w	r2, [ip]
 8004ff6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8004ffa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005004:	4581      	cmp	r9, r0
 8005006:	f84c 3b04 	str.w	r3, [ip], #4
 800500a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800500e:	d2db      	bcs.n	8004fc8 <quorem+0x44>
 8005010:	f855 300b 	ldr.w	r3, [r5, fp]
 8005014:	b92b      	cbnz	r3, 8005022 <quorem+0x9e>
 8005016:	9b01      	ldr	r3, [sp, #4]
 8005018:	3b04      	subs	r3, #4
 800501a:	429d      	cmp	r5, r3
 800501c:	461a      	mov	r2, r3
 800501e:	d32e      	bcc.n	800507e <quorem+0xfa>
 8005020:	613c      	str	r4, [r7, #16]
 8005022:	4638      	mov	r0, r7
 8005024:	f001 fc8c 	bl	8006940 <__mcmp>
 8005028:	2800      	cmp	r0, #0
 800502a:	db24      	blt.n	8005076 <quorem+0xf2>
 800502c:	3601      	adds	r6, #1
 800502e:	4628      	mov	r0, r5
 8005030:	f04f 0c00 	mov.w	ip, #0
 8005034:	f858 2b04 	ldr.w	r2, [r8], #4
 8005038:	f8d0 e000 	ldr.w	lr, [r0]
 800503c:	b293      	uxth	r3, r2
 800503e:	ebac 0303 	sub.w	r3, ip, r3
 8005042:	0c12      	lsrs	r2, r2, #16
 8005044:	fa13 f38e 	uxtah	r3, r3, lr
 8005048:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800504c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005050:	b29b      	uxth	r3, r3
 8005052:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005056:	45c1      	cmp	r9, r8
 8005058:	f840 3b04 	str.w	r3, [r0], #4
 800505c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005060:	d2e8      	bcs.n	8005034 <quorem+0xb0>
 8005062:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005066:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800506a:	b922      	cbnz	r2, 8005076 <quorem+0xf2>
 800506c:	3b04      	subs	r3, #4
 800506e:	429d      	cmp	r5, r3
 8005070:	461a      	mov	r2, r3
 8005072:	d30a      	bcc.n	800508a <quorem+0x106>
 8005074:	613c      	str	r4, [r7, #16]
 8005076:	4630      	mov	r0, r6
 8005078:	b003      	add	sp, #12
 800507a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800507e:	6812      	ldr	r2, [r2, #0]
 8005080:	3b04      	subs	r3, #4
 8005082:	2a00      	cmp	r2, #0
 8005084:	d1cc      	bne.n	8005020 <quorem+0x9c>
 8005086:	3c01      	subs	r4, #1
 8005088:	e7c7      	b.n	800501a <quorem+0x96>
 800508a:	6812      	ldr	r2, [r2, #0]
 800508c:	3b04      	subs	r3, #4
 800508e:	2a00      	cmp	r2, #0
 8005090:	d1f0      	bne.n	8005074 <quorem+0xf0>
 8005092:	3c01      	subs	r4, #1
 8005094:	e7eb      	b.n	800506e <quorem+0xea>
 8005096:	2000      	movs	r0, #0
 8005098:	e7ee      	b.n	8005078 <quorem+0xf4>
 800509a:	0000      	movs	r0, r0
 800509c:	0000      	movs	r0, r0
	...

080050a0 <_dtoa_r>:
 80050a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050a4:	ed2d 8b02 	vpush	{d8}
 80050a8:	ec57 6b10 	vmov	r6, r7, d0
 80050ac:	b095      	sub	sp, #84	; 0x54
 80050ae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80050b0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80050b4:	9105      	str	r1, [sp, #20]
 80050b6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80050ba:	4604      	mov	r4, r0
 80050bc:	9209      	str	r2, [sp, #36]	; 0x24
 80050be:	930f      	str	r3, [sp, #60]	; 0x3c
 80050c0:	b975      	cbnz	r5, 80050e0 <_dtoa_r+0x40>
 80050c2:	2010      	movs	r0, #16
 80050c4:	f001 f94c 	bl	8006360 <malloc>
 80050c8:	4602      	mov	r2, r0
 80050ca:	6260      	str	r0, [r4, #36]	; 0x24
 80050cc:	b920      	cbnz	r0, 80050d8 <_dtoa_r+0x38>
 80050ce:	4bb2      	ldr	r3, [pc, #712]	; (8005398 <_dtoa_r+0x2f8>)
 80050d0:	21ea      	movs	r1, #234	; 0xea
 80050d2:	48b2      	ldr	r0, [pc, #712]	; (800539c <_dtoa_r+0x2fc>)
 80050d4:	f002 f874 	bl	80071c0 <__assert_func>
 80050d8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80050dc:	6005      	str	r5, [r0, #0]
 80050de:	60c5      	str	r5, [r0, #12]
 80050e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050e2:	6819      	ldr	r1, [r3, #0]
 80050e4:	b151      	cbz	r1, 80050fc <_dtoa_r+0x5c>
 80050e6:	685a      	ldr	r2, [r3, #4]
 80050e8:	604a      	str	r2, [r1, #4]
 80050ea:	2301      	movs	r3, #1
 80050ec:	4093      	lsls	r3, r2
 80050ee:	608b      	str	r3, [r1, #8]
 80050f0:	4620      	mov	r0, r4
 80050f2:	f001 f99d 	bl	8006430 <_Bfree>
 80050f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050f8:	2200      	movs	r2, #0
 80050fa:	601a      	str	r2, [r3, #0]
 80050fc:	1e3b      	subs	r3, r7, #0
 80050fe:	bfb9      	ittee	lt
 8005100:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005104:	9303      	strlt	r3, [sp, #12]
 8005106:	2300      	movge	r3, #0
 8005108:	f8c8 3000 	strge.w	r3, [r8]
 800510c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005110:	4ba3      	ldr	r3, [pc, #652]	; (80053a0 <_dtoa_r+0x300>)
 8005112:	bfbc      	itt	lt
 8005114:	2201      	movlt	r2, #1
 8005116:	f8c8 2000 	strlt.w	r2, [r8]
 800511a:	ea33 0309 	bics.w	r3, r3, r9
 800511e:	d11b      	bne.n	8005158 <_dtoa_r+0xb8>
 8005120:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005122:	f242 730f 	movw	r3, #9999	; 0x270f
 8005126:	6013      	str	r3, [r2, #0]
 8005128:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800512c:	4333      	orrs	r3, r6
 800512e:	f000 857a 	beq.w	8005c26 <_dtoa_r+0xb86>
 8005132:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005134:	b963      	cbnz	r3, 8005150 <_dtoa_r+0xb0>
 8005136:	4b9b      	ldr	r3, [pc, #620]	; (80053a4 <_dtoa_r+0x304>)
 8005138:	e024      	b.n	8005184 <_dtoa_r+0xe4>
 800513a:	4b9b      	ldr	r3, [pc, #620]	; (80053a8 <_dtoa_r+0x308>)
 800513c:	9300      	str	r3, [sp, #0]
 800513e:	3308      	adds	r3, #8
 8005140:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005142:	6013      	str	r3, [r2, #0]
 8005144:	9800      	ldr	r0, [sp, #0]
 8005146:	b015      	add	sp, #84	; 0x54
 8005148:	ecbd 8b02 	vpop	{d8}
 800514c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005150:	4b94      	ldr	r3, [pc, #592]	; (80053a4 <_dtoa_r+0x304>)
 8005152:	9300      	str	r3, [sp, #0]
 8005154:	3303      	adds	r3, #3
 8005156:	e7f3      	b.n	8005140 <_dtoa_r+0xa0>
 8005158:	ed9d 7b02 	vldr	d7, [sp, #8]
 800515c:	2200      	movs	r2, #0
 800515e:	ec51 0b17 	vmov	r0, r1, d7
 8005162:	2300      	movs	r3, #0
 8005164:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8005168:	f7fb fcae 	bl	8000ac8 <__aeabi_dcmpeq>
 800516c:	4680      	mov	r8, r0
 800516e:	b158      	cbz	r0, 8005188 <_dtoa_r+0xe8>
 8005170:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005172:	2301      	movs	r3, #1
 8005174:	6013      	str	r3, [r2, #0]
 8005176:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005178:	2b00      	cmp	r3, #0
 800517a:	f000 8551 	beq.w	8005c20 <_dtoa_r+0xb80>
 800517e:	488b      	ldr	r0, [pc, #556]	; (80053ac <_dtoa_r+0x30c>)
 8005180:	6018      	str	r0, [r3, #0]
 8005182:	1e43      	subs	r3, r0, #1
 8005184:	9300      	str	r3, [sp, #0]
 8005186:	e7dd      	b.n	8005144 <_dtoa_r+0xa4>
 8005188:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800518c:	aa12      	add	r2, sp, #72	; 0x48
 800518e:	a913      	add	r1, sp, #76	; 0x4c
 8005190:	4620      	mov	r0, r4
 8005192:	f001 fcf5 	bl	8006b80 <__d2b>
 8005196:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800519a:	4683      	mov	fp, r0
 800519c:	2d00      	cmp	r5, #0
 800519e:	d07c      	beq.n	800529a <_dtoa_r+0x1fa>
 80051a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051a2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80051a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80051aa:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80051ae:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80051b2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80051b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80051ba:	4b7d      	ldr	r3, [pc, #500]	; (80053b0 <_dtoa_r+0x310>)
 80051bc:	2200      	movs	r2, #0
 80051be:	4630      	mov	r0, r6
 80051c0:	4639      	mov	r1, r7
 80051c2:	f7fb f861 	bl	8000288 <__aeabi_dsub>
 80051c6:	a36e      	add	r3, pc, #440	; (adr r3, 8005380 <_dtoa_r+0x2e0>)
 80051c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051cc:	f7fb fa14 	bl	80005f8 <__aeabi_dmul>
 80051d0:	a36d      	add	r3, pc, #436	; (adr r3, 8005388 <_dtoa_r+0x2e8>)
 80051d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d6:	f7fb f859 	bl	800028c <__adddf3>
 80051da:	4606      	mov	r6, r0
 80051dc:	4628      	mov	r0, r5
 80051de:	460f      	mov	r7, r1
 80051e0:	f7fb f9a0 	bl	8000524 <__aeabi_i2d>
 80051e4:	a36a      	add	r3, pc, #424	; (adr r3, 8005390 <_dtoa_r+0x2f0>)
 80051e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ea:	f7fb fa05 	bl	80005f8 <__aeabi_dmul>
 80051ee:	4602      	mov	r2, r0
 80051f0:	460b      	mov	r3, r1
 80051f2:	4630      	mov	r0, r6
 80051f4:	4639      	mov	r1, r7
 80051f6:	f7fb f849 	bl	800028c <__adddf3>
 80051fa:	4606      	mov	r6, r0
 80051fc:	460f      	mov	r7, r1
 80051fe:	f7fb fcab 	bl	8000b58 <__aeabi_d2iz>
 8005202:	2200      	movs	r2, #0
 8005204:	4682      	mov	sl, r0
 8005206:	2300      	movs	r3, #0
 8005208:	4630      	mov	r0, r6
 800520a:	4639      	mov	r1, r7
 800520c:	f7fb fc66 	bl	8000adc <__aeabi_dcmplt>
 8005210:	b148      	cbz	r0, 8005226 <_dtoa_r+0x186>
 8005212:	4650      	mov	r0, sl
 8005214:	f7fb f986 	bl	8000524 <__aeabi_i2d>
 8005218:	4632      	mov	r2, r6
 800521a:	463b      	mov	r3, r7
 800521c:	f7fb fc54 	bl	8000ac8 <__aeabi_dcmpeq>
 8005220:	b908      	cbnz	r0, 8005226 <_dtoa_r+0x186>
 8005222:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005226:	f1ba 0f16 	cmp.w	sl, #22
 800522a:	d854      	bhi.n	80052d6 <_dtoa_r+0x236>
 800522c:	4b61      	ldr	r3, [pc, #388]	; (80053b4 <_dtoa_r+0x314>)
 800522e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005236:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800523a:	f7fb fc4f 	bl	8000adc <__aeabi_dcmplt>
 800523e:	2800      	cmp	r0, #0
 8005240:	d04b      	beq.n	80052da <_dtoa_r+0x23a>
 8005242:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005246:	2300      	movs	r3, #0
 8005248:	930e      	str	r3, [sp, #56]	; 0x38
 800524a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800524c:	1b5d      	subs	r5, r3, r5
 800524e:	1e6b      	subs	r3, r5, #1
 8005250:	9304      	str	r3, [sp, #16]
 8005252:	bf43      	ittte	mi
 8005254:	2300      	movmi	r3, #0
 8005256:	f1c5 0801 	rsbmi	r8, r5, #1
 800525a:	9304      	strmi	r3, [sp, #16]
 800525c:	f04f 0800 	movpl.w	r8, #0
 8005260:	f1ba 0f00 	cmp.w	sl, #0
 8005264:	db3b      	blt.n	80052de <_dtoa_r+0x23e>
 8005266:	9b04      	ldr	r3, [sp, #16]
 8005268:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800526c:	4453      	add	r3, sl
 800526e:	9304      	str	r3, [sp, #16]
 8005270:	2300      	movs	r3, #0
 8005272:	9306      	str	r3, [sp, #24]
 8005274:	9b05      	ldr	r3, [sp, #20]
 8005276:	2b09      	cmp	r3, #9
 8005278:	d869      	bhi.n	800534e <_dtoa_r+0x2ae>
 800527a:	2b05      	cmp	r3, #5
 800527c:	bfc4      	itt	gt
 800527e:	3b04      	subgt	r3, #4
 8005280:	9305      	strgt	r3, [sp, #20]
 8005282:	9b05      	ldr	r3, [sp, #20]
 8005284:	f1a3 0302 	sub.w	r3, r3, #2
 8005288:	bfcc      	ite	gt
 800528a:	2500      	movgt	r5, #0
 800528c:	2501      	movle	r5, #1
 800528e:	2b03      	cmp	r3, #3
 8005290:	d869      	bhi.n	8005366 <_dtoa_r+0x2c6>
 8005292:	e8df f003 	tbb	[pc, r3]
 8005296:	4e2c      	.short	0x4e2c
 8005298:	5a4c      	.short	0x5a4c
 800529a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800529e:	441d      	add	r5, r3
 80052a0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80052a4:	2b20      	cmp	r3, #32
 80052a6:	bfc1      	itttt	gt
 80052a8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80052ac:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80052b0:	fa09 f303 	lslgt.w	r3, r9, r3
 80052b4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80052b8:	bfda      	itte	le
 80052ba:	f1c3 0320 	rsble	r3, r3, #32
 80052be:	fa06 f003 	lslle.w	r0, r6, r3
 80052c2:	4318      	orrgt	r0, r3
 80052c4:	f7fb f91e 	bl	8000504 <__aeabi_ui2d>
 80052c8:	2301      	movs	r3, #1
 80052ca:	4606      	mov	r6, r0
 80052cc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80052d0:	3d01      	subs	r5, #1
 80052d2:	9310      	str	r3, [sp, #64]	; 0x40
 80052d4:	e771      	b.n	80051ba <_dtoa_r+0x11a>
 80052d6:	2301      	movs	r3, #1
 80052d8:	e7b6      	b.n	8005248 <_dtoa_r+0x1a8>
 80052da:	900e      	str	r0, [sp, #56]	; 0x38
 80052dc:	e7b5      	b.n	800524a <_dtoa_r+0x1aa>
 80052de:	f1ca 0300 	rsb	r3, sl, #0
 80052e2:	9306      	str	r3, [sp, #24]
 80052e4:	2300      	movs	r3, #0
 80052e6:	eba8 080a 	sub.w	r8, r8, sl
 80052ea:	930d      	str	r3, [sp, #52]	; 0x34
 80052ec:	e7c2      	b.n	8005274 <_dtoa_r+0x1d4>
 80052ee:	2300      	movs	r3, #0
 80052f0:	9308      	str	r3, [sp, #32]
 80052f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	dc39      	bgt.n	800536c <_dtoa_r+0x2cc>
 80052f8:	f04f 0901 	mov.w	r9, #1
 80052fc:	f8cd 9004 	str.w	r9, [sp, #4]
 8005300:	464b      	mov	r3, r9
 8005302:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005306:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005308:	2200      	movs	r2, #0
 800530a:	6042      	str	r2, [r0, #4]
 800530c:	2204      	movs	r2, #4
 800530e:	f102 0614 	add.w	r6, r2, #20
 8005312:	429e      	cmp	r6, r3
 8005314:	6841      	ldr	r1, [r0, #4]
 8005316:	d92f      	bls.n	8005378 <_dtoa_r+0x2d8>
 8005318:	4620      	mov	r0, r4
 800531a:	f001 f849 	bl	80063b0 <_Balloc>
 800531e:	9000      	str	r0, [sp, #0]
 8005320:	2800      	cmp	r0, #0
 8005322:	d14b      	bne.n	80053bc <_dtoa_r+0x31c>
 8005324:	4b24      	ldr	r3, [pc, #144]	; (80053b8 <_dtoa_r+0x318>)
 8005326:	4602      	mov	r2, r0
 8005328:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800532c:	e6d1      	b.n	80050d2 <_dtoa_r+0x32>
 800532e:	2301      	movs	r3, #1
 8005330:	e7de      	b.n	80052f0 <_dtoa_r+0x250>
 8005332:	2300      	movs	r3, #0
 8005334:	9308      	str	r3, [sp, #32]
 8005336:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005338:	eb0a 0903 	add.w	r9, sl, r3
 800533c:	f109 0301 	add.w	r3, r9, #1
 8005340:	2b01      	cmp	r3, #1
 8005342:	9301      	str	r3, [sp, #4]
 8005344:	bfb8      	it	lt
 8005346:	2301      	movlt	r3, #1
 8005348:	e7dd      	b.n	8005306 <_dtoa_r+0x266>
 800534a:	2301      	movs	r3, #1
 800534c:	e7f2      	b.n	8005334 <_dtoa_r+0x294>
 800534e:	2501      	movs	r5, #1
 8005350:	2300      	movs	r3, #0
 8005352:	9305      	str	r3, [sp, #20]
 8005354:	9508      	str	r5, [sp, #32]
 8005356:	f04f 39ff 	mov.w	r9, #4294967295
 800535a:	2200      	movs	r2, #0
 800535c:	f8cd 9004 	str.w	r9, [sp, #4]
 8005360:	2312      	movs	r3, #18
 8005362:	9209      	str	r2, [sp, #36]	; 0x24
 8005364:	e7cf      	b.n	8005306 <_dtoa_r+0x266>
 8005366:	2301      	movs	r3, #1
 8005368:	9308      	str	r3, [sp, #32]
 800536a:	e7f4      	b.n	8005356 <_dtoa_r+0x2b6>
 800536c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005370:	f8cd 9004 	str.w	r9, [sp, #4]
 8005374:	464b      	mov	r3, r9
 8005376:	e7c6      	b.n	8005306 <_dtoa_r+0x266>
 8005378:	3101      	adds	r1, #1
 800537a:	6041      	str	r1, [r0, #4]
 800537c:	0052      	lsls	r2, r2, #1
 800537e:	e7c6      	b.n	800530e <_dtoa_r+0x26e>
 8005380:	636f4361 	.word	0x636f4361
 8005384:	3fd287a7 	.word	0x3fd287a7
 8005388:	8b60c8b3 	.word	0x8b60c8b3
 800538c:	3fc68a28 	.word	0x3fc68a28
 8005390:	509f79fb 	.word	0x509f79fb
 8005394:	3fd34413 	.word	0x3fd34413
 8005398:	0800923e 	.word	0x0800923e
 800539c:	08009255 	.word	0x08009255
 80053a0:	7ff00000 	.word	0x7ff00000
 80053a4:	0800923a 	.word	0x0800923a
 80053a8:	08009231 	.word	0x08009231
 80053ac:	080090b1 	.word	0x080090b1
 80053b0:	3ff80000 	.word	0x3ff80000
 80053b4:	080093d0 	.word	0x080093d0
 80053b8:	080092b4 	.word	0x080092b4
 80053bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80053be:	9a00      	ldr	r2, [sp, #0]
 80053c0:	601a      	str	r2, [r3, #0]
 80053c2:	9b01      	ldr	r3, [sp, #4]
 80053c4:	2b0e      	cmp	r3, #14
 80053c6:	f200 80ad 	bhi.w	8005524 <_dtoa_r+0x484>
 80053ca:	2d00      	cmp	r5, #0
 80053cc:	f000 80aa 	beq.w	8005524 <_dtoa_r+0x484>
 80053d0:	f1ba 0f00 	cmp.w	sl, #0
 80053d4:	dd36      	ble.n	8005444 <_dtoa_r+0x3a4>
 80053d6:	4ac3      	ldr	r2, [pc, #780]	; (80056e4 <_dtoa_r+0x644>)
 80053d8:	f00a 030f 	and.w	r3, sl, #15
 80053dc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80053e0:	ed93 7b00 	vldr	d7, [r3]
 80053e4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80053e8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80053ec:	eeb0 8a47 	vmov.f32	s16, s14
 80053f0:	eef0 8a67 	vmov.f32	s17, s15
 80053f4:	d016      	beq.n	8005424 <_dtoa_r+0x384>
 80053f6:	4bbc      	ldr	r3, [pc, #752]	; (80056e8 <_dtoa_r+0x648>)
 80053f8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80053fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005400:	f7fb fa24 	bl	800084c <__aeabi_ddiv>
 8005404:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005408:	f007 070f 	and.w	r7, r7, #15
 800540c:	2503      	movs	r5, #3
 800540e:	4eb6      	ldr	r6, [pc, #728]	; (80056e8 <_dtoa_r+0x648>)
 8005410:	b957      	cbnz	r7, 8005428 <_dtoa_r+0x388>
 8005412:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005416:	ec53 2b18 	vmov	r2, r3, d8
 800541a:	f7fb fa17 	bl	800084c <__aeabi_ddiv>
 800541e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005422:	e029      	b.n	8005478 <_dtoa_r+0x3d8>
 8005424:	2502      	movs	r5, #2
 8005426:	e7f2      	b.n	800540e <_dtoa_r+0x36e>
 8005428:	07f9      	lsls	r1, r7, #31
 800542a:	d508      	bpl.n	800543e <_dtoa_r+0x39e>
 800542c:	ec51 0b18 	vmov	r0, r1, d8
 8005430:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005434:	f7fb f8e0 	bl	80005f8 <__aeabi_dmul>
 8005438:	ec41 0b18 	vmov	d8, r0, r1
 800543c:	3501      	adds	r5, #1
 800543e:	107f      	asrs	r7, r7, #1
 8005440:	3608      	adds	r6, #8
 8005442:	e7e5      	b.n	8005410 <_dtoa_r+0x370>
 8005444:	f000 80a6 	beq.w	8005594 <_dtoa_r+0x4f4>
 8005448:	f1ca 0600 	rsb	r6, sl, #0
 800544c:	4ba5      	ldr	r3, [pc, #660]	; (80056e4 <_dtoa_r+0x644>)
 800544e:	4fa6      	ldr	r7, [pc, #664]	; (80056e8 <_dtoa_r+0x648>)
 8005450:	f006 020f 	and.w	r2, r6, #15
 8005454:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800545c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005460:	f7fb f8ca 	bl	80005f8 <__aeabi_dmul>
 8005464:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005468:	1136      	asrs	r6, r6, #4
 800546a:	2300      	movs	r3, #0
 800546c:	2502      	movs	r5, #2
 800546e:	2e00      	cmp	r6, #0
 8005470:	f040 8085 	bne.w	800557e <_dtoa_r+0x4de>
 8005474:	2b00      	cmp	r3, #0
 8005476:	d1d2      	bne.n	800541e <_dtoa_r+0x37e>
 8005478:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800547a:	2b00      	cmp	r3, #0
 800547c:	f000 808c 	beq.w	8005598 <_dtoa_r+0x4f8>
 8005480:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005484:	4b99      	ldr	r3, [pc, #612]	; (80056ec <_dtoa_r+0x64c>)
 8005486:	2200      	movs	r2, #0
 8005488:	4630      	mov	r0, r6
 800548a:	4639      	mov	r1, r7
 800548c:	f7fb fb26 	bl	8000adc <__aeabi_dcmplt>
 8005490:	2800      	cmp	r0, #0
 8005492:	f000 8081 	beq.w	8005598 <_dtoa_r+0x4f8>
 8005496:	9b01      	ldr	r3, [sp, #4]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d07d      	beq.n	8005598 <_dtoa_r+0x4f8>
 800549c:	f1b9 0f00 	cmp.w	r9, #0
 80054a0:	dd3c      	ble.n	800551c <_dtoa_r+0x47c>
 80054a2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80054a6:	9307      	str	r3, [sp, #28]
 80054a8:	2200      	movs	r2, #0
 80054aa:	4b91      	ldr	r3, [pc, #580]	; (80056f0 <_dtoa_r+0x650>)
 80054ac:	4630      	mov	r0, r6
 80054ae:	4639      	mov	r1, r7
 80054b0:	f7fb f8a2 	bl	80005f8 <__aeabi_dmul>
 80054b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80054b8:	3501      	adds	r5, #1
 80054ba:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80054be:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80054c2:	4628      	mov	r0, r5
 80054c4:	f7fb f82e 	bl	8000524 <__aeabi_i2d>
 80054c8:	4632      	mov	r2, r6
 80054ca:	463b      	mov	r3, r7
 80054cc:	f7fb f894 	bl	80005f8 <__aeabi_dmul>
 80054d0:	4b88      	ldr	r3, [pc, #544]	; (80056f4 <_dtoa_r+0x654>)
 80054d2:	2200      	movs	r2, #0
 80054d4:	f7fa feda 	bl	800028c <__adddf3>
 80054d8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80054dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80054e0:	9303      	str	r3, [sp, #12]
 80054e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d15c      	bne.n	80055a2 <_dtoa_r+0x502>
 80054e8:	4b83      	ldr	r3, [pc, #524]	; (80056f8 <_dtoa_r+0x658>)
 80054ea:	2200      	movs	r2, #0
 80054ec:	4630      	mov	r0, r6
 80054ee:	4639      	mov	r1, r7
 80054f0:	f7fa feca 	bl	8000288 <__aeabi_dsub>
 80054f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80054f8:	4606      	mov	r6, r0
 80054fa:	460f      	mov	r7, r1
 80054fc:	f7fb fb0c 	bl	8000b18 <__aeabi_dcmpgt>
 8005500:	2800      	cmp	r0, #0
 8005502:	f040 8296 	bne.w	8005a32 <_dtoa_r+0x992>
 8005506:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800550a:	4630      	mov	r0, r6
 800550c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005510:	4639      	mov	r1, r7
 8005512:	f7fb fae3 	bl	8000adc <__aeabi_dcmplt>
 8005516:	2800      	cmp	r0, #0
 8005518:	f040 8288 	bne.w	8005a2c <_dtoa_r+0x98c>
 800551c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005520:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005524:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005526:	2b00      	cmp	r3, #0
 8005528:	f2c0 8158 	blt.w	80057dc <_dtoa_r+0x73c>
 800552c:	f1ba 0f0e 	cmp.w	sl, #14
 8005530:	f300 8154 	bgt.w	80057dc <_dtoa_r+0x73c>
 8005534:	4b6b      	ldr	r3, [pc, #428]	; (80056e4 <_dtoa_r+0x644>)
 8005536:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800553a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800553e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005540:	2b00      	cmp	r3, #0
 8005542:	f280 80e3 	bge.w	800570c <_dtoa_r+0x66c>
 8005546:	9b01      	ldr	r3, [sp, #4]
 8005548:	2b00      	cmp	r3, #0
 800554a:	f300 80df 	bgt.w	800570c <_dtoa_r+0x66c>
 800554e:	f040 826d 	bne.w	8005a2c <_dtoa_r+0x98c>
 8005552:	4b69      	ldr	r3, [pc, #420]	; (80056f8 <_dtoa_r+0x658>)
 8005554:	2200      	movs	r2, #0
 8005556:	4640      	mov	r0, r8
 8005558:	4649      	mov	r1, r9
 800555a:	f7fb f84d 	bl	80005f8 <__aeabi_dmul>
 800555e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005562:	f7fb facf 	bl	8000b04 <__aeabi_dcmpge>
 8005566:	9e01      	ldr	r6, [sp, #4]
 8005568:	4637      	mov	r7, r6
 800556a:	2800      	cmp	r0, #0
 800556c:	f040 8243 	bne.w	80059f6 <_dtoa_r+0x956>
 8005570:	9d00      	ldr	r5, [sp, #0]
 8005572:	2331      	movs	r3, #49	; 0x31
 8005574:	f805 3b01 	strb.w	r3, [r5], #1
 8005578:	f10a 0a01 	add.w	sl, sl, #1
 800557c:	e23f      	b.n	80059fe <_dtoa_r+0x95e>
 800557e:	07f2      	lsls	r2, r6, #31
 8005580:	d505      	bpl.n	800558e <_dtoa_r+0x4ee>
 8005582:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005586:	f7fb f837 	bl	80005f8 <__aeabi_dmul>
 800558a:	3501      	adds	r5, #1
 800558c:	2301      	movs	r3, #1
 800558e:	1076      	asrs	r6, r6, #1
 8005590:	3708      	adds	r7, #8
 8005592:	e76c      	b.n	800546e <_dtoa_r+0x3ce>
 8005594:	2502      	movs	r5, #2
 8005596:	e76f      	b.n	8005478 <_dtoa_r+0x3d8>
 8005598:	9b01      	ldr	r3, [sp, #4]
 800559a:	f8cd a01c 	str.w	sl, [sp, #28]
 800559e:	930c      	str	r3, [sp, #48]	; 0x30
 80055a0:	e78d      	b.n	80054be <_dtoa_r+0x41e>
 80055a2:	9900      	ldr	r1, [sp, #0]
 80055a4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80055a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80055a8:	4b4e      	ldr	r3, [pc, #312]	; (80056e4 <_dtoa_r+0x644>)
 80055aa:	ed9d 7b02 	vldr	d7, [sp, #8]
 80055ae:	4401      	add	r1, r0
 80055b0:	9102      	str	r1, [sp, #8]
 80055b2:	9908      	ldr	r1, [sp, #32]
 80055b4:	eeb0 8a47 	vmov.f32	s16, s14
 80055b8:	eef0 8a67 	vmov.f32	s17, s15
 80055bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80055c0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80055c4:	2900      	cmp	r1, #0
 80055c6:	d045      	beq.n	8005654 <_dtoa_r+0x5b4>
 80055c8:	494c      	ldr	r1, [pc, #304]	; (80056fc <_dtoa_r+0x65c>)
 80055ca:	2000      	movs	r0, #0
 80055cc:	f7fb f93e 	bl	800084c <__aeabi_ddiv>
 80055d0:	ec53 2b18 	vmov	r2, r3, d8
 80055d4:	f7fa fe58 	bl	8000288 <__aeabi_dsub>
 80055d8:	9d00      	ldr	r5, [sp, #0]
 80055da:	ec41 0b18 	vmov	d8, r0, r1
 80055de:	4639      	mov	r1, r7
 80055e0:	4630      	mov	r0, r6
 80055e2:	f7fb fab9 	bl	8000b58 <__aeabi_d2iz>
 80055e6:	900c      	str	r0, [sp, #48]	; 0x30
 80055e8:	f7fa ff9c 	bl	8000524 <__aeabi_i2d>
 80055ec:	4602      	mov	r2, r0
 80055ee:	460b      	mov	r3, r1
 80055f0:	4630      	mov	r0, r6
 80055f2:	4639      	mov	r1, r7
 80055f4:	f7fa fe48 	bl	8000288 <__aeabi_dsub>
 80055f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80055fa:	3330      	adds	r3, #48	; 0x30
 80055fc:	f805 3b01 	strb.w	r3, [r5], #1
 8005600:	ec53 2b18 	vmov	r2, r3, d8
 8005604:	4606      	mov	r6, r0
 8005606:	460f      	mov	r7, r1
 8005608:	f7fb fa68 	bl	8000adc <__aeabi_dcmplt>
 800560c:	2800      	cmp	r0, #0
 800560e:	d165      	bne.n	80056dc <_dtoa_r+0x63c>
 8005610:	4632      	mov	r2, r6
 8005612:	463b      	mov	r3, r7
 8005614:	4935      	ldr	r1, [pc, #212]	; (80056ec <_dtoa_r+0x64c>)
 8005616:	2000      	movs	r0, #0
 8005618:	f7fa fe36 	bl	8000288 <__aeabi_dsub>
 800561c:	ec53 2b18 	vmov	r2, r3, d8
 8005620:	f7fb fa5c 	bl	8000adc <__aeabi_dcmplt>
 8005624:	2800      	cmp	r0, #0
 8005626:	f040 80b9 	bne.w	800579c <_dtoa_r+0x6fc>
 800562a:	9b02      	ldr	r3, [sp, #8]
 800562c:	429d      	cmp	r5, r3
 800562e:	f43f af75 	beq.w	800551c <_dtoa_r+0x47c>
 8005632:	4b2f      	ldr	r3, [pc, #188]	; (80056f0 <_dtoa_r+0x650>)
 8005634:	ec51 0b18 	vmov	r0, r1, d8
 8005638:	2200      	movs	r2, #0
 800563a:	f7fa ffdd 	bl	80005f8 <__aeabi_dmul>
 800563e:	4b2c      	ldr	r3, [pc, #176]	; (80056f0 <_dtoa_r+0x650>)
 8005640:	ec41 0b18 	vmov	d8, r0, r1
 8005644:	2200      	movs	r2, #0
 8005646:	4630      	mov	r0, r6
 8005648:	4639      	mov	r1, r7
 800564a:	f7fa ffd5 	bl	80005f8 <__aeabi_dmul>
 800564e:	4606      	mov	r6, r0
 8005650:	460f      	mov	r7, r1
 8005652:	e7c4      	b.n	80055de <_dtoa_r+0x53e>
 8005654:	ec51 0b17 	vmov	r0, r1, d7
 8005658:	f7fa ffce 	bl	80005f8 <__aeabi_dmul>
 800565c:	9b02      	ldr	r3, [sp, #8]
 800565e:	9d00      	ldr	r5, [sp, #0]
 8005660:	930c      	str	r3, [sp, #48]	; 0x30
 8005662:	ec41 0b18 	vmov	d8, r0, r1
 8005666:	4639      	mov	r1, r7
 8005668:	4630      	mov	r0, r6
 800566a:	f7fb fa75 	bl	8000b58 <__aeabi_d2iz>
 800566e:	9011      	str	r0, [sp, #68]	; 0x44
 8005670:	f7fa ff58 	bl	8000524 <__aeabi_i2d>
 8005674:	4602      	mov	r2, r0
 8005676:	460b      	mov	r3, r1
 8005678:	4630      	mov	r0, r6
 800567a:	4639      	mov	r1, r7
 800567c:	f7fa fe04 	bl	8000288 <__aeabi_dsub>
 8005680:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005682:	3330      	adds	r3, #48	; 0x30
 8005684:	f805 3b01 	strb.w	r3, [r5], #1
 8005688:	9b02      	ldr	r3, [sp, #8]
 800568a:	429d      	cmp	r5, r3
 800568c:	4606      	mov	r6, r0
 800568e:	460f      	mov	r7, r1
 8005690:	f04f 0200 	mov.w	r2, #0
 8005694:	d134      	bne.n	8005700 <_dtoa_r+0x660>
 8005696:	4b19      	ldr	r3, [pc, #100]	; (80056fc <_dtoa_r+0x65c>)
 8005698:	ec51 0b18 	vmov	r0, r1, d8
 800569c:	f7fa fdf6 	bl	800028c <__adddf3>
 80056a0:	4602      	mov	r2, r0
 80056a2:	460b      	mov	r3, r1
 80056a4:	4630      	mov	r0, r6
 80056a6:	4639      	mov	r1, r7
 80056a8:	f7fb fa36 	bl	8000b18 <__aeabi_dcmpgt>
 80056ac:	2800      	cmp	r0, #0
 80056ae:	d175      	bne.n	800579c <_dtoa_r+0x6fc>
 80056b0:	ec53 2b18 	vmov	r2, r3, d8
 80056b4:	4911      	ldr	r1, [pc, #68]	; (80056fc <_dtoa_r+0x65c>)
 80056b6:	2000      	movs	r0, #0
 80056b8:	f7fa fde6 	bl	8000288 <__aeabi_dsub>
 80056bc:	4602      	mov	r2, r0
 80056be:	460b      	mov	r3, r1
 80056c0:	4630      	mov	r0, r6
 80056c2:	4639      	mov	r1, r7
 80056c4:	f7fb fa0a 	bl	8000adc <__aeabi_dcmplt>
 80056c8:	2800      	cmp	r0, #0
 80056ca:	f43f af27 	beq.w	800551c <_dtoa_r+0x47c>
 80056ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80056d0:	1e6b      	subs	r3, r5, #1
 80056d2:	930c      	str	r3, [sp, #48]	; 0x30
 80056d4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80056d8:	2b30      	cmp	r3, #48	; 0x30
 80056da:	d0f8      	beq.n	80056ce <_dtoa_r+0x62e>
 80056dc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80056e0:	e04a      	b.n	8005778 <_dtoa_r+0x6d8>
 80056e2:	bf00      	nop
 80056e4:	080093d0 	.word	0x080093d0
 80056e8:	080093a8 	.word	0x080093a8
 80056ec:	3ff00000 	.word	0x3ff00000
 80056f0:	40240000 	.word	0x40240000
 80056f4:	401c0000 	.word	0x401c0000
 80056f8:	40140000 	.word	0x40140000
 80056fc:	3fe00000 	.word	0x3fe00000
 8005700:	4baf      	ldr	r3, [pc, #700]	; (80059c0 <_dtoa_r+0x920>)
 8005702:	f7fa ff79 	bl	80005f8 <__aeabi_dmul>
 8005706:	4606      	mov	r6, r0
 8005708:	460f      	mov	r7, r1
 800570a:	e7ac      	b.n	8005666 <_dtoa_r+0x5c6>
 800570c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005710:	9d00      	ldr	r5, [sp, #0]
 8005712:	4642      	mov	r2, r8
 8005714:	464b      	mov	r3, r9
 8005716:	4630      	mov	r0, r6
 8005718:	4639      	mov	r1, r7
 800571a:	f7fb f897 	bl	800084c <__aeabi_ddiv>
 800571e:	f7fb fa1b 	bl	8000b58 <__aeabi_d2iz>
 8005722:	9002      	str	r0, [sp, #8]
 8005724:	f7fa fefe 	bl	8000524 <__aeabi_i2d>
 8005728:	4642      	mov	r2, r8
 800572a:	464b      	mov	r3, r9
 800572c:	f7fa ff64 	bl	80005f8 <__aeabi_dmul>
 8005730:	4602      	mov	r2, r0
 8005732:	460b      	mov	r3, r1
 8005734:	4630      	mov	r0, r6
 8005736:	4639      	mov	r1, r7
 8005738:	f7fa fda6 	bl	8000288 <__aeabi_dsub>
 800573c:	9e02      	ldr	r6, [sp, #8]
 800573e:	9f01      	ldr	r7, [sp, #4]
 8005740:	3630      	adds	r6, #48	; 0x30
 8005742:	f805 6b01 	strb.w	r6, [r5], #1
 8005746:	9e00      	ldr	r6, [sp, #0]
 8005748:	1bae      	subs	r6, r5, r6
 800574a:	42b7      	cmp	r7, r6
 800574c:	4602      	mov	r2, r0
 800574e:	460b      	mov	r3, r1
 8005750:	d137      	bne.n	80057c2 <_dtoa_r+0x722>
 8005752:	f7fa fd9b 	bl	800028c <__adddf3>
 8005756:	4642      	mov	r2, r8
 8005758:	464b      	mov	r3, r9
 800575a:	4606      	mov	r6, r0
 800575c:	460f      	mov	r7, r1
 800575e:	f7fb f9db 	bl	8000b18 <__aeabi_dcmpgt>
 8005762:	b9c8      	cbnz	r0, 8005798 <_dtoa_r+0x6f8>
 8005764:	4642      	mov	r2, r8
 8005766:	464b      	mov	r3, r9
 8005768:	4630      	mov	r0, r6
 800576a:	4639      	mov	r1, r7
 800576c:	f7fb f9ac 	bl	8000ac8 <__aeabi_dcmpeq>
 8005770:	b110      	cbz	r0, 8005778 <_dtoa_r+0x6d8>
 8005772:	9b02      	ldr	r3, [sp, #8]
 8005774:	07d9      	lsls	r1, r3, #31
 8005776:	d40f      	bmi.n	8005798 <_dtoa_r+0x6f8>
 8005778:	4620      	mov	r0, r4
 800577a:	4659      	mov	r1, fp
 800577c:	f000 fe58 	bl	8006430 <_Bfree>
 8005780:	2300      	movs	r3, #0
 8005782:	702b      	strb	r3, [r5, #0]
 8005784:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005786:	f10a 0001 	add.w	r0, sl, #1
 800578a:	6018      	str	r0, [r3, #0]
 800578c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800578e:	2b00      	cmp	r3, #0
 8005790:	f43f acd8 	beq.w	8005144 <_dtoa_r+0xa4>
 8005794:	601d      	str	r5, [r3, #0]
 8005796:	e4d5      	b.n	8005144 <_dtoa_r+0xa4>
 8005798:	f8cd a01c 	str.w	sl, [sp, #28]
 800579c:	462b      	mov	r3, r5
 800579e:	461d      	mov	r5, r3
 80057a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80057a4:	2a39      	cmp	r2, #57	; 0x39
 80057a6:	d108      	bne.n	80057ba <_dtoa_r+0x71a>
 80057a8:	9a00      	ldr	r2, [sp, #0]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d1f7      	bne.n	800579e <_dtoa_r+0x6fe>
 80057ae:	9a07      	ldr	r2, [sp, #28]
 80057b0:	9900      	ldr	r1, [sp, #0]
 80057b2:	3201      	adds	r2, #1
 80057b4:	9207      	str	r2, [sp, #28]
 80057b6:	2230      	movs	r2, #48	; 0x30
 80057b8:	700a      	strb	r2, [r1, #0]
 80057ba:	781a      	ldrb	r2, [r3, #0]
 80057bc:	3201      	adds	r2, #1
 80057be:	701a      	strb	r2, [r3, #0]
 80057c0:	e78c      	b.n	80056dc <_dtoa_r+0x63c>
 80057c2:	4b7f      	ldr	r3, [pc, #508]	; (80059c0 <_dtoa_r+0x920>)
 80057c4:	2200      	movs	r2, #0
 80057c6:	f7fa ff17 	bl	80005f8 <__aeabi_dmul>
 80057ca:	2200      	movs	r2, #0
 80057cc:	2300      	movs	r3, #0
 80057ce:	4606      	mov	r6, r0
 80057d0:	460f      	mov	r7, r1
 80057d2:	f7fb f979 	bl	8000ac8 <__aeabi_dcmpeq>
 80057d6:	2800      	cmp	r0, #0
 80057d8:	d09b      	beq.n	8005712 <_dtoa_r+0x672>
 80057da:	e7cd      	b.n	8005778 <_dtoa_r+0x6d8>
 80057dc:	9a08      	ldr	r2, [sp, #32]
 80057de:	2a00      	cmp	r2, #0
 80057e0:	f000 80c4 	beq.w	800596c <_dtoa_r+0x8cc>
 80057e4:	9a05      	ldr	r2, [sp, #20]
 80057e6:	2a01      	cmp	r2, #1
 80057e8:	f300 80a8 	bgt.w	800593c <_dtoa_r+0x89c>
 80057ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80057ee:	2a00      	cmp	r2, #0
 80057f0:	f000 80a0 	beq.w	8005934 <_dtoa_r+0x894>
 80057f4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80057f8:	9e06      	ldr	r6, [sp, #24]
 80057fa:	4645      	mov	r5, r8
 80057fc:	9a04      	ldr	r2, [sp, #16]
 80057fe:	2101      	movs	r1, #1
 8005800:	441a      	add	r2, r3
 8005802:	4620      	mov	r0, r4
 8005804:	4498      	add	r8, r3
 8005806:	9204      	str	r2, [sp, #16]
 8005808:	f000 ff18 	bl	800663c <__i2b>
 800580c:	4607      	mov	r7, r0
 800580e:	2d00      	cmp	r5, #0
 8005810:	dd0b      	ble.n	800582a <_dtoa_r+0x78a>
 8005812:	9b04      	ldr	r3, [sp, #16]
 8005814:	2b00      	cmp	r3, #0
 8005816:	dd08      	ble.n	800582a <_dtoa_r+0x78a>
 8005818:	42ab      	cmp	r3, r5
 800581a:	9a04      	ldr	r2, [sp, #16]
 800581c:	bfa8      	it	ge
 800581e:	462b      	movge	r3, r5
 8005820:	eba8 0803 	sub.w	r8, r8, r3
 8005824:	1aed      	subs	r5, r5, r3
 8005826:	1ad3      	subs	r3, r2, r3
 8005828:	9304      	str	r3, [sp, #16]
 800582a:	9b06      	ldr	r3, [sp, #24]
 800582c:	b1fb      	cbz	r3, 800586e <_dtoa_r+0x7ce>
 800582e:	9b08      	ldr	r3, [sp, #32]
 8005830:	2b00      	cmp	r3, #0
 8005832:	f000 809f 	beq.w	8005974 <_dtoa_r+0x8d4>
 8005836:	2e00      	cmp	r6, #0
 8005838:	dd11      	ble.n	800585e <_dtoa_r+0x7be>
 800583a:	4639      	mov	r1, r7
 800583c:	4632      	mov	r2, r6
 800583e:	4620      	mov	r0, r4
 8005840:	f000 ffb8 	bl	80067b4 <__pow5mult>
 8005844:	465a      	mov	r2, fp
 8005846:	4601      	mov	r1, r0
 8005848:	4607      	mov	r7, r0
 800584a:	4620      	mov	r0, r4
 800584c:	f000 ff0c 	bl	8006668 <__multiply>
 8005850:	4659      	mov	r1, fp
 8005852:	9007      	str	r0, [sp, #28]
 8005854:	4620      	mov	r0, r4
 8005856:	f000 fdeb 	bl	8006430 <_Bfree>
 800585a:	9b07      	ldr	r3, [sp, #28]
 800585c:	469b      	mov	fp, r3
 800585e:	9b06      	ldr	r3, [sp, #24]
 8005860:	1b9a      	subs	r2, r3, r6
 8005862:	d004      	beq.n	800586e <_dtoa_r+0x7ce>
 8005864:	4659      	mov	r1, fp
 8005866:	4620      	mov	r0, r4
 8005868:	f000 ffa4 	bl	80067b4 <__pow5mult>
 800586c:	4683      	mov	fp, r0
 800586e:	2101      	movs	r1, #1
 8005870:	4620      	mov	r0, r4
 8005872:	f000 fee3 	bl	800663c <__i2b>
 8005876:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005878:	2b00      	cmp	r3, #0
 800587a:	4606      	mov	r6, r0
 800587c:	dd7c      	ble.n	8005978 <_dtoa_r+0x8d8>
 800587e:	461a      	mov	r2, r3
 8005880:	4601      	mov	r1, r0
 8005882:	4620      	mov	r0, r4
 8005884:	f000 ff96 	bl	80067b4 <__pow5mult>
 8005888:	9b05      	ldr	r3, [sp, #20]
 800588a:	2b01      	cmp	r3, #1
 800588c:	4606      	mov	r6, r0
 800588e:	dd76      	ble.n	800597e <_dtoa_r+0x8de>
 8005890:	2300      	movs	r3, #0
 8005892:	9306      	str	r3, [sp, #24]
 8005894:	6933      	ldr	r3, [r6, #16]
 8005896:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800589a:	6918      	ldr	r0, [r3, #16]
 800589c:	f000 fe7e 	bl	800659c <__hi0bits>
 80058a0:	f1c0 0020 	rsb	r0, r0, #32
 80058a4:	9b04      	ldr	r3, [sp, #16]
 80058a6:	4418      	add	r0, r3
 80058a8:	f010 001f 	ands.w	r0, r0, #31
 80058ac:	f000 8086 	beq.w	80059bc <_dtoa_r+0x91c>
 80058b0:	f1c0 0320 	rsb	r3, r0, #32
 80058b4:	2b04      	cmp	r3, #4
 80058b6:	dd7f      	ble.n	80059b8 <_dtoa_r+0x918>
 80058b8:	f1c0 001c 	rsb	r0, r0, #28
 80058bc:	9b04      	ldr	r3, [sp, #16]
 80058be:	4403      	add	r3, r0
 80058c0:	4480      	add	r8, r0
 80058c2:	4405      	add	r5, r0
 80058c4:	9304      	str	r3, [sp, #16]
 80058c6:	f1b8 0f00 	cmp.w	r8, #0
 80058ca:	dd05      	ble.n	80058d8 <_dtoa_r+0x838>
 80058cc:	4659      	mov	r1, fp
 80058ce:	4642      	mov	r2, r8
 80058d0:	4620      	mov	r0, r4
 80058d2:	f000 ffc9 	bl	8006868 <__lshift>
 80058d6:	4683      	mov	fp, r0
 80058d8:	9b04      	ldr	r3, [sp, #16]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	dd05      	ble.n	80058ea <_dtoa_r+0x84a>
 80058de:	4631      	mov	r1, r6
 80058e0:	461a      	mov	r2, r3
 80058e2:	4620      	mov	r0, r4
 80058e4:	f000 ffc0 	bl	8006868 <__lshift>
 80058e8:	4606      	mov	r6, r0
 80058ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d069      	beq.n	80059c4 <_dtoa_r+0x924>
 80058f0:	4631      	mov	r1, r6
 80058f2:	4658      	mov	r0, fp
 80058f4:	f001 f824 	bl	8006940 <__mcmp>
 80058f8:	2800      	cmp	r0, #0
 80058fa:	da63      	bge.n	80059c4 <_dtoa_r+0x924>
 80058fc:	2300      	movs	r3, #0
 80058fe:	4659      	mov	r1, fp
 8005900:	220a      	movs	r2, #10
 8005902:	4620      	mov	r0, r4
 8005904:	f000 fdb6 	bl	8006474 <__multadd>
 8005908:	9b08      	ldr	r3, [sp, #32]
 800590a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800590e:	4683      	mov	fp, r0
 8005910:	2b00      	cmp	r3, #0
 8005912:	f000 818f 	beq.w	8005c34 <_dtoa_r+0xb94>
 8005916:	4639      	mov	r1, r7
 8005918:	2300      	movs	r3, #0
 800591a:	220a      	movs	r2, #10
 800591c:	4620      	mov	r0, r4
 800591e:	f000 fda9 	bl	8006474 <__multadd>
 8005922:	f1b9 0f00 	cmp.w	r9, #0
 8005926:	4607      	mov	r7, r0
 8005928:	f300 808e 	bgt.w	8005a48 <_dtoa_r+0x9a8>
 800592c:	9b05      	ldr	r3, [sp, #20]
 800592e:	2b02      	cmp	r3, #2
 8005930:	dc50      	bgt.n	80059d4 <_dtoa_r+0x934>
 8005932:	e089      	b.n	8005a48 <_dtoa_r+0x9a8>
 8005934:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005936:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800593a:	e75d      	b.n	80057f8 <_dtoa_r+0x758>
 800593c:	9b01      	ldr	r3, [sp, #4]
 800593e:	1e5e      	subs	r6, r3, #1
 8005940:	9b06      	ldr	r3, [sp, #24]
 8005942:	42b3      	cmp	r3, r6
 8005944:	bfbf      	itttt	lt
 8005946:	9b06      	ldrlt	r3, [sp, #24]
 8005948:	9606      	strlt	r6, [sp, #24]
 800594a:	1af2      	sublt	r2, r6, r3
 800594c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800594e:	bfb6      	itet	lt
 8005950:	189b      	addlt	r3, r3, r2
 8005952:	1b9e      	subge	r6, r3, r6
 8005954:	930d      	strlt	r3, [sp, #52]	; 0x34
 8005956:	9b01      	ldr	r3, [sp, #4]
 8005958:	bfb8      	it	lt
 800595a:	2600      	movlt	r6, #0
 800595c:	2b00      	cmp	r3, #0
 800595e:	bfb5      	itete	lt
 8005960:	eba8 0503 	sublt.w	r5, r8, r3
 8005964:	9b01      	ldrge	r3, [sp, #4]
 8005966:	2300      	movlt	r3, #0
 8005968:	4645      	movge	r5, r8
 800596a:	e747      	b.n	80057fc <_dtoa_r+0x75c>
 800596c:	9e06      	ldr	r6, [sp, #24]
 800596e:	9f08      	ldr	r7, [sp, #32]
 8005970:	4645      	mov	r5, r8
 8005972:	e74c      	b.n	800580e <_dtoa_r+0x76e>
 8005974:	9a06      	ldr	r2, [sp, #24]
 8005976:	e775      	b.n	8005864 <_dtoa_r+0x7c4>
 8005978:	9b05      	ldr	r3, [sp, #20]
 800597a:	2b01      	cmp	r3, #1
 800597c:	dc18      	bgt.n	80059b0 <_dtoa_r+0x910>
 800597e:	9b02      	ldr	r3, [sp, #8]
 8005980:	b9b3      	cbnz	r3, 80059b0 <_dtoa_r+0x910>
 8005982:	9b03      	ldr	r3, [sp, #12]
 8005984:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005988:	b9a3      	cbnz	r3, 80059b4 <_dtoa_r+0x914>
 800598a:	9b03      	ldr	r3, [sp, #12]
 800598c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005990:	0d1b      	lsrs	r3, r3, #20
 8005992:	051b      	lsls	r3, r3, #20
 8005994:	b12b      	cbz	r3, 80059a2 <_dtoa_r+0x902>
 8005996:	9b04      	ldr	r3, [sp, #16]
 8005998:	3301      	adds	r3, #1
 800599a:	9304      	str	r3, [sp, #16]
 800599c:	f108 0801 	add.w	r8, r8, #1
 80059a0:	2301      	movs	r3, #1
 80059a2:	9306      	str	r3, [sp, #24]
 80059a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	f47f af74 	bne.w	8005894 <_dtoa_r+0x7f4>
 80059ac:	2001      	movs	r0, #1
 80059ae:	e779      	b.n	80058a4 <_dtoa_r+0x804>
 80059b0:	2300      	movs	r3, #0
 80059b2:	e7f6      	b.n	80059a2 <_dtoa_r+0x902>
 80059b4:	9b02      	ldr	r3, [sp, #8]
 80059b6:	e7f4      	b.n	80059a2 <_dtoa_r+0x902>
 80059b8:	d085      	beq.n	80058c6 <_dtoa_r+0x826>
 80059ba:	4618      	mov	r0, r3
 80059bc:	301c      	adds	r0, #28
 80059be:	e77d      	b.n	80058bc <_dtoa_r+0x81c>
 80059c0:	40240000 	.word	0x40240000
 80059c4:	9b01      	ldr	r3, [sp, #4]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	dc38      	bgt.n	8005a3c <_dtoa_r+0x99c>
 80059ca:	9b05      	ldr	r3, [sp, #20]
 80059cc:	2b02      	cmp	r3, #2
 80059ce:	dd35      	ble.n	8005a3c <_dtoa_r+0x99c>
 80059d0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80059d4:	f1b9 0f00 	cmp.w	r9, #0
 80059d8:	d10d      	bne.n	80059f6 <_dtoa_r+0x956>
 80059da:	4631      	mov	r1, r6
 80059dc:	464b      	mov	r3, r9
 80059de:	2205      	movs	r2, #5
 80059e0:	4620      	mov	r0, r4
 80059e2:	f000 fd47 	bl	8006474 <__multadd>
 80059e6:	4601      	mov	r1, r0
 80059e8:	4606      	mov	r6, r0
 80059ea:	4658      	mov	r0, fp
 80059ec:	f000 ffa8 	bl	8006940 <__mcmp>
 80059f0:	2800      	cmp	r0, #0
 80059f2:	f73f adbd 	bgt.w	8005570 <_dtoa_r+0x4d0>
 80059f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059f8:	9d00      	ldr	r5, [sp, #0]
 80059fa:	ea6f 0a03 	mvn.w	sl, r3
 80059fe:	f04f 0800 	mov.w	r8, #0
 8005a02:	4631      	mov	r1, r6
 8005a04:	4620      	mov	r0, r4
 8005a06:	f000 fd13 	bl	8006430 <_Bfree>
 8005a0a:	2f00      	cmp	r7, #0
 8005a0c:	f43f aeb4 	beq.w	8005778 <_dtoa_r+0x6d8>
 8005a10:	f1b8 0f00 	cmp.w	r8, #0
 8005a14:	d005      	beq.n	8005a22 <_dtoa_r+0x982>
 8005a16:	45b8      	cmp	r8, r7
 8005a18:	d003      	beq.n	8005a22 <_dtoa_r+0x982>
 8005a1a:	4641      	mov	r1, r8
 8005a1c:	4620      	mov	r0, r4
 8005a1e:	f000 fd07 	bl	8006430 <_Bfree>
 8005a22:	4639      	mov	r1, r7
 8005a24:	4620      	mov	r0, r4
 8005a26:	f000 fd03 	bl	8006430 <_Bfree>
 8005a2a:	e6a5      	b.n	8005778 <_dtoa_r+0x6d8>
 8005a2c:	2600      	movs	r6, #0
 8005a2e:	4637      	mov	r7, r6
 8005a30:	e7e1      	b.n	80059f6 <_dtoa_r+0x956>
 8005a32:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005a34:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005a38:	4637      	mov	r7, r6
 8005a3a:	e599      	b.n	8005570 <_dtoa_r+0x4d0>
 8005a3c:	9b08      	ldr	r3, [sp, #32]
 8005a3e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	f000 80fd 	beq.w	8005c42 <_dtoa_r+0xba2>
 8005a48:	2d00      	cmp	r5, #0
 8005a4a:	dd05      	ble.n	8005a58 <_dtoa_r+0x9b8>
 8005a4c:	4639      	mov	r1, r7
 8005a4e:	462a      	mov	r2, r5
 8005a50:	4620      	mov	r0, r4
 8005a52:	f000 ff09 	bl	8006868 <__lshift>
 8005a56:	4607      	mov	r7, r0
 8005a58:	9b06      	ldr	r3, [sp, #24]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d05c      	beq.n	8005b18 <_dtoa_r+0xa78>
 8005a5e:	6879      	ldr	r1, [r7, #4]
 8005a60:	4620      	mov	r0, r4
 8005a62:	f000 fca5 	bl	80063b0 <_Balloc>
 8005a66:	4605      	mov	r5, r0
 8005a68:	b928      	cbnz	r0, 8005a76 <_dtoa_r+0x9d6>
 8005a6a:	4b80      	ldr	r3, [pc, #512]	; (8005c6c <_dtoa_r+0xbcc>)
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005a72:	f7ff bb2e 	b.w	80050d2 <_dtoa_r+0x32>
 8005a76:	693a      	ldr	r2, [r7, #16]
 8005a78:	3202      	adds	r2, #2
 8005a7a:	0092      	lsls	r2, r2, #2
 8005a7c:	f107 010c 	add.w	r1, r7, #12
 8005a80:	300c      	adds	r0, #12
 8005a82:	f000 fc87 	bl	8006394 <memcpy>
 8005a86:	2201      	movs	r2, #1
 8005a88:	4629      	mov	r1, r5
 8005a8a:	4620      	mov	r0, r4
 8005a8c:	f000 feec 	bl	8006868 <__lshift>
 8005a90:	9b00      	ldr	r3, [sp, #0]
 8005a92:	3301      	adds	r3, #1
 8005a94:	9301      	str	r3, [sp, #4]
 8005a96:	9b00      	ldr	r3, [sp, #0]
 8005a98:	444b      	add	r3, r9
 8005a9a:	9307      	str	r3, [sp, #28]
 8005a9c:	9b02      	ldr	r3, [sp, #8]
 8005a9e:	f003 0301 	and.w	r3, r3, #1
 8005aa2:	46b8      	mov	r8, r7
 8005aa4:	9306      	str	r3, [sp, #24]
 8005aa6:	4607      	mov	r7, r0
 8005aa8:	9b01      	ldr	r3, [sp, #4]
 8005aaa:	4631      	mov	r1, r6
 8005aac:	3b01      	subs	r3, #1
 8005aae:	4658      	mov	r0, fp
 8005ab0:	9302      	str	r3, [sp, #8]
 8005ab2:	f7ff fa67 	bl	8004f84 <quorem>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	3330      	adds	r3, #48	; 0x30
 8005aba:	9004      	str	r0, [sp, #16]
 8005abc:	4641      	mov	r1, r8
 8005abe:	4658      	mov	r0, fp
 8005ac0:	9308      	str	r3, [sp, #32]
 8005ac2:	f000 ff3d 	bl	8006940 <__mcmp>
 8005ac6:	463a      	mov	r2, r7
 8005ac8:	4681      	mov	r9, r0
 8005aca:	4631      	mov	r1, r6
 8005acc:	4620      	mov	r0, r4
 8005ace:	f000 ff53 	bl	8006978 <__mdiff>
 8005ad2:	68c2      	ldr	r2, [r0, #12]
 8005ad4:	9b08      	ldr	r3, [sp, #32]
 8005ad6:	4605      	mov	r5, r0
 8005ad8:	bb02      	cbnz	r2, 8005b1c <_dtoa_r+0xa7c>
 8005ada:	4601      	mov	r1, r0
 8005adc:	4658      	mov	r0, fp
 8005ade:	f000 ff2f 	bl	8006940 <__mcmp>
 8005ae2:	9b08      	ldr	r3, [sp, #32]
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	4629      	mov	r1, r5
 8005ae8:	4620      	mov	r0, r4
 8005aea:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8005aee:	f000 fc9f 	bl	8006430 <_Bfree>
 8005af2:	9b05      	ldr	r3, [sp, #20]
 8005af4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005af6:	9d01      	ldr	r5, [sp, #4]
 8005af8:	ea43 0102 	orr.w	r1, r3, r2
 8005afc:	9b06      	ldr	r3, [sp, #24]
 8005afe:	430b      	orrs	r3, r1
 8005b00:	9b08      	ldr	r3, [sp, #32]
 8005b02:	d10d      	bne.n	8005b20 <_dtoa_r+0xa80>
 8005b04:	2b39      	cmp	r3, #57	; 0x39
 8005b06:	d029      	beq.n	8005b5c <_dtoa_r+0xabc>
 8005b08:	f1b9 0f00 	cmp.w	r9, #0
 8005b0c:	dd01      	ble.n	8005b12 <_dtoa_r+0xa72>
 8005b0e:	9b04      	ldr	r3, [sp, #16]
 8005b10:	3331      	adds	r3, #49	; 0x31
 8005b12:	9a02      	ldr	r2, [sp, #8]
 8005b14:	7013      	strb	r3, [r2, #0]
 8005b16:	e774      	b.n	8005a02 <_dtoa_r+0x962>
 8005b18:	4638      	mov	r0, r7
 8005b1a:	e7b9      	b.n	8005a90 <_dtoa_r+0x9f0>
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	e7e2      	b.n	8005ae6 <_dtoa_r+0xa46>
 8005b20:	f1b9 0f00 	cmp.w	r9, #0
 8005b24:	db06      	blt.n	8005b34 <_dtoa_r+0xa94>
 8005b26:	9905      	ldr	r1, [sp, #20]
 8005b28:	ea41 0909 	orr.w	r9, r1, r9
 8005b2c:	9906      	ldr	r1, [sp, #24]
 8005b2e:	ea59 0101 	orrs.w	r1, r9, r1
 8005b32:	d120      	bne.n	8005b76 <_dtoa_r+0xad6>
 8005b34:	2a00      	cmp	r2, #0
 8005b36:	ddec      	ble.n	8005b12 <_dtoa_r+0xa72>
 8005b38:	4659      	mov	r1, fp
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	4620      	mov	r0, r4
 8005b3e:	9301      	str	r3, [sp, #4]
 8005b40:	f000 fe92 	bl	8006868 <__lshift>
 8005b44:	4631      	mov	r1, r6
 8005b46:	4683      	mov	fp, r0
 8005b48:	f000 fefa 	bl	8006940 <__mcmp>
 8005b4c:	2800      	cmp	r0, #0
 8005b4e:	9b01      	ldr	r3, [sp, #4]
 8005b50:	dc02      	bgt.n	8005b58 <_dtoa_r+0xab8>
 8005b52:	d1de      	bne.n	8005b12 <_dtoa_r+0xa72>
 8005b54:	07da      	lsls	r2, r3, #31
 8005b56:	d5dc      	bpl.n	8005b12 <_dtoa_r+0xa72>
 8005b58:	2b39      	cmp	r3, #57	; 0x39
 8005b5a:	d1d8      	bne.n	8005b0e <_dtoa_r+0xa6e>
 8005b5c:	9a02      	ldr	r2, [sp, #8]
 8005b5e:	2339      	movs	r3, #57	; 0x39
 8005b60:	7013      	strb	r3, [r2, #0]
 8005b62:	462b      	mov	r3, r5
 8005b64:	461d      	mov	r5, r3
 8005b66:	3b01      	subs	r3, #1
 8005b68:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005b6c:	2a39      	cmp	r2, #57	; 0x39
 8005b6e:	d050      	beq.n	8005c12 <_dtoa_r+0xb72>
 8005b70:	3201      	adds	r2, #1
 8005b72:	701a      	strb	r2, [r3, #0]
 8005b74:	e745      	b.n	8005a02 <_dtoa_r+0x962>
 8005b76:	2a00      	cmp	r2, #0
 8005b78:	dd03      	ble.n	8005b82 <_dtoa_r+0xae2>
 8005b7a:	2b39      	cmp	r3, #57	; 0x39
 8005b7c:	d0ee      	beq.n	8005b5c <_dtoa_r+0xabc>
 8005b7e:	3301      	adds	r3, #1
 8005b80:	e7c7      	b.n	8005b12 <_dtoa_r+0xa72>
 8005b82:	9a01      	ldr	r2, [sp, #4]
 8005b84:	9907      	ldr	r1, [sp, #28]
 8005b86:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005b8a:	428a      	cmp	r2, r1
 8005b8c:	d02a      	beq.n	8005be4 <_dtoa_r+0xb44>
 8005b8e:	4659      	mov	r1, fp
 8005b90:	2300      	movs	r3, #0
 8005b92:	220a      	movs	r2, #10
 8005b94:	4620      	mov	r0, r4
 8005b96:	f000 fc6d 	bl	8006474 <__multadd>
 8005b9a:	45b8      	cmp	r8, r7
 8005b9c:	4683      	mov	fp, r0
 8005b9e:	f04f 0300 	mov.w	r3, #0
 8005ba2:	f04f 020a 	mov.w	r2, #10
 8005ba6:	4641      	mov	r1, r8
 8005ba8:	4620      	mov	r0, r4
 8005baa:	d107      	bne.n	8005bbc <_dtoa_r+0xb1c>
 8005bac:	f000 fc62 	bl	8006474 <__multadd>
 8005bb0:	4680      	mov	r8, r0
 8005bb2:	4607      	mov	r7, r0
 8005bb4:	9b01      	ldr	r3, [sp, #4]
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	9301      	str	r3, [sp, #4]
 8005bba:	e775      	b.n	8005aa8 <_dtoa_r+0xa08>
 8005bbc:	f000 fc5a 	bl	8006474 <__multadd>
 8005bc0:	4639      	mov	r1, r7
 8005bc2:	4680      	mov	r8, r0
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	220a      	movs	r2, #10
 8005bc8:	4620      	mov	r0, r4
 8005bca:	f000 fc53 	bl	8006474 <__multadd>
 8005bce:	4607      	mov	r7, r0
 8005bd0:	e7f0      	b.n	8005bb4 <_dtoa_r+0xb14>
 8005bd2:	f1b9 0f00 	cmp.w	r9, #0
 8005bd6:	9a00      	ldr	r2, [sp, #0]
 8005bd8:	bfcc      	ite	gt
 8005bda:	464d      	movgt	r5, r9
 8005bdc:	2501      	movle	r5, #1
 8005bde:	4415      	add	r5, r2
 8005be0:	f04f 0800 	mov.w	r8, #0
 8005be4:	4659      	mov	r1, fp
 8005be6:	2201      	movs	r2, #1
 8005be8:	4620      	mov	r0, r4
 8005bea:	9301      	str	r3, [sp, #4]
 8005bec:	f000 fe3c 	bl	8006868 <__lshift>
 8005bf0:	4631      	mov	r1, r6
 8005bf2:	4683      	mov	fp, r0
 8005bf4:	f000 fea4 	bl	8006940 <__mcmp>
 8005bf8:	2800      	cmp	r0, #0
 8005bfa:	dcb2      	bgt.n	8005b62 <_dtoa_r+0xac2>
 8005bfc:	d102      	bne.n	8005c04 <_dtoa_r+0xb64>
 8005bfe:	9b01      	ldr	r3, [sp, #4]
 8005c00:	07db      	lsls	r3, r3, #31
 8005c02:	d4ae      	bmi.n	8005b62 <_dtoa_r+0xac2>
 8005c04:	462b      	mov	r3, r5
 8005c06:	461d      	mov	r5, r3
 8005c08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005c0c:	2a30      	cmp	r2, #48	; 0x30
 8005c0e:	d0fa      	beq.n	8005c06 <_dtoa_r+0xb66>
 8005c10:	e6f7      	b.n	8005a02 <_dtoa_r+0x962>
 8005c12:	9a00      	ldr	r2, [sp, #0]
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d1a5      	bne.n	8005b64 <_dtoa_r+0xac4>
 8005c18:	f10a 0a01 	add.w	sl, sl, #1
 8005c1c:	2331      	movs	r3, #49	; 0x31
 8005c1e:	e779      	b.n	8005b14 <_dtoa_r+0xa74>
 8005c20:	4b13      	ldr	r3, [pc, #76]	; (8005c70 <_dtoa_r+0xbd0>)
 8005c22:	f7ff baaf 	b.w	8005184 <_dtoa_r+0xe4>
 8005c26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	f47f aa86 	bne.w	800513a <_dtoa_r+0x9a>
 8005c2e:	4b11      	ldr	r3, [pc, #68]	; (8005c74 <_dtoa_r+0xbd4>)
 8005c30:	f7ff baa8 	b.w	8005184 <_dtoa_r+0xe4>
 8005c34:	f1b9 0f00 	cmp.w	r9, #0
 8005c38:	dc03      	bgt.n	8005c42 <_dtoa_r+0xba2>
 8005c3a:	9b05      	ldr	r3, [sp, #20]
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	f73f aec9 	bgt.w	80059d4 <_dtoa_r+0x934>
 8005c42:	9d00      	ldr	r5, [sp, #0]
 8005c44:	4631      	mov	r1, r6
 8005c46:	4658      	mov	r0, fp
 8005c48:	f7ff f99c 	bl	8004f84 <quorem>
 8005c4c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005c50:	f805 3b01 	strb.w	r3, [r5], #1
 8005c54:	9a00      	ldr	r2, [sp, #0]
 8005c56:	1aaa      	subs	r2, r5, r2
 8005c58:	4591      	cmp	r9, r2
 8005c5a:	ddba      	ble.n	8005bd2 <_dtoa_r+0xb32>
 8005c5c:	4659      	mov	r1, fp
 8005c5e:	2300      	movs	r3, #0
 8005c60:	220a      	movs	r2, #10
 8005c62:	4620      	mov	r0, r4
 8005c64:	f000 fc06 	bl	8006474 <__multadd>
 8005c68:	4683      	mov	fp, r0
 8005c6a:	e7eb      	b.n	8005c44 <_dtoa_r+0xba4>
 8005c6c:	080092b4 	.word	0x080092b4
 8005c70:	080090b0 	.word	0x080090b0
 8005c74:	08009231 	.word	0x08009231

08005c78 <rshift>:
 8005c78:	6903      	ldr	r3, [r0, #16]
 8005c7a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8005c7e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005c82:	ea4f 1261 	mov.w	r2, r1, asr #5
 8005c86:	f100 0414 	add.w	r4, r0, #20
 8005c8a:	dd45      	ble.n	8005d18 <rshift+0xa0>
 8005c8c:	f011 011f 	ands.w	r1, r1, #31
 8005c90:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8005c94:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8005c98:	d10c      	bne.n	8005cb4 <rshift+0x3c>
 8005c9a:	f100 0710 	add.w	r7, r0, #16
 8005c9e:	4629      	mov	r1, r5
 8005ca0:	42b1      	cmp	r1, r6
 8005ca2:	d334      	bcc.n	8005d0e <rshift+0x96>
 8005ca4:	1a9b      	subs	r3, r3, r2
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	1eea      	subs	r2, r5, #3
 8005caa:	4296      	cmp	r6, r2
 8005cac:	bf38      	it	cc
 8005cae:	2300      	movcc	r3, #0
 8005cb0:	4423      	add	r3, r4
 8005cb2:	e015      	b.n	8005ce0 <rshift+0x68>
 8005cb4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8005cb8:	f1c1 0820 	rsb	r8, r1, #32
 8005cbc:	40cf      	lsrs	r7, r1
 8005cbe:	f105 0e04 	add.w	lr, r5, #4
 8005cc2:	46a1      	mov	r9, r4
 8005cc4:	4576      	cmp	r6, lr
 8005cc6:	46f4      	mov	ip, lr
 8005cc8:	d815      	bhi.n	8005cf6 <rshift+0x7e>
 8005cca:	1a9b      	subs	r3, r3, r2
 8005ccc:	009a      	lsls	r2, r3, #2
 8005cce:	3a04      	subs	r2, #4
 8005cd0:	3501      	adds	r5, #1
 8005cd2:	42ae      	cmp	r6, r5
 8005cd4:	bf38      	it	cc
 8005cd6:	2200      	movcc	r2, #0
 8005cd8:	18a3      	adds	r3, r4, r2
 8005cda:	50a7      	str	r7, [r4, r2]
 8005cdc:	b107      	cbz	r7, 8005ce0 <rshift+0x68>
 8005cde:	3304      	adds	r3, #4
 8005ce0:	1b1a      	subs	r2, r3, r4
 8005ce2:	42a3      	cmp	r3, r4
 8005ce4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8005ce8:	bf08      	it	eq
 8005cea:	2300      	moveq	r3, #0
 8005cec:	6102      	str	r2, [r0, #16]
 8005cee:	bf08      	it	eq
 8005cf0:	6143      	streq	r3, [r0, #20]
 8005cf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005cf6:	f8dc c000 	ldr.w	ip, [ip]
 8005cfa:	fa0c fc08 	lsl.w	ip, ip, r8
 8005cfe:	ea4c 0707 	orr.w	r7, ip, r7
 8005d02:	f849 7b04 	str.w	r7, [r9], #4
 8005d06:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005d0a:	40cf      	lsrs	r7, r1
 8005d0c:	e7da      	b.n	8005cc4 <rshift+0x4c>
 8005d0e:	f851 cb04 	ldr.w	ip, [r1], #4
 8005d12:	f847 cf04 	str.w	ip, [r7, #4]!
 8005d16:	e7c3      	b.n	8005ca0 <rshift+0x28>
 8005d18:	4623      	mov	r3, r4
 8005d1a:	e7e1      	b.n	8005ce0 <rshift+0x68>

08005d1c <__hexdig_fun>:
 8005d1c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8005d20:	2b09      	cmp	r3, #9
 8005d22:	d802      	bhi.n	8005d2a <__hexdig_fun+0xe>
 8005d24:	3820      	subs	r0, #32
 8005d26:	b2c0      	uxtb	r0, r0
 8005d28:	4770      	bx	lr
 8005d2a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8005d2e:	2b05      	cmp	r3, #5
 8005d30:	d801      	bhi.n	8005d36 <__hexdig_fun+0x1a>
 8005d32:	3847      	subs	r0, #71	; 0x47
 8005d34:	e7f7      	b.n	8005d26 <__hexdig_fun+0xa>
 8005d36:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8005d3a:	2b05      	cmp	r3, #5
 8005d3c:	d801      	bhi.n	8005d42 <__hexdig_fun+0x26>
 8005d3e:	3827      	subs	r0, #39	; 0x27
 8005d40:	e7f1      	b.n	8005d26 <__hexdig_fun+0xa>
 8005d42:	2000      	movs	r0, #0
 8005d44:	4770      	bx	lr
	...

08005d48 <__gethex>:
 8005d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d4c:	ed2d 8b02 	vpush	{d8}
 8005d50:	b089      	sub	sp, #36	; 0x24
 8005d52:	ee08 0a10 	vmov	s16, r0
 8005d56:	9304      	str	r3, [sp, #16]
 8005d58:	4bbc      	ldr	r3, [pc, #752]	; (800604c <__gethex+0x304>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	9301      	str	r3, [sp, #4]
 8005d5e:	4618      	mov	r0, r3
 8005d60:	468b      	mov	fp, r1
 8005d62:	4690      	mov	r8, r2
 8005d64:	f7fa fa34 	bl	80001d0 <strlen>
 8005d68:	9b01      	ldr	r3, [sp, #4]
 8005d6a:	f8db 2000 	ldr.w	r2, [fp]
 8005d6e:	4403      	add	r3, r0
 8005d70:	4682      	mov	sl, r0
 8005d72:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8005d76:	9305      	str	r3, [sp, #20]
 8005d78:	1c93      	adds	r3, r2, #2
 8005d7a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8005d7e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8005d82:	32fe      	adds	r2, #254	; 0xfe
 8005d84:	18d1      	adds	r1, r2, r3
 8005d86:	461f      	mov	r7, r3
 8005d88:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005d8c:	9100      	str	r1, [sp, #0]
 8005d8e:	2830      	cmp	r0, #48	; 0x30
 8005d90:	d0f8      	beq.n	8005d84 <__gethex+0x3c>
 8005d92:	f7ff ffc3 	bl	8005d1c <__hexdig_fun>
 8005d96:	4604      	mov	r4, r0
 8005d98:	2800      	cmp	r0, #0
 8005d9a:	d13a      	bne.n	8005e12 <__gethex+0xca>
 8005d9c:	9901      	ldr	r1, [sp, #4]
 8005d9e:	4652      	mov	r2, sl
 8005da0:	4638      	mov	r0, r7
 8005da2:	f001 f9ed 	bl	8007180 <strncmp>
 8005da6:	4605      	mov	r5, r0
 8005da8:	2800      	cmp	r0, #0
 8005daa:	d168      	bne.n	8005e7e <__gethex+0x136>
 8005dac:	f817 000a 	ldrb.w	r0, [r7, sl]
 8005db0:	eb07 060a 	add.w	r6, r7, sl
 8005db4:	f7ff ffb2 	bl	8005d1c <__hexdig_fun>
 8005db8:	2800      	cmp	r0, #0
 8005dba:	d062      	beq.n	8005e82 <__gethex+0x13a>
 8005dbc:	4633      	mov	r3, r6
 8005dbe:	7818      	ldrb	r0, [r3, #0]
 8005dc0:	2830      	cmp	r0, #48	; 0x30
 8005dc2:	461f      	mov	r7, r3
 8005dc4:	f103 0301 	add.w	r3, r3, #1
 8005dc8:	d0f9      	beq.n	8005dbe <__gethex+0x76>
 8005dca:	f7ff ffa7 	bl	8005d1c <__hexdig_fun>
 8005dce:	2301      	movs	r3, #1
 8005dd0:	fab0 f480 	clz	r4, r0
 8005dd4:	0964      	lsrs	r4, r4, #5
 8005dd6:	4635      	mov	r5, r6
 8005dd8:	9300      	str	r3, [sp, #0]
 8005dda:	463a      	mov	r2, r7
 8005ddc:	4616      	mov	r6, r2
 8005dde:	3201      	adds	r2, #1
 8005de0:	7830      	ldrb	r0, [r6, #0]
 8005de2:	f7ff ff9b 	bl	8005d1c <__hexdig_fun>
 8005de6:	2800      	cmp	r0, #0
 8005de8:	d1f8      	bne.n	8005ddc <__gethex+0x94>
 8005dea:	9901      	ldr	r1, [sp, #4]
 8005dec:	4652      	mov	r2, sl
 8005dee:	4630      	mov	r0, r6
 8005df0:	f001 f9c6 	bl	8007180 <strncmp>
 8005df4:	b980      	cbnz	r0, 8005e18 <__gethex+0xd0>
 8005df6:	b94d      	cbnz	r5, 8005e0c <__gethex+0xc4>
 8005df8:	eb06 050a 	add.w	r5, r6, sl
 8005dfc:	462a      	mov	r2, r5
 8005dfe:	4616      	mov	r6, r2
 8005e00:	3201      	adds	r2, #1
 8005e02:	7830      	ldrb	r0, [r6, #0]
 8005e04:	f7ff ff8a 	bl	8005d1c <__hexdig_fun>
 8005e08:	2800      	cmp	r0, #0
 8005e0a:	d1f8      	bne.n	8005dfe <__gethex+0xb6>
 8005e0c:	1bad      	subs	r5, r5, r6
 8005e0e:	00ad      	lsls	r5, r5, #2
 8005e10:	e004      	b.n	8005e1c <__gethex+0xd4>
 8005e12:	2400      	movs	r4, #0
 8005e14:	4625      	mov	r5, r4
 8005e16:	e7e0      	b.n	8005dda <__gethex+0x92>
 8005e18:	2d00      	cmp	r5, #0
 8005e1a:	d1f7      	bne.n	8005e0c <__gethex+0xc4>
 8005e1c:	7833      	ldrb	r3, [r6, #0]
 8005e1e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005e22:	2b50      	cmp	r3, #80	; 0x50
 8005e24:	d13b      	bne.n	8005e9e <__gethex+0x156>
 8005e26:	7873      	ldrb	r3, [r6, #1]
 8005e28:	2b2b      	cmp	r3, #43	; 0x2b
 8005e2a:	d02c      	beq.n	8005e86 <__gethex+0x13e>
 8005e2c:	2b2d      	cmp	r3, #45	; 0x2d
 8005e2e:	d02e      	beq.n	8005e8e <__gethex+0x146>
 8005e30:	1c71      	adds	r1, r6, #1
 8005e32:	f04f 0900 	mov.w	r9, #0
 8005e36:	7808      	ldrb	r0, [r1, #0]
 8005e38:	f7ff ff70 	bl	8005d1c <__hexdig_fun>
 8005e3c:	1e43      	subs	r3, r0, #1
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	2b18      	cmp	r3, #24
 8005e42:	d82c      	bhi.n	8005e9e <__gethex+0x156>
 8005e44:	f1a0 0210 	sub.w	r2, r0, #16
 8005e48:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005e4c:	f7ff ff66 	bl	8005d1c <__hexdig_fun>
 8005e50:	1e43      	subs	r3, r0, #1
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	2b18      	cmp	r3, #24
 8005e56:	d91d      	bls.n	8005e94 <__gethex+0x14c>
 8005e58:	f1b9 0f00 	cmp.w	r9, #0
 8005e5c:	d000      	beq.n	8005e60 <__gethex+0x118>
 8005e5e:	4252      	negs	r2, r2
 8005e60:	4415      	add	r5, r2
 8005e62:	f8cb 1000 	str.w	r1, [fp]
 8005e66:	b1e4      	cbz	r4, 8005ea2 <__gethex+0x15a>
 8005e68:	9b00      	ldr	r3, [sp, #0]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	bf14      	ite	ne
 8005e6e:	2700      	movne	r7, #0
 8005e70:	2706      	moveq	r7, #6
 8005e72:	4638      	mov	r0, r7
 8005e74:	b009      	add	sp, #36	; 0x24
 8005e76:	ecbd 8b02 	vpop	{d8}
 8005e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e7e:	463e      	mov	r6, r7
 8005e80:	4625      	mov	r5, r4
 8005e82:	2401      	movs	r4, #1
 8005e84:	e7ca      	b.n	8005e1c <__gethex+0xd4>
 8005e86:	f04f 0900 	mov.w	r9, #0
 8005e8a:	1cb1      	adds	r1, r6, #2
 8005e8c:	e7d3      	b.n	8005e36 <__gethex+0xee>
 8005e8e:	f04f 0901 	mov.w	r9, #1
 8005e92:	e7fa      	b.n	8005e8a <__gethex+0x142>
 8005e94:	230a      	movs	r3, #10
 8005e96:	fb03 0202 	mla	r2, r3, r2, r0
 8005e9a:	3a10      	subs	r2, #16
 8005e9c:	e7d4      	b.n	8005e48 <__gethex+0x100>
 8005e9e:	4631      	mov	r1, r6
 8005ea0:	e7df      	b.n	8005e62 <__gethex+0x11a>
 8005ea2:	1bf3      	subs	r3, r6, r7
 8005ea4:	3b01      	subs	r3, #1
 8005ea6:	4621      	mov	r1, r4
 8005ea8:	2b07      	cmp	r3, #7
 8005eaa:	dc0b      	bgt.n	8005ec4 <__gethex+0x17c>
 8005eac:	ee18 0a10 	vmov	r0, s16
 8005eb0:	f000 fa7e 	bl	80063b0 <_Balloc>
 8005eb4:	4604      	mov	r4, r0
 8005eb6:	b940      	cbnz	r0, 8005eca <__gethex+0x182>
 8005eb8:	4b65      	ldr	r3, [pc, #404]	; (8006050 <__gethex+0x308>)
 8005eba:	4602      	mov	r2, r0
 8005ebc:	21de      	movs	r1, #222	; 0xde
 8005ebe:	4865      	ldr	r0, [pc, #404]	; (8006054 <__gethex+0x30c>)
 8005ec0:	f001 f97e 	bl	80071c0 <__assert_func>
 8005ec4:	3101      	adds	r1, #1
 8005ec6:	105b      	asrs	r3, r3, #1
 8005ec8:	e7ee      	b.n	8005ea8 <__gethex+0x160>
 8005eca:	f100 0914 	add.w	r9, r0, #20
 8005ece:	f04f 0b00 	mov.w	fp, #0
 8005ed2:	f1ca 0301 	rsb	r3, sl, #1
 8005ed6:	f8cd 9008 	str.w	r9, [sp, #8]
 8005eda:	f8cd b000 	str.w	fp, [sp]
 8005ede:	9306      	str	r3, [sp, #24]
 8005ee0:	42b7      	cmp	r7, r6
 8005ee2:	d340      	bcc.n	8005f66 <__gethex+0x21e>
 8005ee4:	9802      	ldr	r0, [sp, #8]
 8005ee6:	9b00      	ldr	r3, [sp, #0]
 8005ee8:	f840 3b04 	str.w	r3, [r0], #4
 8005eec:	eba0 0009 	sub.w	r0, r0, r9
 8005ef0:	1080      	asrs	r0, r0, #2
 8005ef2:	0146      	lsls	r6, r0, #5
 8005ef4:	6120      	str	r0, [r4, #16]
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f000 fb50 	bl	800659c <__hi0bits>
 8005efc:	1a30      	subs	r0, r6, r0
 8005efe:	f8d8 6000 	ldr.w	r6, [r8]
 8005f02:	42b0      	cmp	r0, r6
 8005f04:	dd63      	ble.n	8005fce <__gethex+0x286>
 8005f06:	1b87      	subs	r7, r0, r6
 8005f08:	4639      	mov	r1, r7
 8005f0a:	4620      	mov	r0, r4
 8005f0c:	f000 feea 	bl	8006ce4 <__any_on>
 8005f10:	4682      	mov	sl, r0
 8005f12:	b1a8      	cbz	r0, 8005f40 <__gethex+0x1f8>
 8005f14:	1e7b      	subs	r3, r7, #1
 8005f16:	1159      	asrs	r1, r3, #5
 8005f18:	f003 021f 	and.w	r2, r3, #31
 8005f1c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8005f20:	f04f 0a01 	mov.w	sl, #1
 8005f24:	fa0a f202 	lsl.w	r2, sl, r2
 8005f28:	420a      	tst	r2, r1
 8005f2a:	d009      	beq.n	8005f40 <__gethex+0x1f8>
 8005f2c:	4553      	cmp	r3, sl
 8005f2e:	dd05      	ble.n	8005f3c <__gethex+0x1f4>
 8005f30:	1eb9      	subs	r1, r7, #2
 8005f32:	4620      	mov	r0, r4
 8005f34:	f000 fed6 	bl	8006ce4 <__any_on>
 8005f38:	2800      	cmp	r0, #0
 8005f3a:	d145      	bne.n	8005fc8 <__gethex+0x280>
 8005f3c:	f04f 0a02 	mov.w	sl, #2
 8005f40:	4639      	mov	r1, r7
 8005f42:	4620      	mov	r0, r4
 8005f44:	f7ff fe98 	bl	8005c78 <rshift>
 8005f48:	443d      	add	r5, r7
 8005f4a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005f4e:	42ab      	cmp	r3, r5
 8005f50:	da4c      	bge.n	8005fec <__gethex+0x2a4>
 8005f52:	ee18 0a10 	vmov	r0, s16
 8005f56:	4621      	mov	r1, r4
 8005f58:	f000 fa6a 	bl	8006430 <_Bfree>
 8005f5c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005f5e:	2300      	movs	r3, #0
 8005f60:	6013      	str	r3, [r2, #0]
 8005f62:	27a3      	movs	r7, #163	; 0xa3
 8005f64:	e785      	b.n	8005e72 <__gethex+0x12a>
 8005f66:	1e73      	subs	r3, r6, #1
 8005f68:	9a05      	ldr	r2, [sp, #20]
 8005f6a:	9303      	str	r3, [sp, #12]
 8005f6c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d019      	beq.n	8005fa8 <__gethex+0x260>
 8005f74:	f1bb 0f20 	cmp.w	fp, #32
 8005f78:	d107      	bne.n	8005f8a <__gethex+0x242>
 8005f7a:	9b02      	ldr	r3, [sp, #8]
 8005f7c:	9a00      	ldr	r2, [sp, #0]
 8005f7e:	f843 2b04 	str.w	r2, [r3], #4
 8005f82:	9302      	str	r3, [sp, #8]
 8005f84:	2300      	movs	r3, #0
 8005f86:	9300      	str	r3, [sp, #0]
 8005f88:	469b      	mov	fp, r3
 8005f8a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8005f8e:	f7ff fec5 	bl	8005d1c <__hexdig_fun>
 8005f92:	9b00      	ldr	r3, [sp, #0]
 8005f94:	f000 000f 	and.w	r0, r0, #15
 8005f98:	fa00 f00b 	lsl.w	r0, r0, fp
 8005f9c:	4303      	orrs	r3, r0
 8005f9e:	9300      	str	r3, [sp, #0]
 8005fa0:	f10b 0b04 	add.w	fp, fp, #4
 8005fa4:	9b03      	ldr	r3, [sp, #12]
 8005fa6:	e00d      	b.n	8005fc4 <__gethex+0x27c>
 8005fa8:	9b03      	ldr	r3, [sp, #12]
 8005faa:	9a06      	ldr	r2, [sp, #24]
 8005fac:	4413      	add	r3, r2
 8005fae:	42bb      	cmp	r3, r7
 8005fb0:	d3e0      	bcc.n	8005f74 <__gethex+0x22c>
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	9901      	ldr	r1, [sp, #4]
 8005fb6:	9307      	str	r3, [sp, #28]
 8005fb8:	4652      	mov	r2, sl
 8005fba:	f001 f8e1 	bl	8007180 <strncmp>
 8005fbe:	9b07      	ldr	r3, [sp, #28]
 8005fc0:	2800      	cmp	r0, #0
 8005fc2:	d1d7      	bne.n	8005f74 <__gethex+0x22c>
 8005fc4:	461e      	mov	r6, r3
 8005fc6:	e78b      	b.n	8005ee0 <__gethex+0x198>
 8005fc8:	f04f 0a03 	mov.w	sl, #3
 8005fcc:	e7b8      	b.n	8005f40 <__gethex+0x1f8>
 8005fce:	da0a      	bge.n	8005fe6 <__gethex+0x29e>
 8005fd0:	1a37      	subs	r7, r6, r0
 8005fd2:	4621      	mov	r1, r4
 8005fd4:	ee18 0a10 	vmov	r0, s16
 8005fd8:	463a      	mov	r2, r7
 8005fda:	f000 fc45 	bl	8006868 <__lshift>
 8005fde:	1bed      	subs	r5, r5, r7
 8005fe0:	4604      	mov	r4, r0
 8005fe2:	f100 0914 	add.w	r9, r0, #20
 8005fe6:	f04f 0a00 	mov.w	sl, #0
 8005fea:	e7ae      	b.n	8005f4a <__gethex+0x202>
 8005fec:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8005ff0:	42a8      	cmp	r0, r5
 8005ff2:	dd72      	ble.n	80060da <__gethex+0x392>
 8005ff4:	1b45      	subs	r5, r0, r5
 8005ff6:	42ae      	cmp	r6, r5
 8005ff8:	dc36      	bgt.n	8006068 <__gethex+0x320>
 8005ffa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005ffe:	2b02      	cmp	r3, #2
 8006000:	d02a      	beq.n	8006058 <__gethex+0x310>
 8006002:	2b03      	cmp	r3, #3
 8006004:	d02c      	beq.n	8006060 <__gethex+0x318>
 8006006:	2b01      	cmp	r3, #1
 8006008:	d115      	bne.n	8006036 <__gethex+0x2ee>
 800600a:	42ae      	cmp	r6, r5
 800600c:	d113      	bne.n	8006036 <__gethex+0x2ee>
 800600e:	2e01      	cmp	r6, #1
 8006010:	d10b      	bne.n	800602a <__gethex+0x2e2>
 8006012:	9a04      	ldr	r2, [sp, #16]
 8006014:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006018:	6013      	str	r3, [r2, #0]
 800601a:	2301      	movs	r3, #1
 800601c:	6123      	str	r3, [r4, #16]
 800601e:	f8c9 3000 	str.w	r3, [r9]
 8006022:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006024:	2762      	movs	r7, #98	; 0x62
 8006026:	601c      	str	r4, [r3, #0]
 8006028:	e723      	b.n	8005e72 <__gethex+0x12a>
 800602a:	1e71      	subs	r1, r6, #1
 800602c:	4620      	mov	r0, r4
 800602e:	f000 fe59 	bl	8006ce4 <__any_on>
 8006032:	2800      	cmp	r0, #0
 8006034:	d1ed      	bne.n	8006012 <__gethex+0x2ca>
 8006036:	ee18 0a10 	vmov	r0, s16
 800603a:	4621      	mov	r1, r4
 800603c:	f000 f9f8 	bl	8006430 <_Bfree>
 8006040:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006042:	2300      	movs	r3, #0
 8006044:	6013      	str	r3, [r2, #0]
 8006046:	2750      	movs	r7, #80	; 0x50
 8006048:	e713      	b.n	8005e72 <__gethex+0x12a>
 800604a:	bf00      	nop
 800604c:	08009330 	.word	0x08009330
 8006050:	080092b4 	.word	0x080092b4
 8006054:	080092c5 	.word	0x080092c5
 8006058:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800605a:	2b00      	cmp	r3, #0
 800605c:	d1eb      	bne.n	8006036 <__gethex+0x2ee>
 800605e:	e7d8      	b.n	8006012 <__gethex+0x2ca>
 8006060:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006062:	2b00      	cmp	r3, #0
 8006064:	d1d5      	bne.n	8006012 <__gethex+0x2ca>
 8006066:	e7e6      	b.n	8006036 <__gethex+0x2ee>
 8006068:	1e6f      	subs	r7, r5, #1
 800606a:	f1ba 0f00 	cmp.w	sl, #0
 800606e:	d131      	bne.n	80060d4 <__gethex+0x38c>
 8006070:	b127      	cbz	r7, 800607c <__gethex+0x334>
 8006072:	4639      	mov	r1, r7
 8006074:	4620      	mov	r0, r4
 8006076:	f000 fe35 	bl	8006ce4 <__any_on>
 800607a:	4682      	mov	sl, r0
 800607c:	117b      	asrs	r3, r7, #5
 800607e:	2101      	movs	r1, #1
 8006080:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8006084:	f007 071f 	and.w	r7, r7, #31
 8006088:	fa01 f707 	lsl.w	r7, r1, r7
 800608c:	421f      	tst	r7, r3
 800608e:	4629      	mov	r1, r5
 8006090:	4620      	mov	r0, r4
 8006092:	bf18      	it	ne
 8006094:	f04a 0a02 	orrne.w	sl, sl, #2
 8006098:	1b76      	subs	r6, r6, r5
 800609a:	f7ff fded 	bl	8005c78 <rshift>
 800609e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80060a2:	2702      	movs	r7, #2
 80060a4:	f1ba 0f00 	cmp.w	sl, #0
 80060a8:	d048      	beq.n	800613c <__gethex+0x3f4>
 80060aa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80060ae:	2b02      	cmp	r3, #2
 80060b0:	d015      	beq.n	80060de <__gethex+0x396>
 80060b2:	2b03      	cmp	r3, #3
 80060b4:	d017      	beq.n	80060e6 <__gethex+0x39e>
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d109      	bne.n	80060ce <__gethex+0x386>
 80060ba:	f01a 0f02 	tst.w	sl, #2
 80060be:	d006      	beq.n	80060ce <__gethex+0x386>
 80060c0:	f8d9 0000 	ldr.w	r0, [r9]
 80060c4:	ea4a 0a00 	orr.w	sl, sl, r0
 80060c8:	f01a 0f01 	tst.w	sl, #1
 80060cc:	d10e      	bne.n	80060ec <__gethex+0x3a4>
 80060ce:	f047 0710 	orr.w	r7, r7, #16
 80060d2:	e033      	b.n	800613c <__gethex+0x3f4>
 80060d4:	f04f 0a01 	mov.w	sl, #1
 80060d8:	e7d0      	b.n	800607c <__gethex+0x334>
 80060da:	2701      	movs	r7, #1
 80060dc:	e7e2      	b.n	80060a4 <__gethex+0x35c>
 80060de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80060e0:	f1c3 0301 	rsb	r3, r3, #1
 80060e4:	9315      	str	r3, [sp, #84]	; 0x54
 80060e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d0f0      	beq.n	80060ce <__gethex+0x386>
 80060ec:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80060f0:	f104 0314 	add.w	r3, r4, #20
 80060f4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80060f8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80060fc:	f04f 0c00 	mov.w	ip, #0
 8006100:	4618      	mov	r0, r3
 8006102:	f853 2b04 	ldr.w	r2, [r3], #4
 8006106:	f1b2 3fff 	cmp.w	r2, #4294967295
 800610a:	d01c      	beq.n	8006146 <__gethex+0x3fe>
 800610c:	3201      	adds	r2, #1
 800610e:	6002      	str	r2, [r0, #0]
 8006110:	2f02      	cmp	r7, #2
 8006112:	f104 0314 	add.w	r3, r4, #20
 8006116:	d13f      	bne.n	8006198 <__gethex+0x450>
 8006118:	f8d8 2000 	ldr.w	r2, [r8]
 800611c:	3a01      	subs	r2, #1
 800611e:	42b2      	cmp	r2, r6
 8006120:	d10a      	bne.n	8006138 <__gethex+0x3f0>
 8006122:	1171      	asrs	r1, r6, #5
 8006124:	2201      	movs	r2, #1
 8006126:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800612a:	f006 061f 	and.w	r6, r6, #31
 800612e:	fa02 f606 	lsl.w	r6, r2, r6
 8006132:	421e      	tst	r6, r3
 8006134:	bf18      	it	ne
 8006136:	4617      	movne	r7, r2
 8006138:	f047 0720 	orr.w	r7, r7, #32
 800613c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800613e:	601c      	str	r4, [r3, #0]
 8006140:	9b04      	ldr	r3, [sp, #16]
 8006142:	601d      	str	r5, [r3, #0]
 8006144:	e695      	b.n	8005e72 <__gethex+0x12a>
 8006146:	4299      	cmp	r1, r3
 8006148:	f843 cc04 	str.w	ip, [r3, #-4]
 800614c:	d8d8      	bhi.n	8006100 <__gethex+0x3b8>
 800614e:	68a3      	ldr	r3, [r4, #8]
 8006150:	459b      	cmp	fp, r3
 8006152:	db19      	blt.n	8006188 <__gethex+0x440>
 8006154:	6861      	ldr	r1, [r4, #4]
 8006156:	ee18 0a10 	vmov	r0, s16
 800615a:	3101      	adds	r1, #1
 800615c:	f000 f928 	bl	80063b0 <_Balloc>
 8006160:	4681      	mov	r9, r0
 8006162:	b918      	cbnz	r0, 800616c <__gethex+0x424>
 8006164:	4b1a      	ldr	r3, [pc, #104]	; (80061d0 <__gethex+0x488>)
 8006166:	4602      	mov	r2, r0
 8006168:	2184      	movs	r1, #132	; 0x84
 800616a:	e6a8      	b.n	8005ebe <__gethex+0x176>
 800616c:	6922      	ldr	r2, [r4, #16]
 800616e:	3202      	adds	r2, #2
 8006170:	f104 010c 	add.w	r1, r4, #12
 8006174:	0092      	lsls	r2, r2, #2
 8006176:	300c      	adds	r0, #12
 8006178:	f000 f90c 	bl	8006394 <memcpy>
 800617c:	4621      	mov	r1, r4
 800617e:	ee18 0a10 	vmov	r0, s16
 8006182:	f000 f955 	bl	8006430 <_Bfree>
 8006186:	464c      	mov	r4, r9
 8006188:	6923      	ldr	r3, [r4, #16]
 800618a:	1c5a      	adds	r2, r3, #1
 800618c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006190:	6122      	str	r2, [r4, #16]
 8006192:	2201      	movs	r2, #1
 8006194:	615a      	str	r2, [r3, #20]
 8006196:	e7bb      	b.n	8006110 <__gethex+0x3c8>
 8006198:	6922      	ldr	r2, [r4, #16]
 800619a:	455a      	cmp	r2, fp
 800619c:	dd0b      	ble.n	80061b6 <__gethex+0x46e>
 800619e:	2101      	movs	r1, #1
 80061a0:	4620      	mov	r0, r4
 80061a2:	f7ff fd69 	bl	8005c78 <rshift>
 80061a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80061aa:	3501      	adds	r5, #1
 80061ac:	42ab      	cmp	r3, r5
 80061ae:	f6ff aed0 	blt.w	8005f52 <__gethex+0x20a>
 80061b2:	2701      	movs	r7, #1
 80061b4:	e7c0      	b.n	8006138 <__gethex+0x3f0>
 80061b6:	f016 061f 	ands.w	r6, r6, #31
 80061ba:	d0fa      	beq.n	80061b2 <__gethex+0x46a>
 80061bc:	449a      	add	sl, r3
 80061be:	f1c6 0620 	rsb	r6, r6, #32
 80061c2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80061c6:	f000 f9e9 	bl	800659c <__hi0bits>
 80061ca:	42b0      	cmp	r0, r6
 80061cc:	dbe7      	blt.n	800619e <__gethex+0x456>
 80061ce:	e7f0      	b.n	80061b2 <__gethex+0x46a>
 80061d0:	080092b4 	.word	0x080092b4

080061d4 <L_shift>:
 80061d4:	f1c2 0208 	rsb	r2, r2, #8
 80061d8:	0092      	lsls	r2, r2, #2
 80061da:	b570      	push	{r4, r5, r6, lr}
 80061dc:	f1c2 0620 	rsb	r6, r2, #32
 80061e0:	6843      	ldr	r3, [r0, #4]
 80061e2:	6804      	ldr	r4, [r0, #0]
 80061e4:	fa03 f506 	lsl.w	r5, r3, r6
 80061e8:	432c      	orrs	r4, r5
 80061ea:	40d3      	lsrs	r3, r2
 80061ec:	6004      	str	r4, [r0, #0]
 80061ee:	f840 3f04 	str.w	r3, [r0, #4]!
 80061f2:	4288      	cmp	r0, r1
 80061f4:	d3f4      	bcc.n	80061e0 <L_shift+0xc>
 80061f6:	bd70      	pop	{r4, r5, r6, pc}

080061f8 <__match>:
 80061f8:	b530      	push	{r4, r5, lr}
 80061fa:	6803      	ldr	r3, [r0, #0]
 80061fc:	3301      	adds	r3, #1
 80061fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006202:	b914      	cbnz	r4, 800620a <__match+0x12>
 8006204:	6003      	str	r3, [r0, #0]
 8006206:	2001      	movs	r0, #1
 8006208:	bd30      	pop	{r4, r5, pc}
 800620a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800620e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006212:	2d19      	cmp	r5, #25
 8006214:	bf98      	it	ls
 8006216:	3220      	addls	r2, #32
 8006218:	42a2      	cmp	r2, r4
 800621a:	d0f0      	beq.n	80061fe <__match+0x6>
 800621c:	2000      	movs	r0, #0
 800621e:	e7f3      	b.n	8006208 <__match+0x10>

08006220 <__hexnan>:
 8006220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006224:	680b      	ldr	r3, [r1, #0]
 8006226:	6801      	ldr	r1, [r0, #0]
 8006228:	115e      	asrs	r6, r3, #5
 800622a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800622e:	f013 031f 	ands.w	r3, r3, #31
 8006232:	b087      	sub	sp, #28
 8006234:	bf18      	it	ne
 8006236:	3604      	addne	r6, #4
 8006238:	2500      	movs	r5, #0
 800623a:	1f37      	subs	r7, r6, #4
 800623c:	4682      	mov	sl, r0
 800623e:	4690      	mov	r8, r2
 8006240:	9301      	str	r3, [sp, #4]
 8006242:	f846 5c04 	str.w	r5, [r6, #-4]
 8006246:	46b9      	mov	r9, r7
 8006248:	463c      	mov	r4, r7
 800624a:	9502      	str	r5, [sp, #8]
 800624c:	46ab      	mov	fp, r5
 800624e:	784a      	ldrb	r2, [r1, #1]
 8006250:	1c4b      	adds	r3, r1, #1
 8006252:	9303      	str	r3, [sp, #12]
 8006254:	b342      	cbz	r2, 80062a8 <__hexnan+0x88>
 8006256:	4610      	mov	r0, r2
 8006258:	9105      	str	r1, [sp, #20]
 800625a:	9204      	str	r2, [sp, #16]
 800625c:	f7ff fd5e 	bl	8005d1c <__hexdig_fun>
 8006260:	2800      	cmp	r0, #0
 8006262:	d14f      	bne.n	8006304 <__hexnan+0xe4>
 8006264:	9a04      	ldr	r2, [sp, #16]
 8006266:	9905      	ldr	r1, [sp, #20]
 8006268:	2a20      	cmp	r2, #32
 800626a:	d818      	bhi.n	800629e <__hexnan+0x7e>
 800626c:	9b02      	ldr	r3, [sp, #8]
 800626e:	459b      	cmp	fp, r3
 8006270:	dd13      	ble.n	800629a <__hexnan+0x7a>
 8006272:	454c      	cmp	r4, r9
 8006274:	d206      	bcs.n	8006284 <__hexnan+0x64>
 8006276:	2d07      	cmp	r5, #7
 8006278:	dc04      	bgt.n	8006284 <__hexnan+0x64>
 800627a:	462a      	mov	r2, r5
 800627c:	4649      	mov	r1, r9
 800627e:	4620      	mov	r0, r4
 8006280:	f7ff ffa8 	bl	80061d4 <L_shift>
 8006284:	4544      	cmp	r4, r8
 8006286:	d950      	bls.n	800632a <__hexnan+0x10a>
 8006288:	2300      	movs	r3, #0
 800628a:	f1a4 0904 	sub.w	r9, r4, #4
 800628e:	f844 3c04 	str.w	r3, [r4, #-4]
 8006292:	f8cd b008 	str.w	fp, [sp, #8]
 8006296:	464c      	mov	r4, r9
 8006298:	461d      	mov	r5, r3
 800629a:	9903      	ldr	r1, [sp, #12]
 800629c:	e7d7      	b.n	800624e <__hexnan+0x2e>
 800629e:	2a29      	cmp	r2, #41	; 0x29
 80062a0:	d156      	bne.n	8006350 <__hexnan+0x130>
 80062a2:	3102      	adds	r1, #2
 80062a4:	f8ca 1000 	str.w	r1, [sl]
 80062a8:	f1bb 0f00 	cmp.w	fp, #0
 80062ac:	d050      	beq.n	8006350 <__hexnan+0x130>
 80062ae:	454c      	cmp	r4, r9
 80062b0:	d206      	bcs.n	80062c0 <__hexnan+0xa0>
 80062b2:	2d07      	cmp	r5, #7
 80062b4:	dc04      	bgt.n	80062c0 <__hexnan+0xa0>
 80062b6:	462a      	mov	r2, r5
 80062b8:	4649      	mov	r1, r9
 80062ba:	4620      	mov	r0, r4
 80062bc:	f7ff ff8a 	bl	80061d4 <L_shift>
 80062c0:	4544      	cmp	r4, r8
 80062c2:	d934      	bls.n	800632e <__hexnan+0x10e>
 80062c4:	f1a8 0204 	sub.w	r2, r8, #4
 80062c8:	4623      	mov	r3, r4
 80062ca:	f853 1b04 	ldr.w	r1, [r3], #4
 80062ce:	f842 1f04 	str.w	r1, [r2, #4]!
 80062d2:	429f      	cmp	r7, r3
 80062d4:	d2f9      	bcs.n	80062ca <__hexnan+0xaa>
 80062d6:	1b3b      	subs	r3, r7, r4
 80062d8:	f023 0303 	bic.w	r3, r3, #3
 80062dc:	3304      	adds	r3, #4
 80062de:	3401      	adds	r4, #1
 80062e0:	3e03      	subs	r6, #3
 80062e2:	42b4      	cmp	r4, r6
 80062e4:	bf88      	it	hi
 80062e6:	2304      	movhi	r3, #4
 80062e8:	4443      	add	r3, r8
 80062ea:	2200      	movs	r2, #0
 80062ec:	f843 2b04 	str.w	r2, [r3], #4
 80062f0:	429f      	cmp	r7, r3
 80062f2:	d2fb      	bcs.n	80062ec <__hexnan+0xcc>
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	b91b      	cbnz	r3, 8006300 <__hexnan+0xe0>
 80062f8:	4547      	cmp	r7, r8
 80062fa:	d127      	bne.n	800634c <__hexnan+0x12c>
 80062fc:	2301      	movs	r3, #1
 80062fe:	603b      	str	r3, [r7, #0]
 8006300:	2005      	movs	r0, #5
 8006302:	e026      	b.n	8006352 <__hexnan+0x132>
 8006304:	3501      	adds	r5, #1
 8006306:	2d08      	cmp	r5, #8
 8006308:	f10b 0b01 	add.w	fp, fp, #1
 800630c:	dd06      	ble.n	800631c <__hexnan+0xfc>
 800630e:	4544      	cmp	r4, r8
 8006310:	d9c3      	bls.n	800629a <__hexnan+0x7a>
 8006312:	2300      	movs	r3, #0
 8006314:	f844 3c04 	str.w	r3, [r4, #-4]
 8006318:	2501      	movs	r5, #1
 800631a:	3c04      	subs	r4, #4
 800631c:	6822      	ldr	r2, [r4, #0]
 800631e:	f000 000f 	and.w	r0, r0, #15
 8006322:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8006326:	6022      	str	r2, [r4, #0]
 8006328:	e7b7      	b.n	800629a <__hexnan+0x7a>
 800632a:	2508      	movs	r5, #8
 800632c:	e7b5      	b.n	800629a <__hexnan+0x7a>
 800632e:	9b01      	ldr	r3, [sp, #4]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d0df      	beq.n	80062f4 <__hexnan+0xd4>
 8006334:	f04f 32ff 	mov.w	r2, #4294967295
 8006338:	f1c3 0320 	rsb	r3, r3, #32
 800633c:	fa22 f303 	lsr.w	r3, r2, r3
 8006340:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006344:	401a      	ands	r2, r3
 8006346:	f846 2c04 	str.w	r2, [r6, #-4]
 800634a:	e7d3      	b.n	80062f4 <__hexnan+0xd4>
 800634c:	3f04      	subs	r7, #4
 800634e:	e7d1      	b.n	80062f4 <__hexnan+0xd4>
 8006350:	2004      	movs	r0, #4
 8006352:	b007      	add	sp, #28
 8006354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006358 <_localeconv_r>:
 8006358:	4800      	ldr	r0, [pc, #0]	; (800635c <_localeconv_r+0x4>)
 800635a:	4770      	bx	lr
 800635c:	2000016c 	.word	0x2000016c

08006360 <malloc>:
 8006360:	4b02      	ldr	r3, [pc, #8]	; (800636c <malloc+0xc>)
 8006362:	4601      	mov	r1, r0
 8006364:	6818      	ldr	r0, [r3, #0]
 8006366:	f000 bd3d 	b.w	8006de4 <_malloc_r>
 800636a:	bf00      	nop
 800636c:	20000014 	.word	0x20000014

08006370 <__ascii_mbtowc>:
 8006370:	b082      	sub	sp, #8
 8006372:	b901      	cbnz	r1, 8006376 <__ascii_mbtowc+0x6>
 8006374:	a901      	add	r1, sp, #4
 8006376:	b142      	cbz	r2, 800638a <__ascii_mbtowc+0x1a>
 8006378:	b14b      	cbz	r3, 800638e <__ascii_mbtowc+0x1e>
 800637a:	7813      	ldrb	r3, [r2, #0]
 800637c:	600b      	str	r3, [r1, #0]
 800637e:	7812      	ldrb	r2, [r2, #0]
 8006380:	1e10      	subs	r0, r2, #0
 8006382:	bf18      	it	ne
 8006384:	2001      	movne	r0, #1
 8006386:	b002      	add	sp, #8
 8006388:	4770      	bx	lr
 800638a:	4610      	mov	r0, r2
 800638c:	e7fb      	b.n	8006386 <__ascii_mbtowc+0x16>
 800638e:	f06f 0001 	mvn.w	r0, #1
 8006392:	e7f8      	b.n	8006386 <__ascii_mbtowc+0x16>

08006394 <memcpy>:
 8006394:	440a      	add	r2, r1
 8006396:	4291      	cmp	r1, r2
 8006398:	f100 33ff 	add.w	r3, r0, #4294967295
 800639c:	d100      	bne.n	80063a0 <memcpy+0xc>
 800639e:	4770      	bx	lr
 80063a0:	b510      	push	{r4, lr}
 80063a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063aa:	4291      	cmp	r1, r2
 80063ac:	d1f9      	bne.n	80063a2 <memcpy+0xe>
 80063ae:	bd10      	pop	{r4, pc}

080063b0 <_Balloc>:
 80063b0:	b570      	push	{r4, r5, r6, lr}
 80063b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80063b4:	4604      	mov	r4, r0
 80063b6:	460d      	mov	r5, r1
 80063b8:	b976      	cbnz	r6, 80063d8 <_Balloc+0x28>
 80063ba:	2010      	movs	r0, #16
 80063bc:	f7ff ffd0 	bl	8006360 <malloc>
 80063c0:	4602      	mov	r2, r0
 80063c2:	6260      	str	r0, [r4, #36]	; 0x24
 80063c4:	b920      	cbnz	r0, 80063d0 <_Balloc+0x20>
 80063c6:	4b18      	ldr	r3, [pc, #96]	; (8006428 <_Balloc+0x78>)
 80063c8:	4818      	ldr	r0, [pc, #96]	; (800642c <_Balloc+0x7c>)
 80063ca:	2166      	movs	r1, #102	; 0x66
 80063cc:	f000 fef8 	bl	80071c0 <__assert_func>
 80063d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80063d4:	6006      	str	r6, [r0, #0]
 80063d6:	60c6      	str	r6, [r0, #12]
 80063d8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80063da:	68f3      	ldr	r3, [r6, #12]
 80063dc:	b183      	cbz	r3, 8006400 <_Balloc+0x50>
 80063de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063e0:	68db      	ldr	r3, [r3, #12]
 80063e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80063e6:	b9b8      	cbnz	r0, 8006418 <_Balloc+0x68>
 80063e8:	2101      	movs	r1, #1
 80063ea:	fa01 f605 	lsl.w	r6, r1, r5
 80063ee:	1d72      	adds	r2, r6, #5
 80063f0:	0092      	lsls	r2, r2, #2
 80063f2:	4620      	mov	r0, r4
 80063f4:	f000 fc97 	bl	8006d26 <_calloc_r>
 80063f8:	b160      	cbz	r0, 8006414 <_Balloc+0x64>
 80063fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80063fe:	e00e      	b.n	800641e <_Balloc+0x6e>
 8006400:	2221      	movs	r2, #33	; 0x21
 8006402:	2104      	movs	r1, #4
 8006404:	4620      	mov	r0, r4
 8006406:	f000 fc8e 	bl	8006d26 <_calloc_r>
 800640a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800640c:	60f0      	str	r0, [r6, #12]
 800640e:	68db      	ldr	r3, [r3, #12]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d1e4      	bne.n	80063de <_Balloc+0x2e>
 8006414:	2000      	movs	r0, #0
 8006416:	bd70      	pop	{r4, r5, r6, pc}
 8006418:	6802      	ldr	r2, [r0, #0]
 800641a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800641e:	2300      	movs	r3, #0
 8006420:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006424:	e7f7      	b.n	8006416 <_Balloc+0x66>
 8006426:	bf00      	nop
 8006428:	0800923e 	.word	0x0800923e
 800642c:	08009344 	.word	0x08009344

08006430 <_Bfree>:
 8006430:	b570      	push	{r4, r5, r6, lr}
 8006432:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006434:	4605      	mov	r5, r0
 8006436:	460c      	mov	r4, r1
 8006438:	b976      	cbnz	r6, 8006458 <_Bfree+0x28>
 800643a:	2010      	movs	r0, #16
 800643c:	f7ff ff90 	bl	8006360 <malloc>
 8006440:	4602      	mov	r2, r0
 8006442:	6268      	str	r0, [r5, #36]	; 0x24
 8006444:	b920      	cbnz	r0, 8006450 <_Bfree+0x20>
 8006446:	4b09      	ldr	r3, [pc, #36]	; (800646c <_Bfree+0x3c>)
 8006448:	4809      	ldr	r0, [pc, #36]	; (8006470 <_Bfree+0x40>)
 800644a:	218a      	movs	r1, #138	; 0x8a
 800644c:	f000 feb8 	bl	80071c0 <__assert_func>
 8006450:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006454:	6006      	str	r6, [r0, #0]
 8006456:	60c6      	str	r6, [r0, #12]
 8006458:	b13c      	cbz	r4, 800646a <_Bfree+0x3a>
 800645a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800645c:	6862      	ldr	r2, [r4, #4]
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006464:	6021      	str	r1, [r4, #0]
 8006466:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800646a:	bd70      	pop	{r4, r5, r6, pc}
 800646c:	0800923e 	.word	0x0800923e
 8006470:	08009344 	.word	0x08009344

08006474 <__multadd>:
 8006474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006478:	690e      	ldr	r6, [r1, #16]
 800647a:	4607      	mov	r7, r0
 800647c:	4698      	mov	r8, r3
 800647e:	460c      	mov	r4, r1
 8006480:	f101 0014 	add.w	r0, r1, #20
 8006484:	2300      	movs	r3, #0
 8006486:	6805      	ldr	r5, [r0, #0]
 8006488:	b2a9      	uxth	r1, r5
 800648a:	fb02 8101 	mla	r1, r2, r1, r8
 800648e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8006492:	0c2d      	lsrs	r5, r5, #16
 8006494:	fb02 c505 	mla	r5, r2, r5, ip
 8006498:	b289      	uxth	r1, r1
 800649a:	3301      	adds	r3, #1
 800649c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80064a0:	429e      	cmp	r6, r3
 80064a2:	f840 1b04 	str.w	r1, [r0], #4
 80064a6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80064aa:	dcec      	bgt.n	8006486 <__multadd+0x12>
 80064ac:	f1b8 0f00 	cmp.w	r8, #0
 80064b0:	d022      	beq.n	80064f8 <__multadd+0x84>
 80064b2:	68a3      	ldr	r3, [r4, #8]
 80064b4:	42b3      	cmp	r3, r6
 80064b6:	dc19      	bgt.n	80064ec <__multadd+0x78>
 80064b8:	6861      	ldr	r1, [r4, #4]
 80064ba:	4638      	mov	r0, r7
 80064bc:	3101      	adds	r1, #1
 80064be:	f7ff ff77 	bl	80063b0 <_Balloc>
 80064c2:	4605      	mov	r5, r0
 80064c4:	b928      	cbnz	r0, 80064d2 <__multadd+0x5e>
 80064c6:	4602      	mov	r2, r0
 80064c8:	4b0d      	ldr	r3, [pc, #52]	; (8006500 <__multadd+0x8c>)
 80064ca:	480e      	ldr	r0, [pc, #56]	; (8006504 <__multadd+0x90>)
 80064cc:	21b5      	movs	r1, #181	; 0xb5
 80064ce:	f000 fe77 	bl	80071c0 <__assert_func>
 80064d2:	6922      	ldr	r2, [r4, #16]
 80064d4:	3202      	adds	r2, #2
 80064d6:	f104 010c 	add.w	r1, r4, #12
 80064da:	0092      	lsls	r2, r2, #2
 80064dc:	300c      	adds	r0, #12
 80064de:	f7ff ff59 	bl	8006394 <memcpy>
 80064e2:	4621      	mov	r1, r4
 80064e4:	4638      	mov	r0, r7
 80064e6:	f7ff ffa3 	bl	8006430 <_Bfree>
 80064ea:	462c      	mov	r4, r5
 80064ec:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80064f0:	3601      	adds	r6, #1
 80064f2:	f8c3 8014 	str.w	r8, [r3, #20]
 80064f6:	6126      	str	r6, [r4, #16]
 80064f8:	4620      	mov	r0, r4
 80064fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064fe:	bf00      	nop
 8006500:	080092b4 	.word	0x080092b4
 8006504:	08009344 	.word	0x08009344

08006508 <__s2b>:
 8006508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800650c:	460c      	mov	r4, r1
 800650e:	4615      	mov	r5, r2
 8006510:	461f      	mov	r7, r3
 8006512:	2209      	movs	r2, #9
 8006514:	3308      	adds	r3, #8
 8006516:	4606      	mov	r6, r0
 8006518:	fb93 f3f2 	sdiv	r3, r3, r2
 800651c:	2100      	movs	r1, #0
 800651e:	2201      	movs	r2, #1
 8006520:	429a      	cmp	r2, r3
 8006522:	db09      	blt.n	8006538 <__s2b+0x30>
 8006524:	4630      	mov	r0, r6
 8006526:	f7ff ff43 	bl	80063b0 <_Balloc>
 800652a:	b940      	cbnz	r0, 800653e <__s2b+0x36>
 800652c:	4602      	mov	r2, r0
 800652e:	4b19      	ldr	r3, [pc, #100]	; (8006594 <__s2b+0x8c>)
 8006530:	4819      	ldr	r0, [pc, #100]	; (8006598 <__s2b+0x90>)
 8006532:	21ce      	movs	r1, #206	; 0xce
 8006534:	f000 fe44 	bl	80071c0 <__assert_func>
 8006538:	0052      	lsls	r2, r2, #1
 800653a:	3101      	adds	r1, #1
 800653c:	e7f0      	b.n	8006520 <__s2b+0x18>
 800653e:	9b08      	ldr	r3, [sp, #32]
 8006540:	6143      	str	r3, [r0, #20]
 8006542:	2d09      	cmp	r5, #9
 8006544:	f04f 0301 	mov.w	r3, #1
 8006548:	6103      	str	r3, [r0, #16]
 800654a:	dd16      	ble.n	800657a <__s2b+0x72>
 800654c:	f104 0909 	add.w	r9, r4, #9
 8006550:	46c8      	mov	r8, r9
 8006552:	442c      	add	r4, r5
 8006554:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006558:	4601      	mov	r1, r0
 800655a:	3b30      	subs	r3, #48	; 0x30
 800655c:	220a      	movs	r2, #10
 800655e:	4630      	mov	r0, r6
 8006560:	f7ff ff88 	bl	8006474 <__multadd>
 8006564:	45a0      	cmp	r8, r4
 8006566:	d1f5      	bne.n	8006554 <__s2b+0x4c>
 8006568:	f1a5 0408 	sub.w	r4, r5, #8
 800656c:	444c      	add	r4, r9
 800656e:	1b2d      	subs	r5, r5, r4
 8006570:	1963      	adds	r3, r4, r5
 8006572:	42bb      	cmp	r3, r7
 8006574:	db04      	blt.n	8006580 <__s2b+0x78>
 8006576:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800657a:	340a      	adds	r4, #10
 800657c:	2509      	movs	r5, #9
 800657e:	e7f6      	b.n	800656e <__s2b+0x66>
 8006580:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006584:	4601      	mov	r1, r0
 8006586:	3b30      	subs	r3, #48	; 0x30
 8006588:	220a      	movs	r2, #10
 800658a:	4630      	mov	r0, r6
 800658c:	f7ff ff72 	bl	8006474 <__multadd>
 8006590:	e7ee      	b.n	8006570 <__s2b+0x68>
 8006592:	bf00      	nop
 8006594:	080092b4 	.word	0x080092b4
 8006598:	08009344 	.word	0x08009344

0800659c <__hi0bits>:
 800659c:	0c03      	lsrs	r3, r0, #16
 800659e:	041b      	lsls	r3, r3, #16
 80065a0:	b9d3      	cbnz	r3, 80065d8 <__hi0bits+0x3c>
 80065a2:	0400      	lsls	r0, r0, #16
 80065a4:	2310      	movs	r3, #16
 80065a6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80065aa:	bf04      	itt	eq
 80065ac:	0200      	lsleq	r0, r0, #8
 80065ae:	3308      	addeq	r3, #8
 80065b0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80065b4:	bf04      	itt	eq
 80065b6:	0100      	lsleq	r0, r0, #4
 80065b8:	3304      	addeq	r3, #4
 80065ba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80065be:	bf04      	itt	eq
 80065c0:	0080      	lsleq	r0, r0, #2
 80065c2:	3302      	addeq	r3, #2
 80065c4:	2800      	cmp	r0, #0
 80065c6:	db05      	blt.n	80065d4 <__hi0bits+0x38>
 80065c8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80065cc:	f103 0301 	add.w	r3, r3, #1
 80065d0:	bf08      	it	eq
 80065d2:	2320      	moveq	r3, #32
 80065d4:	4618      	mov	r0, r3
 80065d6:	4770      	bx	lr
 80065d8:	2300      	movs	r3, #0
 80065da:	e7e4      	b.n	80065a6 <__hi0bits+0xa>

080065dc <__lo0bits>:
 80065dc:	6803      	ldr	r3, [r0, #0]
 80065de:	f013 0207 	ands.w	r2, r3, #7
 80065e2:	4601      	mov	r1, r0
 80065e4:	d00b      	beq.n	80065fe <__lo0bits+0x22>
 80065e6:	07da      	lsls	r2, r3, #31
 80065e8:	d424      	bmi.n	8006634 <__lo0bits+0x58>
 80065ea:	0798      	lsls	r0, r3, #30
 80065ec:	bf49      	itett	mi
 80065ee:	085b      	lsrmi	r3, r3, #1
 80065f0:	089b      	lsrpl	r3, r3, #2
 80065f2:	2001      	movmi	r0, #1
 80065f4:	600b      	strmi	r3, [r1, #0]
 80065f6:	bf5c      	itt	pl
 80065f8:	600b      	strpl	r3, [r1, #0]
 80065fa:	2002      	movpl	r0, #2
 80065fc:	4770      	bx	lr
 80065fe:	b298      	uxth	r0, r3
 8006600:	b9b0      	cbnz	r0, 8006630 <__lo0bits+0x54>
 8006602:	0c1b      	lsrs	r3, r3, #16
 8006604:	2010      	movs	r0, #16
 8006606:	f013 0fff 	tst.w	r3, #255	; 0xff
 800660a:	bf04      	itt	eq
 800660c:	0a1b      	lsreq	r3, r3, #8
 800660e:	3008      	addeq	r0, #8
 8006610:	071a      	lsls	r2, r3, #28
 8006612:	bf04      	itt	eq
 8006614:	091b      	lsreq	r3, r3, #4
 8006616:	3004      	addeq	r0, #4
 8006618:	079a      	lsls	r2, r3, #30
 800661a:	bf04      	itt	eq
 800661c:	089b      	lsreq	r3, r3, #2
 800661e:	3002      	addeq	r0, #2
 8006620:	07da      	lsls	r2, r3, #31
 8006622:	d403      	bmi.n	800662c <__lo0bits+0x50>
 8006624:	085b      	lsrs	r3, r3, #1
 8006626:	f100 0001 	add.w	r0, r0, #1
 800662a:	d005      	beq.n	8006638 <__lo0bits+0x5c>
 800662c:	600b      	str	r3, [r1, #0]
 800662e:	4770      	bx	lr
 8006630:	4610      	mov	r0, r2
 8006632:	e7e8      	b.n	8006606 <__lo0bits+0x2a>
 8006634:	2000      	movs	r0, #0
 8006636:	4770      	bx	lr
 8006638:	2020      	movs	r0, #32
 800663a:	4770      	bx	lr

0800663c <__i2b>:
 800663c:	b510      	push	{r4, lr}
 800663e:	460c      	mov	r4, r1
 8006640:	2101      	movs	r1, #1
 8006642:	f7ff feb5 	bl	80063b0 <_Balloc>
 8006646:	4602      	mov	r2, r0
 8006648:	b928      	cbnz	r0, 8006656 <__i2b+0x1a>
 800664a:	4b05      	ldr	r3, [pc, #20]	; (8006660 <__i2b+0x24>)
 800664c:	4805      	ldr	r0, [pc, #20]	; (8006664 <__i2b+0x28>)
 800664e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006652:	f000 fdb5 	bl	80071c0 <__assert_func>
 8006656:	2301      	movs	r3, #1
 8006658:	6144      	str	r4, [r0, #20]
 800665a:	6103      	str	r3, [r0, #16]
 800665c:	bd10      	pop	{r4, pc}
 800665e:	bf00      	nop
 8006660:	080092b4 	.word	0x080092b4
 8006664:	08009344 	.word	0x08009344

08006668 <__multiply>:
 8006668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800666c:	4614      	mov	r4, r2
 800666e:	690a      	ldr	r2, [r1, #16]
 8006670:	6923      	ldr	r3, [r4, #16]
 8006672:	429a      	cmp	r2, r3
 8006674:	bfb8      	it	lt
 8006676:	460b      	movlt	r3, r1
 8006678:	460d      	mov	r5, r1
 800667a:	bfbc      	itt	lt
 800667c:	4625      	movlt	r5, r4
 800667e:	461c      	movlt	r4, r3
 8006680:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006684:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006688:	68ab      	ldr	r3, [r5, #8]
 800668a:	6869      	ldr	r1, [r5, #4]
 800668c:	eb0a 0709 	add.w	r7, sl, r9
 8006690:	42bb      	cmp	r3, r7
 8006692:	b085      	sub	sp, #20
 8006694:	bfb8      	it	lt
 8006696:	3101      	addlt	r1, #1
 8006698:	f7ff fe8a 	bl	80063b0 <_Balloc>
 800669c:	b930      	cbnz	r0, 80066ac <__multiply+0x44>
 800669e:	4602      	mov	r2, r0
 80066a0:	4b42      	ldr	r3, [pc, #264]	; (80067ac <__multiply+0x144>)
 80066a2:	4843      	ldr	r0, [pc, #268]	; (80067b0 <__multiply+0x148>)
 80066a4:	f240 115d 	movw	r1, #349	; 0x15d
 80066a8:	f000 fd8a 	bl	80071c0 <__assert_func>
 80066ac:	f100 0614 	add.w	r6, r0, #20
 80066b0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80066b4:	4633      	mov	r3, r6
 80066b6:	2200      	movs	r2, #0
 80066b8:	4543      	cmp	r3, r8
 80066ba:	d31e      	bcc.n	80066fa <__multiply+0x92>
 80066bc:	f105 0c14 	add.w	ip, r5, #20
 80066c0:	f104 0314 	add.w	r3, r4, #20
 80066c4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80066c8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80066cc:	9202      	str	r2, [sp, #8]
 80066ce:	ebac 0205 	sub.w	r2, ip, r5
 80066d2:	3a15      	subs	r2, #21
 80066d4:	f022 0203 	bic.w	r2, r2, #3
 80066d8:	3204      	adds	r2, #4
 80066da:	f105 0115 	add.w	r1, r5, #21
 80066de:	458c      	cmp	ip, r1
 80066e0:	bf38      	it	cc
 80066e2:	2204      	movcc	r2, #4
 80066e4:	9201      	str	r2, [sp, #4]
 80066e6:	9a02      	ldr	r2, [sp, #8]
 80066e8:	9303      	str	r3, [sp, #12]
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d808      	bhi.n	8006700 <__multiply+0x98>
 80066ee:	2f00      	cmp	r7, #0
 80066f0:	dc55      	bgt.n	800679e <__multiply+0x136>
 80066f2:	6107      	str	r7, [r0, #16]
 80066f4:	b005      	add	sp, #20
 80066f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066fa:	f843 2b04 	str.w	r2, [r3], #4
 80066fe:	e7db      	b.n	80066b8 <__multiply+0x50>
 8006700:	f8b3 a000 	ldrh.w	sl, [r3]
 8006704:	f1ba 0f00 	cmp.w	sl, #0
 8006708:	d020      	beq.n	800674c <__multiply+0xe4>
 800670a:	f105 0e14 	add.w	lr, r5, #20
 800670e:	46b1      	mov	r9, r6
 8006710:	2200      	movs	r2, #0
 8006712:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006716:	f8d9 b000 	ldr.w	fp, [r9]
 800671a:	b2a1      	uxth	r1, r4
 800671c:	fa1f fb8b 	uxth.w	fp, fp
 8006720:	fb0a b101 	mla	r1, sl, r1, fp
 8006724:	4411      	add	r1, r2
 8006726:	f8d9 2000 	ldr.w	r2, [r9]
 800672a:	0c24      	lsrs	r4, r4, #16
 800672c:	0c12      	lsrs	r2, r2, #16
 800672e:	fb0a 2404 	mla	r4, sl, r4, r2
 8006732:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8006736:	b289      	uxth	r1, r1
 8006738:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800673c:	45f4      	cmp	ip, lr
 800673e:	f849 1b04 	str.w	r1, [r9], #4
 8006742:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8006746:	d8e4      	bhi.n	8006712 <__multiply+0xaa>
 8006748:	9901      	ldr	r1, [sp, #4]
 800674a:	5072      	str	r2, [r6, r1]
 800674c:	9a03      	ldr	r2, [sp, #12]
 800674e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006752:	3304      	adds	r3, #4
 8006754:	f1b9 0f00 	cmp.w	r9, #0
 8006758:	d01f      	beq.n	800679a <__multiply+0x132>
 800675a:	6834      	ldr	r4, [r6, #0]
 800675c:	f105 0114 	add.w	r1, r5, #20
 8006760:	46b6      	mov	lr, r6
 8006762:	f04f 0a00 	mov.w	sl, #0
 8006766:	880a      	ldrh	r2, [r1, #0]
 8006768:	f8be b002 	ldrh.w	fp, [lr, #2]
 800676c:	fb09 b202 	mla	r2, r9, r2, fp
 8006770:	4492      	add	sl, r2
 8006772:	b2a4      	uxth	r4, r4
 8006774:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006778:	f84e 4b04 	str.w	r4, [lr], #4
 800677c:	f851 4b04 	ldr.w	r4, [r1], #4
 8006780:	f8be 2000 	ldrh.w	r2, [lr]
 8006784:	0c24      	lsrs	r4, r4, #16
 8006786:	fb09 2404 	mla	r4, r9, r4, r2
 800678a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800678e:	458c      	cmp	ip, r1
 8006790:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006794:	d8e7      	bhi.n	8006766 <__multiply+0xfe>
 8006796:	9a01      	ldr	r2, [sp, #4]
 8006798:	50b4      	str	r4, [r6, r2]
 800679a:	3604      	adds	r6, #4
 800679c:	e7a3      	b.n	80066e6 <__multiply+0x7e>
 800679e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d1a5      	bne.n	80066f2 <__multiply+0x8a>
 80067a6:	3f01      	subs	r7, #1
 80067a8:	e7a1      	b.n	80066ee <__multiply+0x86>
 80067aa:	bf00      	nop
 80067ac:	080092b4 	.word	0x080092b4
 80067b0:	08009344 	.word	0x08009344

080067b4 <__pow5mult>:
 80067b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067b8:	4615      	mov	r5, r2
 80067ba:	f012 0203 	ands.w	r2, r2, #3
 80067be:	4606      	mov	r6, r0
 80067c0:	460f      	mov	r7, r1
 80067c2:	d007      	beq.n	80067d4 <__pow5mult+0x20>
 80067c4:	4c25      	ldr	r4, [pc, #148]	; (800685c <__pow5mult+0xa8>)
 80067c6:	3a01      	subs	r2, #1
 80067c8:	2300      	movs	r3, #0
 80067ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80067ce:	f7ff fe51 	bl	8006474 <__multadd>
 80067d2:	4607      	mov	r7, r0
 80067d4:	10ad      	asrs	r5, r5, #2
 80067d6:	d03d      	beq.n	8006854 <__pow5mult+0xa0>
 80067d8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80067da:	b97c      	cbnz	r4, 80067fc <__pow5mult+0x48>
 80067dc:	2010      	movs	r0, #16
 80067de:	f7ff fdbf 	bl	8006360 <malloc>
 80067e2:	4602      	mov	r2, r0
 80067e4:	6270      	str	r0, [r6, #36]	; 0x24
 80067e6:	b928      	cbnz	r0, 80067f4 <__pow5mult+0x40>
 80067e8:	4b1d      	ldr	r3, [pc, #116]	; (8006860 <__pow5mult+0xac>)
 80067ea:	481e      	ldr	r0, [pc, #120]	; (8006864 <__pow5mult+0xb0>)
 80067ec:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80067f0:	f000 fce6 	bl	80071c0 <__assert_func>
 80067f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80067f8:	6004      	str	r4, [r0, #0]
 80067fa:	60c4      	str	r4, [r0, #12]
 80067fc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006800:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006804:	b94c      	cbnz	r4, 800681a <__pow5mult+0x66>
 8006806:	f240 2171 	movw	r1, #625	; 0x271
 800680a:	4630      	mov	r0, r6
 800680c:	f7ff ff16 	bl	800663c <__i2b>
 8006810:	2300      	movs	r3, #0
 8006812:	f8c8 0008 	str.w	r0, [r8, #8]
 8006816:	4604      	mov	r4, r0
 8006818:	6003      	str	r3, [r0, #0]
 800681a:	f04f 0900 	mov.w	r9, #0
 800681e:	07eb      	lsls	r3, r5, #31
 8006820:	d50a      	bpl.n	8006838 <__pow5mult+0x84>
 8006822:	4639      	mov	r1, r7
 8006824:	4622      	mov	r2, r4
 8006826:	4630      	mov	r0, r6
 8006828:	f7ff ff1e 	bl	8006668 <__multiply>
 800682c:	4639      	mov	r1, r7
 800682e:	4680      	mov	r8, r0
 8006830:	4630      	mov	r0, r6
 8006832:	f7ff fdfd 	bl	8006430 <_Bfree>
 8006836:	4647      	mov	r7, r8
 8006838:	106d      	asrs	r5, r5, #1
 800683a:	d00b      	beq.n	8006854 <__pow5mult+0xa0>
 800683c:	6820      	ldr	r0, [r4, #0]
 800683e:	b938      	cbnz	r0, 8006850 <__pow5mult+0x9c>
 8006840:	4622      	mov	r2, r4
 8006842:	4621      	mov	r1, r4
 8006844:	4630      	mov	r0, r6
 8006846:	f7ff ff0f 	bl	8006668 <__multiply>
 800684a:	6020      	str	r0, [r4, #0]
 800684c:	f8c0 9000 	str.w	r9, [r0]
 8006850:	4604      	mov	r4, r0
 8006852:	e7e4      	b.n	800681e <__pow5mult+0x6a>
 8006854:	4638      	mov	r0, r7
 8006856:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800685a:	bf00      	nop
 800685c:	08009498 	.word	0x08009498
 8006860:	0800923e 	.word	0x0800923e
 8006864:	08009344 	.word	0x08009344

08006868 <__lshift>:
 8006868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800686c:	460c      	mov	r4, r1
 800686e:	6849      	ldr	r1, [r1, #4]
 8006870:	6923      	ldr	r3, [r4, #16]
 8006872:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006876:	68a3      	ldr	r3, [r4, #8]
 8006878:	4607      	mov	r7, r0
 800687a:	4691      	mov	r9, r2
 800687c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006880:	f108 0601 	add.w	r6, r8, #1
 8006884:	42b3      	cmp	r3, r6
 8006886:	db0b      	blt.n	80068a0 <__lshift+0x38>
 8006888:	4638      	mov	r0, r7
 800688a:	f7ff fd91 	bl	80063b0 <_Balloc>
 800688e:	4605      	mov	r5, r0
 8006890:	b948      	cbnz	r0, 80068a6 <__lshift+0x3e>
 8006892:	4602      	mov	r2, r0
 8006894:	4b28      	ldr	r3, [pc, #160]	; (8006938 <__lshift+0xd0>)
 8006896:	4829      	ldr	r0, [pc, #164]	; (800693c <__lshift+0xd4>)
 8006898:	f240 11d9 	movw	r1, #473	; 0x1d9
 800689c:	f000 fc90 	bl	80071c0 <__assert_func>
 80068a0:	3101      	adds	r1, #1
 80068a2:	005b      	lsls	r3, r3, #1
 80068a4:	e7ee      	b.n	8006884 <__lshift+0x1c>
 80068a6:	2300      	movs	r3, #0
 80068a8:	f100 0114 	add.w	r1, r0, #20
 80068ac:	f100 0210 	add.w	r2, r0, #16
 80068b0:	4618      	mov	r0, r3
 80068b2:	4553      	cmp	r3, sl
 80068b4:	db33      	blt.n	800691e <__lshift+0xb6>
 80068b6:	6920      	ldr	r0, [r4, #16]
 80068b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80068bc:	f104 0314 	add.w	r3, r4, #20
 80068c0:	f019 091f 	ands.w	r9, r9, #31
 80068c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80068c8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80068cc:	d02b      	beq.n	8006926 <__lshift+0xbe>
 80068ce:	f1c9 0e20 	rsb	lr, r9, #32
 80068d2:	468a      	mov	sl, r1
 80068d4:	2200      	movs	r2, #0
 80068d6:	6818      	ldr	r0, [r3, #0]
 80068d8:	fa00 f009 	lsl.w	r0, r0, r9
 80068dc:	4302      	orrs	r2, r0
 80068de:	f84a 2b04 	str.w	r2, [sl], #4
 80068e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80068e6:	459c      	cmp	ip, r3
 80068e8:	fa22 f20e 	lsr.w	r2, r2, lr
 80068ec:	d8f3      	bhi.n	80068d6 <__lshift+0x6e>
 80068ee:	ebac 0304 	sub.w	r3, ip, r4
 80068f2:	3b15      	subs	r3, #21
 80068f4:	f023 0303 	bic.w	r3, r3, #3
 80068f8:	3304      	adds	r3, #4
 80068fa:	f104 0015 	add.w	r0, r4, #21
 80068fe:	4584      	cmp	ip, r0
 8006900:	bf38      	it	cc
 8006902:	2304      	movcc	r3, #4
 8006904:	50ca      	str	r2, [r1, r3]
 8006906:	b10a      	cbz	r2, 800690c <__lshift+0xa4>
 8006908:	f108 0602 	add.w	r6, r8, #2
 800690c:	3e01      	subs	r6, #1
 800690e:	4638      	mov	r0, r7
 8006910:	612e      	str	r6, [r5, #16]
 8006912:	4621      	mov	r1, r4
 8006914:	f7ff fd8c 	bl	8006430 <_Bfree>
 8006918:	4628      	mov	r0, r5
 800691a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800691e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006922:	3301      	adds	r3, #1
 8006924:	e7c5      	b.n	80068b2 <__lshift+0x4a>
 8006926:	3904      	subs	r1, #4
 8006928:	f853 2b04 	ldr.w	r2, [r3], #4
 800692c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006930:	459c      	cmp	ip, r3
 8006932:	d8f9      	bhi.n	8006928 <__lshift+0xc0>
 8006934:	e7ea      	b.n	800690c <__lshift+0xa4>
 8006936:	bf00      	nop
 8006938:	080092b4 	.word	0x080092b4
 800693c:	08009344 	.word	0x08009344

08006940 <__mcmp>:
 8006940:	b530      	push	{r4, r5, lr}
 8006942:	6902      	ldr	r2, [r0, #16]
 8006944:	690c      	ldr	r4, [r1, #16]
 8006946:	1b12      	subs	r2, r2, r4
 8006948:	d10e      	bne.n	8006968 <__mcmp+0x28>
 800694a:	f100 0314 	add.w	r3, r0, #20
 800694e:	3114      	adds	r1, #20
 8006950:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006954:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006958:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800695c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006960:	42a5      	cmp	r5, r4
 8006962:	d003      	beq.n	800696c <__mcmp+0x2c>
 8006964:	d305      	bcc.n	8006972 <__mcmp+0x32>
 8006966:	2201      	movs	r2, #1
 8006968:	4610      	mov	r0, r2
 800696a:	bd30      	pop	{r4, r5, pc}
 800696c:	4283      	cmp	r3, r0
 800696e:	d3f3      	bcc.n	8006958 <__mcmp+0x18>
 8006970:	e7fa      	b.n	8006968 <__mcmp+0x28>
 8006972:	f04f 32ff 	mov.w	r2, #4294967295
 8006976:	e7f7      	b.n	8006968 <__mcmp+0x28>

08006978 <__mdiff>:
 8006978:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800697c:	460c      	mov	r4, r1
 800697e:	4606      	mov	r6, r0
 8006980:	4611      	mov	r1, r2
 8006982:	4620      	mov	r0, r4
 8006984:	4617      	mov	r7, r2
 8006986:	f7ff ffdb 	bl	8006940 <__mcmp>
 800698a:	1e05      	subs	r5, r0, #0
 800698c:	d110      	bne.n	80069b0 <__mdiff+0x38>
 800698e:	4629      	mov	r1, r5
 8006990:	4630      	mov	r0, r6
 8006992:	f7ff fd0d 	bl	80063b0 <_Balloc>
 8006996:	b930      	cbnz	r0, 80069a6 <__mdiff+0x2e>
 8006998:	4b39      	ldr	r3, [pc, #228]	; (8006a80 <__mdiff+0x108>)
 800699a:	4602      	mov	r2, r0
 800699c:	f240 2132 	movw	r1, #562	; 0x232
 80069a0:	4838      	ldr	r0, [pc, #224]	; (8006a84 <__mdiff+0x10c>)
 80069a2:	f000 fc0d 	bl	80071c0 <__assert_func>
 80069a6:	2301      	movs	r3, #1
 80069a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80069ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069b0:	bfa4      	itt	ge
 80069b2:	463b      	movge	r3, r7
 80069b4:	4627      	movge	r7, r4
 80069b6:	4630      	mov	r0, r6
 80069b8:	6879      	ldr	r1, [r7, #4]
 80069ba:	bfa6      	itte	ge
 80069bc:	461c      	movge	r4, r3
 80069be:	2500      	movge	r5, #0
 80069c0:	2501      	movlt	r5, #1
 80069c2:	f7ff fcf5 	bl	80063b0 <_Balloc>
 80069c6:	b920      	cbnz	r0, 80069d2 <__mdiff+0x5a>
 80069c8:	4b2d      	ldr	r3, [pc, #180]	; (8006a80 <__mdiff+0x108>)
 80069ca:	4602      	mov	r2, r0
 80069cc:	f44f 7110 	mov.w	r1, #576	; 0x240
 80069d0:	e7e6      	b.n	80069a0 <__mdiff+0x28>
 80069d2:	693e      	ldr	r6, [r7, #16]
 80069d4:	60c5      	str	r5, [r0, #12]
 80069d6:	6925      	ldr	r5, [r4, #16]
 80069d8:	f107 0114 	add.w	r1, r7, #20
 80069dc:	f104 0914 	add.w	r9, r4, #20
 80069e0:	f100 0e14 	add.w	lr, r0, #20
 80069e4:	f107 0210 	add.w	r2, r7, #16
 80069e8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80069ec:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80069f0:	46f2      	mov	sl, lr
 80069f2:	2700      	movs	r7, #0
 80069f4:	f859 3b04 	ldr.w	r3, [r9], #4
 80069f8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80069fc:	fa1f f883 	uxth.w	r8, r3
 8006a00:	fa17 f78b 	uxtah	r7, r7, fp
 8006a04:	0c1b      	lsrs	r3, r3, #16
 8006a06:	eba7 0808 	sub.w	r8, r7, r8
 8006a0a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006a0e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006a12:	fa1f f888 	uxth.w	r8, r8
 8006a16:	141f      	asrs	r7, r3, #16
 8006a18:	454d      	cmp	r5, r9
 8006a1a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006a1e:	f84a 3b04 	str.w	r3, [sl], #4
 8006a22:	d8e7      	bhi.n	80069f4 <__mdiff+0x7c>
 8006a24:	1b2b      	subs	r3, r5, r4
 8006a26:	3b15      	subs	r3, #21
 8006a28:	f023 0303 	bic.w	r3, r3, #3
 8006a2c:	3304      	adds	r3, #4
 8006a2e:	3415      	adds	r4, #21
 8006a30:	42a5      	cmp	r5, r4
 8006a32:	bf38      	it	cc
 8006a34:	2304      	movcc	r3, #4
 8006a36:	4419      	add	r1, r3
 8006a38:	4473      	add	r3, lr
 8006a3a:	469e      	mov	lr, r3
 8006a3c:	460d      	mov	r5, r1
 8006a3e:	4565      	cmp	r5, ip
 8006a40:	d30e      	bcc.n	8006a60 <__mdiff+0xe8>
 8006a42:	f10c 0203 	add.w	r2, ip, #3
 8006a46:	1a52      	subs	r2, r2, r1
 8006a48:	f022 0203 	bic.w	r2, r2, #3
 8006a4c:	3903      	subs	r1, #3
 8006a4e:	458c      	cmp	ip, r1
 8006a50:	bf38      	it	cc
 8006a52:	2200      	movcc	r2, #0
 8006a54:	441a      	add	r2, r3
 8006a56:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006a5a:	b17b      	cbz	r3, 8006a7c <__mdiff+0x104>
 8006a5c:	6106      	str	r6, [r0, #16]
 8006a5e:	e7a5      	b.n	80069ac <__mdiff+0x34>
 8006a60:	f855 8b04 	ldr.w	r8, [r5], #4
 8006a64:	fa17 f488 	uxtah	r4, r7, r8
 8006a68:	1422      	asrs	r2, r4, #16
 8006a6a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8006a6e:	b2a4      	uxth	r4, r4
 8006a70:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006a74:	f84e 4b04 	str.w	r4, [lr], #4
 8006a78:	1417      	asrs	r7, r2, #16
 8006a7a:	e7e0      	b.n	8006a3e <__mdiff+0xc6>
 8006a7c:	3e01      	subs	r6, #1
 8006a7e:	e7ea      	b.n	8006a56 <__mdiff+0xde>
 8006a80:	080092b4 	.word	0x080092b4
 8006a84:	08009344 	.word	0x08009344

08006a88 <__ulp>:
 8006a88:	b082      	sub	sp, #8
 8006a8a:	ed8d 0b00 	vstr	d0, [sp]
 8006a8e:	9b01      	ldr	r3, [sp, #4]
 8006a90:	4912      	ldr	r1, [pc, #72]	; (8006adc <__ulp+0x54>)
 8006a92:	4019      	ands	r1, r3
 8006a94:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8006a98:	2900      	cmp	r1, #0
 8006a9a:	dd05      	ble.n	8006aa8 <__ulp+0x20>
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	460b      	mov	r3, r1
 8006aa0:	ec43 2b10 	vmov	d0, r2, r3
 8006aa4:	b002      	add	sp, #8
 8006aa6:	4770      	bx	lr
 8006aa8:	4249      	negs	r1, r1
 8006aaa:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8006aae:	ea4f 5021 	mov.w	r0, r1, asr #20
 8006ab2:	f04f 0200 	mov.w	r2, #0
 8006ab6:	f04f 0300 	mov.w	r3, #0
 8006aba:	da04      	bge.n	8006ac6 <__ulp+0x3e>
 8006abc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8006ac0:	fa41 f300 	asr.w	r3, r1, r0
 8006ac4:	e7ec      	b.n	8006aa0 <__ulp+0x18>
 8006ac6:	f1a0 0114 	sub.w	r1, r0, #20
 8006aca:	291e      	cmp	r1, #30
 8006acc:	bfda      	itte	le
 8006ace:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8006ad2:	fa20 f101 	lsrle.w	r1, r0, r1
 8006ad6:	2101      	movgt	r1, #1
 8006ad8:	460a      	mov	r2, r1
 8006ada:	e7e1      	b.n	8006aa0 <__ulp+0x18>
 8006adc:	7ff00000 	.word	0x7ff00000

08006ae0 <__b2d>:
 8006ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ae2:	6905      	ldr	r5, [r0, #16]
 8006ae4:	f100 0714 	add.w	r7, r0, #20
 8006ae8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8006aec:	1f2e      	subs	r6, r5, #4
 8006aee:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8006af2:	4620      	mov	r0, r4
 8006af4:	f7ff fd52 	bl	800659c <__hi0bits>
 8006af8:	f1c0 0320 	rsb	r3, r0, #32
 8006afc:	280a      	cmp	r0, #10
 8006afe:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8006b7c <__b2d+0x9c>
 8006b02:	600b      	str	r3, [r1, #0]
 8006b04:	dc14      	bgt.n	8006b30 <__b2d+0x50>
 8006b06:	f1c0 0e0b 	rsb	lr, r0, #11
 8006b0a:	fa24 f10e 	lsr.w	r1, r4, lr
 8006b0e:	42b7      	cmp	r7, r6
 8006b10:	ea41 030c 	orr.w	r3, r1, ip
 8006b14:	bf34      	ite	cc
 8006b16:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8006b1a:	2100      	movcs	r1, #0
 8006b1c:	3015      	adds	r0, #21
 8006b1e:	fa04 f000 	lsl.w	r0, r4, r0
 8006b22:	fa21 f10e 	lsr.w	r1, r1, lr
 8006b26:	ea40 0201 	orr.w	r2, r0, r1
 8006b2a:	ec43 2b10 	vmov	d0, r2, r3
 8006b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b30:	42b7      	cmp	r7, r6
 8006b32:	bf3a      	itte	cc
 8006b34:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8006b38:	f1a5 0608 	subcc.w	r6, r5, #8
 8006b3c:	2100      	movcs	r1, #0
 8006b3e:	380b      	subs	r0, #11
 8006b40:	d017      	beq.n	8006b72 <__b2d+0x92>
 8006b42:	f1c0 0c20 	rsb	ip, r0, #32
 8006b46:	fa04 f500 	lsl.w	r5, r4, r0
 8006b4a:	42be      	cmp	r6, r7
 8006b4c:	fa21 f40c 	lsr.w	r4, r1, ip
 8006b50:	ea45 0504 	orr.w	r5, r5, r4
 8006b54:	bf8c      	ite	hi
 8006b56:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8006b5a:	2400      	movls	r4, #0
 8006b5c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8006b60:	fa01 f000 	lsl.w	r0, r1, r0
 8006b64:	fa24 f40c 	lsr.w	r4, r4, ip
 8006b68:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006b6c:	ea40 0204 	orr.w	r2, r0, r4
 8006b70:	e7db      	b.n	8006b2a <__b2d+0x4a>
 8006b72:	ea44 030c 	orr.w	r3, r4, ip
 8006b76:	460a      	mov	r2, r1
 8006b78:	e7d7      	b.n	8006b2a <__b2d+0x4a>
 8006b7a:	bf00      	nop
 8006b7c:	3ff00000 	.word	0x3ff00000

08006b80 <__d2b>:
 8006b80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006b84:	4689      	mov	r9, r1
 8006b86:	2101      	movs	r1, #1
 8006b88:	ec57 6b10 	vmov	r6, r7, d0
 8006b8c:	4690      	mov	r8, r2
 8006b8e:	f7ff fc0f 	bl	80063b0 <_Balloc>
 8006b92:	4604      	mov	r4, r0
 8006b94:	b930      	cbnz	r0, 8006ba4 <__d2b+0x24>
 8006b96:	4602      	mov	r2, r0
 8006b98:	4b25      	ldr	r3, [pc, #148]	; (8006c30 <__d2b+0xb0>)
 8006b9a:	4826      	ldr	r0, [pc, #152]	; (8006c34 <__d2b+0xb4>)
 8006b9c:	f240 310a 	movw	r1, #778	; 0x30a
 8006ba0:	f000 fb0e 	bl	80071c0 <__assert_func>
 8006ba4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006ba8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006bac:	bb35      	cbnz	r5, 8006bfc <__d2b+0x7c>
 8006bae:	2e00      	cmp	r6, #0
 8006bb0:	9301      	str	r3, [sp, #4]
 8006bb2:	d028      	beq.n	8006c06 <__d2b+0x86>
 8006bb4:	4668      	mov	r0, sp
 8006bb6:	9600      	str	r6, [sp, #0]
 8006bb8:	f7ff fd10 	bl	80065dc <__lo0bits>
 8006bbc:	9900      	ldr	r1, [sp, #0]
 8006bbe:	b300      	cbz	r0, 8006c02 <__d2b+0x82>
 8006bc0:	9a01      	ldr	r2, [sp, #4]
 8006bc2:	f1c0 0320 	rsb	r3, r0, #32
 8006bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8006bca:	430b      	orrs	r3, r1
 8006bcc:	40c2      	lsrs	r2, r0
 8006bce:	6163      	str	r3, [r4, #20]
 8006bd0:	9201      	str	r2, [sp, #4]
 8006bd2:	9b01      	ldr	r3, [sp, #4]
 8006bd4:	61a3      	str	r3, [r4, #24]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	bf14      	ite	ne
 8006bda:	2202      	movne	r2, #2
 8006bdc:	2201      	moveq	r2, #1
 8006bde:	6122      	str	r2, [r4, #16]
 8006be0:	b1d5      	cbz	r5, 8006c18 <__d2b+0x98>
 8006be2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006be6:	4405      	add	r5, r0
 8006be8:	f8c9 5000 	str.w	r5, [r9]
 8006bec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006bf0:	f8c8 0000 	str.w	r0, [r8]
 8006bf4:	4620      	mov	r0, r4
 8006bf6:	b003      	add	sp, #12
 8006bf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006bfc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c00:	e7d5      	b.n	8006bae <__d2b+0x2e>
 8006c02:	6161      	str	r1, [r4, #20]
 8006c04:	e7e5      	b.n	8006bd2 <__d2b+0x52>
 8006c06:	a801      	add	r0, sp, #4
 8006c08:	f7ff fce8 	bl	80065dc <__lo0bits>
 8006c0c:	9b01      	ldr	r3, [sp, #4]
 8006c0e:	6163      	str	r3, [r4, #20]
 8006c10:	2201      	movs	r2, #1
 8006c12:	6122      	str	r2, [r4, #16]
 8006c14:	3020      	adds	r0, #32
 8006c16:	e7e3      	b.n	8006be0 <__d2b+0x60>
 8006c18:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006c1c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006c20:	f8c9 0000 	str.w	r0, [r9]
 8006c24:	6918      	ldr	r0, [r3, #16]
 8006c26:	f7ff fcb9 	bl	800659c <__hi0bits>
 8006c2a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006c2e:	e7df      	b.n	8006bf0 <__d2b+0x70>
 8006c30:	080092b4 	.word	0x080092b4
 8006c34:	08009344 	.word	0x08009344

08006c38 <__ratio>:
 8006c38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c3c:	4688      	mov	r8, r1
 8006c3e:	4669      	mov	r1, sp
 8006c40:	4681      	mov	r9, r0
 8006c42:	f7ff ff4d 	bl	8006ae0 <__b2d>
 8006c46:	a901      	add	r1, sp, #4
 8006c48:	4640      	mov	r0, r8
 8006c4a:	ec55 4b10 	vmov	r4, r5, d0
 8006c4e:	f7ff ff47 	bl	8006ae0 <__b2d>
 8006c52:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006c56:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006c5a:	eba3 0c02 	sub.w	ip, r3, r2
 8006c5e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006c62:	1a9b      	subs	r3, r3, r2
 8006c64:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006c68:	ec51 0b10 	vmov	r0, r1, d0
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	bfd6      	itet	le
 8006c70:	460a      	movle	r2, r1
 8006c72:	462a      	movgt	r2, r5
 8006c74:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006c78:	468b      	mov	fp, r1
 8006c7a:	462f      	mov	r7, r5
 8006c7c:	bfd4      	ite	le
 8006c7e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8006c82:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006c86:	4620      	mov	r0, r4
 8006c88:	ee10 2a10 	vmov	r2, s0
 8006c8c:	465b      	mov	r3, fp
 8006c8e:	4639      	mov	r1, r7
 8006c90:	f7f9 fddc 	bl	800084c <__aeabi_ddiv>
 8006c94:	ec41 0b10 	vmov	d0, r0, r1
 8006c98:	b003      	add	sp, #12
 8006c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006c9e <__copybits>:
 8006c9e:	3901      	subs	r1, #1
 8006ca0:	b570      	push	{r4, r5, r6, lr}
 8006ca2:	1149      	asrs	r1, r1, #5
 8006ca4:	6914      	ldr	r4, [r2, #16]
 8006ca6:	3101      	adds	r1, #1
 8006ca8:	f102 0314 	add.w	r3, r2, #20
 8006cac:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006cb0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006cb4:	1f05      	subs	r5, r0, #4
 8006cb6:	42a3      	cmp	r3, r4
 8006cb8:	d30c      	bcc.n	8006cd4 <__copybits+0x36>
 8006cba:	1aa3      	subs	r3, r4, r2
 8006cbc:	3b11      	subs	r3, #17
 8006cbe:	f023 0303 	bic.w	r3, r3, #3
 8006cc2:	3211      	adds	r2, #17
 8006cc4:	42a2      	cmp	r2, r4
 8006cc6:	bf88      	it	hi
 8006cc8:	2300      	movhi	r3, #0
 8006cca:	4418      	add	r0, r3
 8006ccc:	2300      	movs	r3, #0
 8006cce:	4288      	cmp	r0, r1
 8006cd0:	d305      	bcc.n	8006cde <__copybits+0x40>
 8006cd2:	bd70      	pop	{r4, r5, r6, pc}
 8006cd4:	f853 6b04 	ldr.w	r6, [r3], #4
 8006cd8:	f845 6f04 	str.w	r6, [r5, #4]!
 8006cdc:	e7eb      	b.n	8006cb6 <__copybits+0x18>
 8006cde:	f840 3b04 	str.w	r3, [r0], #4
 8006ce2:	e7f4      	b.n	8006cce <__copybits+0x30>

08006ce4 <__any_on>:
 8006ce4:	f100 0214 	add.w	r2, r0, #20
 8006ce8:	6900      	ldr	r0, [r0, #16]
 8006cea:	114b      	asrs	r3, r1, #5
 8006cec:	4298      	cmp	r0, r3
 8006cee:	b510      	push	{r4, lr}
 8006cf0:	db11      	blt.n	8006d16 <__any_on+0x32>
 8006cf2:	dd0a      	ble.n	8006d0a <__any_on+0x26>
 8006cf4:	f011 011f 	ands.w	r1, r1, #31
 8006cf8:	d007      	beq.n	8006d0a <__any_on+0x26>
 8006cfa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006cfe:	fa24 f001 	lsr.w	r0, r4, r1
 8006d02:	fa00 f101 	lsl.w	r1, r0, r1
 8006d06:	428c      	cmp	r4, r1
 8006d08:	d10b      	bne.n	8006d22 <__any_on+0x3e>
 8006d0a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d803      	bhi.n	8006d1a <__any_on+0x36>
 8006d12:	2000      	movs	r0, #0
 8006d14:	bd10      	pop	{r4, pc}
 8006d16:	4603      	mov	r3, r0
 8006d18:	e7f7      	b.n	8006d0a <__any_on+0x26>
 8006d1a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006d1e:	2900      	cmp	r1, #0
 8006d20:	d0f5      	beq.n	8006d0e <__any_on+0x2a>
 8006d22:	2001      	movs	r0, #1
 8006d24:	e7f6      	b.n	8006d14 <__any_on+0x30>

08006d26 <_calloc_r>:
 8006d26:	b513      	push	{r0, r1, r4, lr}
 8006d28:	434a      	muls	r2, r1
 8006d2a:	4611      	mov	r1, r2
 8006d2c:	9201      	str	r2, [sp, #4]
 8006d2e:	f000 f859 	bl	8006de4 <_malloc_r>
 8006d32:	4604      	mov	r4, r0
 8006d34:	b118      	cbz	r0, 8006d3e <_calloc_r+0x18>
 8006d36:	9a01      	ldr	r2, [sp, #4]
 8006d38:	2100      	movs	r1, #0
 8006d3a:	f7fc fbc7 	bl	80034cc <memset>
 8006d3e:	4620      	mov	r0, r4
 8006d40:	b002      	add	sp, #8
 8006d42:	bd10      	pop	{r4, pc}

08006d44 <_free_r>:
 8006d44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d46:	2900      	cmp	r1, #0
 8006d48:	d048      	beq.n	8006ddc <_free_r+0x98>
 8006d4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d4e:	9001      	str	r0, [sp, #4]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	f1a1 0404 	sub.w	r4, r1, #4
 8006d56:	bfb8      	it	lt
 8006d58:	18e4      	addlt	r4, r4, r3
 8006d5a:	f000 fa7b 	bl	8007254 <__malloc_lock>
 8006d5e:	4a20      	ldr	r2, [pc, #128]	; (8006de0 <_free_r+0x9c>)
 8006d60:	9801      	ldr	r0, [sp, #4]
 8006d62:	6813      	ldr	r3, [r2, #0]
 8006d64:	4615      	mov	r5, r2
 8006d66:	b933      	cbnz	r3, 8006d76 <_free_r+0x32>
 8006d68:	6063      	str	r3, [r4, #4]
 8006d6a:	6014      	str	r4, [r2, #0]
 8006d6c:	b003      	add	sp, #12
 8006d6e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d72:	f000 ba75 	b.w	8007260 <__malloc_unlock>
 8006d76:	42a3      	cmp	r3, r4
 8006d78:	d90b      	bls.n	8006d92 <_free_r+0x4e>
 8006d7a:	6821      	ldr	r1, [r4, #0]
 8006d7c:	1862      	adds	r2, r4, r1
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	bf04      	itt	eq
 8006d82:	681a      	ldreq	r2, [r3, #0]
 8006d84:	685b      	ldreq	r3, [r3, #4]
 8006d86:	6063      	str	r3, [r4, #4]
 8006d88:	bf04      	itt	eq
 8006d8a:	1852      	addeq	r2, r2, r1
 8006d8c:	6022      	streq	r2, [r4, #0]
 8006d8e:	602c      	str	r4, [r5, #0]
 8006d90:	e7ec      	b.n	8006d6c <_free_r+0x28>
 8006d92:	461a      	mov	r2, r3
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	b10b      	cbz	r3, 8006d9c <_free_r+0x58>
 8006d98:	42a3      	cmp	r3, r4
 8006d9a:	d9fa      	bls.n	8006d92 <_free_r+0x4e>
 8006d9c:	6811      	ldr	r1, [r2, #0]
 8006d9e:	1855      	adds	r5, r2, r1
 8006da0:	42a5      	cmp	r5, r4
 8006da2:	d10b      	bne.n	8006dbc <_free_r+0x78>
 8006da4:	6824      	ldr	r4, [r4, #0]
 8006da6:	4421      	add	r1, r4
 8006da8:	1854      	adds	r4, r2, r1
 8006daa:	42a3      	cmp	r3, r4
 8006dac:	6011      	str	r1, [r2, #0]
 8006dae:	d1dd      	bne.n	8006d6c <_free_r+0x28>
 8006db0:	681c      	ldr	r4, [r3, #0]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	6053      	str	r3, [r2, #4]
 8006db6:	4421      	add	r1, r4
 8006db8:	6011      	str	r1, [r2, #0]
 8006dba:	e7d7      	b.n	8006d6c <_free_r+0x28>
 8006dbc:	d902      	bls.n	8006dc4 <_free_r+0x80>
 8006dbe:	230c      	movs	r3, #12
 8006dc0:	6003      	str	r3, [r0, #0]
 8006dc2:	e7d3      	b.n	8006d6c <_free_r+0x28>
 8006dc4:	6825      	ldr	r5, [r4, #0]
 8006dc6:	1961      	adds	r1, r4, r5
 8006dc8:	428b      	cmp	r3, r1
 8006dca:	bf04      	itt	eq
 8006dcc:	6819      	ldreq	r1, [r3, #0]
 8006dce:	685b      	ldreq	r3, [r3, #4]
 8006dd0:	6063      	str	r3, [r4, #4]
 8006dd2:	bf04      	itt	eq
 8006dd4:	1949      	addeq	r1, r1, r5
 8006dd6:	6021      	streq	r1, [r4, #0]
 8006dd8:	6054      	str	r4, [r2, #4]
 8006dda:	e7c7      	b.n	8006d6c <_free_r+0x28>
 8006ddc:	b003      	add	sp, #12
 8006dde:	bd30      	pop	{r4, r5, pc}
 8006de0:	20000608 	.word	0x20000608

08006de4 <_malloc_r>:
 8006de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006de6:	1ccd      	adds	r5, r1, #3
 8006de8:	f025 0503 	bic.w	r5, r5, #3
 8006dec:	3508      	adds	r5, #8
 8006dee:	2d0c      	cmp	r5, #12
 8006df0:	bf38      	it	cc
 8006df2:	250c      	movcc	r5, #12
 8006df4:	2d00      	cmp	r5, #0
 8006df6:	4606      	mov	r6, r0
 8006df8:	db01      	blt.n	8006dfe <_malloc_r+0x1a>
 8006dfa:	42a9      	cmp	r1, r5
 8006dfc:	d903      	bls.n	8006e06 <_malloc_r+0x22>
 8006dfe:	230c      	movs	r3, #12
 8006e00:	6033      	str	r3, [r6, #0]
 8006e02:	2000      	movs	r0, #0
 8006e04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e06:	f000 fa25 	bl	8007254 <__malloc_lock>
 8006e0a:	4921      	ldr	r1, [pc, #132]	; (8006e90 <_malloc_r+0xac>)
 8006e0c:	680a      	ldr	r2, [r1, #0]
 8006e0e:	4614      	mov	r4, r2
 8006e10:	b99c      	cbnz	r4, 8006e3a <_malloc_r+0x56>
 8006e12:	4f20      	ldr	r7, [pc, #128]	; (8006e94 <_malloc_r+0xb0>)
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	b923      	cbnz	r3, 8006e22 <_malloc_r+0x3e>
 8006e18:	4621      	mov	r1, r4
 8006e1a:	4630      	mov	r0, r6
 8006e1c:	f000 f9a0 	bl	8007160 <_sbrk_r>
 8006e20:	6038      	str	r0, [r7, #0]
 8006e22:	4629      	mov	r1, r5
 8006e24:	4630      	mov	r0, r6
 8006e26:	f000 f99b 	bl	8007160 <_sbrk_r>
 8006e2a:	1c43      	adds	r3, r0, #1
 8006e2c:	d123      	bne.n	8006e76 <_malloc_r+0x92>
 8006e2e:	230c      	movs	r3, #12
 8006e30:	6033      	str	r3, [r6, #0]
 8006e32:	4630      	mov	r0, r6
 8006e34:	f000 fa14 	bl	8007260 <__malloc_unlock>
 8006e38:	e7e3      	b.n	8006e02 <_malloc_r+0x1e>
 8006e3a:	6823      	ldr	r3, [r4, #0]
 8006e3c:	1b5b      	subs	r3, r3, r5
 8006e3e:	d417      	bmi.n	8006e70 <_malloc_r+0x8c>
 8006e40:	2b0b      	cmp	r3, #11
 8006e42:	d903      	bls.n	8006e4c <_malloc_r+0x68>
 8006e44:	6023      	str	r3, [r4, #0]
 8006e46:	441c      	add	r4, r3
 8006e48:	6025      	str	r5, [r4, #0]
 8006e4a:	e004      	b.n	8006e56 <_malloc_r+0x72>
 8006e4c:	6863      	ldr	r3, [r4, #4]
 8006e4e:	42a2      	cmp	r2, r4
 8006e50:	bf0c      	ite	eq
 8006e52:	600b      	streq	r3, [r1, #0]
 8006e54:	6053      	strne	r3, [r2, #4]
 8006e56:	4630      	mov	r0, r6
 8006e58:	f000 fa02 	bl	8007260 <__malloc_unlock>
 8006e5c:	f104 000b 	add.w	r0, r4, #11
 8006e60:	1d23      	adds	r3, r4, #4
 8006e62:	f020 0007 	bic.w	r0, r0, #7
 8006e66:	1ac2      	subs	r2, r0, r3
 8006e68:	d0cc      	beq.n	8006e04 <_malloc_r+0x20>
 8006e6a:	1a1b      	subs	r3, r3, r0
 8006e6c:	50a3      	str	r3, [r4, r2]
 8006e6e:	e7c9      	b.n	8006e04 <_malloc_r+0x20>
 8006e70:	4622      	mov	r2, r4
 8006e72:	6864      	ldr	r4, [r4, #4]
 8006e74:	e7cc      	b.n	8006e10 <_malloc_r+0x2c>
 8006e76:	1cc4      	adds	r4, r0, #3
 8006e78:	f024 0403 	bic.w	r4, r4, #3
 8006e7c:	42a0      	cmp	r0, r4
 8006e7e:	d0e3      	beq.n	8006e48 <_malloc_r+0x64>
 8006e80:	1a21      	subs	r1, r4, r0
 8006e82:	4630      	mov	r0, r6
 8006e84:	f000 f96c 	bl	8007160 <_sbrk_r>
 8006e88:	3001      	adds	r0, #1
 8006e8a:	d1dd      	bne.n	8006e48 <_malloc_r+0x64>
 8006e8c:	e7cf      	b.n	8006e2e <_malloc_r+0x4a>
 8006e8e:	bf00      	nop
 8006e90:	20000608 	.word	0x20000608
 8006e94:	2000060c 	.word	0x2000060c

08006e98 <__ssputs_r>:
 8006e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e9c:	688e      	ldr	r6, [r1, #8]
 8006e9e:	429e      	cmp	r6, r3
 8006ea0:	4682      	mov	sl, r0
 8006ea2:	460c      	mov	r4, r1
 8006ea4:	4690      	mov	r8, r2
 8006ea6:	461f      	mov	r7, r3
 8006ea8:	d838      	bhi.n	8006f1c <__ssputs_r+0x84>
 8006eaa:	898a      	ldrh	r2, [r1, #12]
 8006eac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006eb0:	d032      	beq.n	8006f18 <__ssputs_r+0x80>
 8006eb2:	6825      	ldr	r5, [r4, #0]
 8006eb4:	6909      	ldr	r1, [r1, #16]
 8006eb6:	eba5 0901 	sub.w	r9, r5, r1
 8006eba:	6965      	ldr	r5, [r4, #20]
 8006ebc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006ec0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006ec4:	3301      	adds	r3, #1
 8006ec6:	444b      	add	r3, r9
 8006ec8:	106d      	asrs	r5, r5, #1
 8006eca:	429d      	cmp	r5, r3
 8006ecc:	bf38      	it	cc
 8006ece:	461d      	movcc	r5, r3
 8006ed0:	0553      	lsls	r3, r2, #21
 8006ed2:	d531      	bpl.n	8006f38 <__ssputs_r+0xa0>
 8006ed4:	4629      	mov	r1, r5
 8006ed6:	f7ff ff85 	bl	8006de4 <_malloc_r>
 8006eda:	4606      	mov	r6, r0
 8006edc:	b950      	cbnz	r0, 8006ef4 <__ssputs_r+0x5c>
 8006ede:	230c      	movs	r3, #12
 8006ee0:	f8ca 3000 	str.w	r3, [sl]
 8006ee4:	89a3      	ldrh	r3, [r4, #12]
 8006ee6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006eea:	81a3      	strh	r3, [r4, #12]
 8006eec:	f04f 30ff 	mov.w	r0, #4294967295
 8006ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ef4:	6921      	ldr	r1, [r4, #16]
 8006ef6:	464a      	mov	r2, r9
 8006ef8:	f7ff fa4c 	bl	8006394 <memcpy>
 8006efc:	89a3      	ldrh	r3, [r4, #12]
 8006efe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006f02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f06:	81a3      	strh	r3, [r4, #12]
 8006f08:	6126      	str	r6, [r4, #16]
 8006f0a:	6165      	str	r5, [r4, #20]
 8006f0c:	444e      	add	r6, r9
 8006f0e:	eba5 0509 	sub.w	r5, r5, r9
 8006f12:	6026      	str	r6, [r4, #0]
 8006f14:	60a5      	str	r5, [r4, #8]
 8006f16:	463e      	mov	r6, r7
 8006f18:	42be      	cmp	r6, r7
 8006f1a:	d900      	bls.n	8006f1e <__ssputs_r+0x86>
 8006f1c:	463e      	mov	r6, r7
 8006f1e:	4632      	mov	r2, r6
 8006f20:	6820      	ldr	r0, [r4, #0]
 8006f22:	4641      	mov	r1, r8
 8006f24:	f000 f97c 	bl	8007220 <memmove>
 8006f28:	68a3      	ldr	r3, [r4, #8]
 8006f2a:	6822      	ldr	r2, [r4, #0]
 8006f2c:	1b9b      	subs	r3, r3, r6
 8006f2e:	4432      	add	r2, r6
 8006f30:	60a3      	str	r3, [r4, #8]
 8006f32:	6022      	str	r2, [r4, #0]
 8006f34:	2000      	movs	r0, #0
 8006f36:	e7db      	b.n	8006ef0 <__ssputs_r+0x58>
 8006f38:	462a      	mov	r2, r5
 8006f3a:	f000 f997 	bl	800726c <_realloc_r>
 8006f3e:	4606      	mov	r6, r0
 8006f40:	2800      	cmp	r0, #0
 8006f42:	d1e1      	bne.n	8006f08 <__ssputs_r+0x70>
 8006f44:	6921      	ldr	r1, [r4, #16]
 8006f46:	4650      	mov	r0, sl
 8006f48:	f7ff fefc 	bl	8006d44 <_free_r>
 8006f4c:	e7c7      	b.n	8006ede <__ssputs_r+0x46>
	...

08006f50 <_svfiprintf_r>:
 8006f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f54:	4698      	mov	r8, r3
 8006f56:	898b      	ldrh	r3, [r1, #12]
 8006f58:	061b      	lsls	r3, r3, #24
 8006f5a:	b09d      	sub	sp, #116	; 0x74
 8006f5c:	4607      	mov	r7, r0
 8006f5e:	460d      	mov	r5, r1
 8006f60:	4614      	mov	r4, r2
 8006f62:	d50e      	bpl.n	8006f82 <_svfiprintf_r+0x32>
 8006f64:	690b      	ldr	r3, [r1, #16]
 8006f66:	b963      	cbnz	r3, 8006f82 <_svfiprintf_r+0x32>
 8006f68:	2140      	movs	r1, #64	; 0x40
 8006f6a:	f7ff ff3b 	bl	8006de4 <_malloc_r>
 8006f6e:	6028      	str	r0, [r5, #0]
 8006f70:	6128      	str	r0, [r5, #16]
 8006f72:	b920      	cbnz	r0, 8006f7e <_svfiprintf_r+0x2e>
 8006f74:	230c      	movs	r3, #12
 8006f76:	603b      	str	r3, [r7, #0]
 8006f78:	f04f 30ff 	mov.w	r0, #4294967295
 8006f7c:	e0d1      	b.n	8007122 <_svfiprintf_r+0x1d2>
 8006f7e:	2340      	movs	r3, #64	; 0x40
 8006f80:	616b      	str	r3, [r5, #20]
 8006f82:	2300      	movs	r3, #0
 8006f84:	9309      	str	r3, [sp, #36]	; 0x24
 8006f86:	2320      	movs	r3, #32
 8006f88:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006f8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f90:	2330      	movs	r3, #48	; 0x30
 8006f92:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800713c <_svfiprintf_r+0x1ec>
 8006f96:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f9a:	f04f 0901 	mov.w	r9, #1
 8006f9e:	4623      	mov	r3, r4
 8006fa0:	469a      	mov	sl, r3
 8006fa2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006fa6:	b10a      	cbz	r2, 8006fac <_svfiprintf_r+0x5c>
 8006fa8:	2a25      	cmp	r2, #37	; 0x25
 8006faa:	d1f9      	bne.n	8006fa0 <_svfiprintf_r+0x50>
 8006fac:	ebba 0b04 	subs.w	fp, sl, r4
 8006fb0:	d00b      	beq.n	8006fca <_svfiprintf_r+0x7a>
 8006fb2:	465b      	mov	r3, fp
 8006fb4:	4622      	mov	r2, r4
 8006fb6:	4629      	mov	r1, r5
 8006fb8:	4638      	mov	r0, r7
 8006fba:	f7ff ff6d 	bl	8006e98 <__ssputs_r>
 8006fbe:	3001      	adds	r0, #1
 8006fc0:	f000 80aa 	beq.w	8007118 <_svfiprintf_r+0x1c8>
 8006fc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006fc6:	445a      	add	r2, fp
 8006fc8:	9209      	str	r2, [sp, #36]	; 0x24
 8006fca:	f89a 3000 	ldrb.w	r3, [sl]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	f000 80a2 	beq.w	8007118 <_svfiprintf_r+0x1c8>
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	f04f 32ff 	mov.w	r2, #4294967295
 8006fda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006fde:	f10a 0a01 	add.w	sl, sl, #1
 8006fe2:	9304      	str	r3, [sp, #16]
 8006fe4:	9307      	str	r3, [sp, #28]
 8006fe6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006fea:	931a      	str	r3, [sp, #104]	; 0x68
 8006fec:	4654      	mov	r4, sl
 8006fee:	2205      	movs	r2, #5
 8006ff0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ff4:	4851      	ldr	r0, [pc, #324]	; (800713c <_svfiprintf_r+0x1ec>)
 8006ff6:	f7f9 f8f3 	bl	80001e0 <memchr>
 8006ffa:	9a04      	ldr	r2, [sp, #16]
 8006ffc:	b9d8      	cbnz	r0, 8007036 <_svfiprintf_r+0xe6>
 8006ffe:	06d0      	lsls	r0, r2, #27
 8007000:	bf44      	itt	mi
 8007002:	2320      	movmi	r3, #32
 8007004:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007008:	0711      	lsls	r1, r2, #28
 800700a:	bf44      	itt	mi
 800700c:	232b      	movmi	r3, #43	; 0x2b
 800700e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007012:	f89a 3000 	ldrb.w	r3, [sl]
 8007016:	2b2a      	cmp	r3, #42	; 0x2a
 8007018:	d015      	beq.n	8007046 <_svfiprintf_r+0xf6>
 800701a:	9a07      	ldr	r2, [sp, #28]
 800701c:	4654      	mov	r4, sl
 800701e:	2000      	movs	r0, #0
 8007020:	f04f 0c0a 	mov.w	ip, #10
 8007024:	4621      	mov	r1, r4
 8007026:	f811 3b01 	ldrb.w	r3, [r1], #1
 800702a:	3b30      	subs	r3, #48	; 0x30
 800702c:	2b09      	cmp	r3, #9
 800702e:	d94e      	bls.n	80070ce <_svfiprintf_r+0x17e>
 8007030:	b1b0      	cbz	r0, 8007060 <_svfiprintf_r+0x110>
 8007032:	9207      	str	r2, [sp, #28]
 8007034:	e014      	b.n	8007060 <_svfiprintf_r+0x110>
 8007036:	eba0 0308 	sub.w	r3, r0, r8
 800703a:	fa09 f303 	lsl.w	r3, r9, r3
 800703e:	4313      	orrs	r3, r2
 8007040:	9304      	str	r3, [sp, #16]
 8007042:	46a2      	mov	sl, r4
 8007044:	e7d2      	b.n	8006fec <_svfiprintf_r+0x9c>
 8007046:	9b03      	ldr	r3, [sp, #12]
 8007048:	1d19      	adds	r1, r3, #4
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	9103      	str	r1, [sp, #12]
 800704e:	2b00      	cmp	r3, #0
 8007050:	bfbb      	ittet	lt
 8007052:	425b      	neglt	r3, r3
 8007054:	f042 0202 	orrlt.w	r2, r2, #2
 8007058:	9307      	strge	r3, [sp, #28]
 800705a:	9307      	strlt	r3, [sp, #28]
 800705c:	bfb8      	it	lt
 800705e:	9204      	strlt	r2, [sp, #16]
 8007060:	7823      	ldrb	r3, [r4, #0]
 8007062:	2b2e      	cmp	r3, #46	; 0x2e
 8007064:	d10c      	bne.n	8007080 <_svfiprintf_r+0x130>
 8007066:	7863      	ldrb	r3, [r4, #1]
 8007068:	2b2a      	cmp	r3, #42	; 0x2a
 800706a:	d135      	bne.n	80070d8 <_svfiprintf_r+0x188>
 800706c:	9b03      	ldr	r3, [sp, #12]
 800706e:	1d1a      	adds	r2, r3, #4
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	9203      	str	r2, [sp, #12]
 8007074:	2b00      	cmp	r3, #0
 8007076:	bfb8      	it	lt
 8007078:	f04f 33ff 	movlt.w	r3, #4294967295
 800707c:	3402      	adds	r4, #2
 800707e:	9305      	str	r3, [sp, #20]
 8007080:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800714c <_svfiprintf_r+0x1fc>
 8007084:	7821      	ldrb	r1, [r4, #0]
 8007086:	2203      	movs	r2, #3
 8007088:	4650      	mov	r0, sl
 800708a:	f7f9 f8a9 	bl	80001e0 <memchr>
 800708e:	b140      	cbz	r0, 80070a2 <_svfiprintf_r+0x152>
 8007090:	2340      	movs	r3, #64	; 0x40
 8007092:	eba0 000a 	sub.w	r0, r0, sl
 8007096:	fa03 f000 	lsl.w	r0, r3, r0
 800709a:	9b04      	ldr	r3, [sp, #16]
 800709c:	4303      	orrs	r3, r0
 800709e:	3401      	adds	r4, #1
 80070a0:	9304      	str	r3, [sp, #16]
 80070a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070a6:	4826      	ldr	r0, [pc, #152]	; (8007140 <_svfiprintf_r+0x1f0>)
 80070a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80070ac:	2206      	movs	r2, #6
 80070ae:	f7f9 f897 	bl	80001e0 <memchr>
 80070b2:	2800      	cmp	r0, #0
 80070b4:	d038      	beq.n	8007128 <_svfiprintf_r+0x1d8>
 80070b6:	4b23      	ldr	r3, [pc, #140]	; (8007144 <_svfiprintf_r+0x1f4>)
 80070b8:	bb1b      	cbnz	r3, 8007102 <_svfiprintf_r+0x1b2>
 80070ba:	9b03      	ldr	r3, [sp, #12]
 80070bc:	3307      	adds	r3, #7
 80070be:	f023 0307 	bic.w	r3, r3, #7
 80070c2:	3308      	adds	r3, #8
 80070c4:	9303      	str	r3, [sp, #12]
 80070c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070c8:	4433      	add	r3, r6
 80070ca:	9309      	str	r3, [sp, #36]	; 0x24
 80070cc:	e767      	b.n	8006f9e <_svfiprintf_r+0x4e>
 80070ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80070d2:	460c      	mov	r4, r1
 80070d4:	2001      	movs	r0, #1
 80070d6:	e7a5      	b.n	8007024 <_svfiprintf_r+0xd4>
 80070d8:	2300      	movs	r3, #0
 80070da:	3401      	adds	r4, #1
 80070dc:	9305      	str	r3, [sp, #20]
 80070de:	4619      	mov	r1, r3
 80070e0:	f04f 0c0a 	mov.w	ip, #10
 80070e4:	4620      	mov	r0, r4
 80070e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80070ea:	3a30      	subs	r2, #48	; 0x30
 80070ec:	2a09      	cmp	r2, #9
 80070ee:	d903      	bls.n	80070f8 <_svfiprintf_r+0x1a8>
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d0c5      	beq.n	8007080 <_svfiprintf_r+0x130>
 80070f4:	9105      	str	r1, [sp, #20]
 80070f6:	e7c3      	b.n	8007080 <_svfiprintf_r+0x130>
 80070f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80070fc:	4604      	mov	r4, r0
 80070fe:	2301      	movs	r3, #1
 8007100:	e7f0      	b.n	80070e4 <_svfiprintf_r+0x194>
 8007102:	ab03      	add	r3, sp, #12
 8007104:	9300      	str	r3, [sp, #0]
 8007106:	462a      	mov	r2, r5
 8007108:	4b0f      	ldr	r3, [pc, #60]	; (8007148 <_svfiprintf_r+0x1f8>)
 800710a:	a904      	add	r1, sp, #16
 800710c:	4638      	mov	r0, r7
 800710e:	f7fc fa85 	bl	800361c <_printf_float>
 8007112:	1c42      	adds	r2, r0, #1
 8007114:	4606      	mov	r6, r0
 8007116:	d1d6      	bne.n	80070c6 <_svfiprintf_r+0x176>
 8007118:	89ab      	ldrh	r3, [r5, #12]
 800711a:	065b      	lsls	r3, r3, #25
 800711c:	f53f af2c 	bmi.w	8006f78 <_svfiprintf_r+0x28>
 8007120:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007122:	b01d      	add	sp, #116	; 0x74
 8007124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007128:	ab03      	add	r3, sp, #12
 800712a:	9300      	str	r3, [sp, #0]
 800712c:	462a      	mov	r2, r5
 800712e:	4b06      	ldr	r3, [pc, #24]	; (8007148 <_svfiprintf_r+0x1f8>)
 8007130:	a904      	add	r1, sp, #16
 8007132:	4638      	mov	r0, r7
 8007134:	f7fc fd16 	bl	8003b64 <_printf_i>
 8007138:	e7eb      	b.n	8007112 <_svfiprintf_r+0x1c2>
 800713a:	bf00      	nop
 800713c:	080094a4 	.word	0x080094a4
 8007140:	080094ae 	.word	0x080094ae
 8007144:	0800361d 	.word	0x0800361d
 8007148:	08006e99 	.word	0x08006e99
 800714c:	080094aa 	.word	0x080094aa

08007150 <nan>:
 8007150:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007158 <nan+0x8>
 8007154:	4770      	bx	lr
 8007156:	bf00      	nop
 8007158:	00000000 	.word	0x00000000
 800715c:	7ff80000 	.word	0x7ff80000

08007160 <_sbrk_r>:
 8007160:	b538      	push	{r3, r4, r5, lr}
 8007162:	4d06      	ldr	r5, [pc, #24]	; (800717c <_sbrk_r+0x1c>)
 8007164:	2300      	movs	r3, #0
 8007166:	4604      	mov	r4, r0
 8007168:	4608      	mov	r0, r1
 800716a:	602b      	str	r3, [r5, #0]
 800716c:	f7fa fc62 	bl	8001a34 <_sbrk>
 8007170:	1c43      	adds	r3, r0, #1
 8007172:	d102      	bne.n	800717a <_sbrk_r+0x1a>
 8007174:	682b      	ldr	r3, [r5, #0]
 8007176:	b103      	cbz	r3, 800717a <_sbrk_r+0x1a>
 8007178:	6023      	str	r3, [r4, #0]
 800717a:	bd38      	pop	{r3, r4, r5, pc}
 800717c:	200006e0 	.word	0x200006e0

08007180 <strncmp>:
 8007180:	b510      	push	{r4, lr}
 8007182:	b16a      	cbz	r2, 80071a0 <strncmp+0x20>
 8007184:	3901      	subs	r1, #1
 8007186:	1884      	adds	r4, r0, r2
 8007188:	f810 3b01 	ldrb.w	r3, [r0], #1
 800718c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007190:	4293      	cmp	r3, r2
 8007192:	d103      	bne.n	800719c <strncmp+0x1c>
 8007194:	42a0      	cmp	r0, r4
 8007196:	d001      	beq.n	800719c <strncmp+0x1c>
 8007198:	2b00      	cmp	r3, #0
 800719a:	d1f5      	bne.n	8007188 <strncmp+0x8>
 800719c:	1a98      	subs	r0, r3, r2
 800719e:	bd10      	pop	{r4, pc}
 80071a0:	4610      	mov	r0, r2
 80071a2:	e7fc      	b.n	800719e <strncmp+0x1e>

080071a4 <__ascii_wctomb>:
 80071a4:	b149      	cbz	r1, 80071ba <__ascii_wctomb+0x16>
 80071a6:	2aff      	cmp	r2, #255	; 0xff
 80071a8:	bf85      	ittet	hi
 80071aa:	238a      	movhi	r3, #138	; 0x8a
 80071ac:	6003      	strhi	r3, [r0, #0]
 80071ae:	700a      	strbls	r2, [r1, #0]
 80071b0:	f04f 30ff 	movhi.w	r0, #4294967295
 80071b4:	bf98      	it	ls
 80071b6:	2001      	movls	r0, #1
 80071b8:	4770      	bx	lr
 80071ba:	4608      	mov	r0, r1
 80071bc:	4770      	bx	lr
	...

080071c0 <__assert_func>:
 80071c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80071c2:	4614      	mov	r4, r2
 80071c4:	461a      	mov	r2, r3
 80071c6:	4b09      	ldr	r3, [pc, #36]	; (80071ec <__assert_func+0x2c>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4605      	mov	r5, r0
 80071cc:	68d8      	ldr	r0, [r3, #12]
 80071ce:	b14c      	cbz	r4, 80071e4 <__assert_func+0x24>
 80071d0:	4b07      	ldr	r3, [pc, #28]	; (80071f0 <__assert_func+0x30>)
 80071d2:	9100      	str	r1, [sp, #0]
 80071d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80071d8:	4906      	ldr	r1, [pc, #24]	; (80071f4 <__assert_func+0x34>)
 80071da:	462b      	mov	r3, r5
 80071dc:	f000 f80e 	bl	80071fc <fiprintf>
 80071e0:	f000 fa84 	bl	80076ec <abort>
 80071e4:	4b04      	ldr	r3, [pc, #16]	; (80071f8 <__assert_func+0x38>)
 80071e6:	461c      	mov	r4, r3
 80071e8:	e7f3      	b.n	80071d2 <__assert_func+0x12>
 80071ea:	bf00      	nop
 80071ec:	20000014 	.word	0x20000014
 80071f0:	080094b5 	.word	0x080094b5
 80071f4:	080094c2 	.word	0x080094c2
 80071f8:	080094f0 	.word	0x080094f0

080071fc <fiprintf>:
 80071fc:	b40e      	push	{r1, r2, r3}
 80071fe:	b503      	push	{r0, r1, lr}
 8007200:	4601      	mov	r1, r0
 8007202:	ab03      	add	r3, sp, #12
 8007204:	4805      	ldr	r0, [pc, #20]	; (800721c <fiprintf+0x20>)
 8007206:	f853 2b04 	ldr.w	r2, [r3], #4
 800720a:	6800      	ldr	r0, [r0, #0]
 800720c:	9301      	str	r3, [sp, #4]
 800720e:	f000 f87d 	bl	800730c <_vfiprintf_r>
 8007212:	b002      	add	sp, #8
 8007214:	f85d eb04 	ldr.w	lr, [sp], #4
 8007218:	b003      	add	sp, #12
 800721a:	4770      	bx	lr
 800721c:	20000014 	.word	0x20000014

08007220 <memmove>:
 8007220:	4288      	cmp	r0, r1
 8007222:	b510      	push	{r4, lr}
 8007224:	eb01 0402 	add.w	r4, r1, r2
 8007228:	d902      	bls.n	8007230 <memmove+0x10>
 800722a:	4284      	cmp	r4, r0
 800722c:	4623      	mov	r3, r4
 800722e:	d807      	bhi.n	8007240 <memmove+0x20>
 8007230:	1e43      	subs	r3, r0, #1
 8007232:	42a1      	cmp	r1, r4
 8007234:	d008      	beq.n	8007248 <memmove+0x28>
 8007236:	f811 2b01 	ldrb.w	r2, [r1], #1
 800723a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800723e:	e7f8      	b.n	8007232 <memmove+0x12>
 8007240:	4402      	add	r2, r0
 8007242:	4601      	mov	r1, r0
 8007244:	428a      	cmp	r2, r1
 8007246:	d100      	bne.n	800724a <memmove+0x2a>
 8007248:	bd10      	pop	{r4, pc}
 800724a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800724e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007252:	e7f7      	b.n	8007244 <memmove+0x24>

08007254 <__malloc_lock>:
 8007254:	4801      	ldr	r0, [pc, #4]	; (800725c <__malloc_lock+0x8>)
 8007256:	f000 bc09 	b.w	8007a6c <__retarget_lock_acquire_recursive>
 800725a:	bf00      	nop
 800725c:	200006e8 	.word	0x200006e8

08007260 <__malloc_unlock>:
 8007260:	4801      	ldr	r0, [pc, #4]	; (8007268 <__malloc_unlock+0x8>)
 8007262:	f000 bc04 	b.w	8007a6e <__retarget_lock_release_recursive>
 8007266:	bf00      	nop
 8007268:	200006e8 	.word	0x200006e8

0800726c <_realloc_r>:
 800726c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800726e:	4607      	mov	r7, r0
 8007270:	4614      	mov	r4, r2
 8007272:	460e      	mov	r6, r1
 8007274:	b921      	cbnz	r1, 8007280 <_realloc_r+0x14>
 8007276:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800727a:	4611      	mov	r1, r2
 800727c:	f7ff bdb2 	b.w	8006de4 <_malloc_r>
 8007280:	b922      	cbnz	r2, 800728c <_realloc_r+0x20>
 8007282:	f7ff fd5f 	bl	8006d44 <_free_r>
 8007286:	4625      	mov	r5, r4
 8007288:	4628      	mov	r0, r5
 800728a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800728c:	f000 fc54 	bl	8007b38 <_malloc_usable_size_r>
 8007290:	42a0      	cmp	r0, r4
 8007292:	d20f      	bcs.n	80072b4 <_realloc_r+0x48>
 8007294:	4621      	mov	r1, r4
 8007296:	4638      	mov	r0, r7
 8007298:	f7ff fda4 	bl	8006de4 <_malloc_r>
 800729c:	4605      	mov	r5, r0
 800729e:	2800      	cmp	r0, #0
 80072a0:	d0f2      	beq.n	8007288 <_realloc_r+0x1c>
 80072a2:	4631      	mov	r1, r6
 80072a4:	4622      	mov	r2, r4
 80072a6:	f7ff f875 	bl	8006394 <memcpy>
 80072aa:	4631      	mov	r1, r6
 80072ac:	4638      	mov	r0, r7
 80072ae:	f7ff fd49 	bl	8006d44 <_free_r>
 80072b2:	e7e9      	b.n	8007288 <_realloc_r+0x1c>
 80072b4:	4635      	mov	r5, r6
 80072b6:	e7e7      	b.n	8007288 <_realloc_r+0x1c>

080072b8 <__sfputc_r>:
 80072b8:	6893      	ldr	r3, [r2, #8]
 80072ba:	3b01      	subs	r3, #1
 80072bc:	2b00      	cmp	r3, #0
 80072be:	b410      	push	{r4}
 80072c0:	6093      	str	r3, [r2, #8]
 80072c2:	da08      	bge.n	80072d6 <__sfputc_r+0x1e>
 80072c4:	6994      	ldr	r4, [r2, #24]
 80072c6:	42a3      	cmp	r3, r4
 80072c8:	db01      	blt.n	80072ce <__sfputc_r+0x16>
 80072ca:	290a      	cmp	r1, #10
 80072cc:	d103      	bne.n	80072d6 <__sfputc_r+0x1e>
 80072ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80072d2:	f000 b94b 	b.w	800756c <__swbuf_r>
 80072d6:	6813      	ldr	r3, [r2, #0]
 80072d8:	1c58      	adds	r0, r3, #1
 80072da:	6010      	str	r0, [r2, #0]
 80072dc:	7019      	strb	r1, [r3, #0]
 80072de:	4608      	mov	r0, r1
 80072e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80072e4:	4770      	bx	lr

080072e6 <__sfputs_r>:
 80072e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072e8:	4606      	mov	r6, r0
 80072ea:	460f      	mov	r7, r1
 80072ec:	4614      	mov	r4, r2
 80072ee:	18d5      	adds	r5, r2, r3
 80072f0:	42ac      	cmp	r4, r5
 80072f2:	d101      	bne.n	80072f8 <__sfputs_r+0x12>
 80072f4:	2000      	movs	r0, #0
 80072f6:	e007      	b.n	8007308 <__sfputs_r+0x22>
 80072f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072fc:	463a      	mov	r2, r7
 80072fe:	4630      	mov	r0, r6
 8007300:	f7ff ffda 	bl	80072b8 <__sfputc_r>
 8007304:	1c43      	adds	r3, r0, #1
 8007306:	d1f3      	bne.n	80072f0 <__sfputs_r+0xa>
 8007308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800730c <_vfiprintf_r>:
 800730c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007310:	460d      	mov	r5, r1
 8007312:	b09d      	sub	sp, #116	; 0x74
 8007314:	4614      	mov	r4, r2
 8007316:	4698      	mov	r8, r3
 8007318:	4606      	mov	r6, r0
 800731a:	b118      	cbz	r0, 8007324 <_vfiprintf_r+0x18>
 800731c:	6983      	ldr	r3, [r0, #24]
 800731e:	b90b      	cbnz	r3, 8007324 <_vfiprintf_r+0x18>
 8007320:	f000 fb06 	bl	8007930 <__sinit>
 8007324:	4b89      	ldr	r3, [pc, #548]	; (800754c <_vfiprintf_r+0x240>)
 8007326:	429d      	cmp	r5, r3
 8007328:	d11b      	bne.n	8007362 <_vfiprintf_r+0x56>
 800732a:	6875      	ldr	r5, [r6, #4]
 800732c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800732e:	07d9      	lsls	r1, r3, #31
 8007330:	d405      	bmi.n	800733e <_vfiprintf_r+0x32>
 8007332:	89ab      	ldrh	r3, [r5, #12]
 8007334:	059a      	lsls	r2, r3, #22
 8007336:	d402      	bmi.n	800733e <_vfiprintf_r+0x32>
 8007338:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800733a:	f000 fb97 	bl	8007a6c <__retarget_lock_acquire_recursive>
 800733e:	89ab      	ldrh	r3, [r5, #12]
 8007340:	071b      	lsls	r3, r3, #28
 8007342:	d501      	bpl.n	8007348 <_vfiprintf_r+0x3c>
 8007344:	692b      	ldr	r3, [r5, #16]
 8007346:	b9eb      	cbnz	r3, 8007384 <_vfiprintf_r+0x78>
 8007348:	4629      	mov	r1, r5
 800734a:	4630      	mov	r0, r6
 800734c:	f000 f960 	bl	8007610 <__swsetup_r>
 8007350:	b1c0      	cbz	r0, 8007384 <_vfiprintf_r+0x78>
 8007352:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007354:	07dc      	lsls	r4, r3, #31
 8007356:	d50e      	bpl.n	8007376 <_vfiprintf_r+0x6a>
 8007358:	f04f 30ff 	mov.w	r0, #4294967295
 800735c:	b01d      	add	sp, #116	; 0x74
 800735e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007362:	4b7b      	ldr	r3, [pc, #492]	; (8007550 <_vfiprintf_r+0x244>)
 8007364:	429d      	cmp	r5, r3
 8007366:	d101      	bne.n	800736c <_vfiprintf_r+0x60>
 8007368:	68b5      	ldr	r5, [r6, #8]
 800736a:	e7df      	b.n	800732c <_vfiprintf_r+0x20>
 800736c:	4b79      	ldr	r3, [pc, #484]	; (8007554 <_vfiprintf_r+0x248>)
 800736e:	429d      	cmp	r5, r3
 8007370:	bf08      	it	eq
 8007372:	68f5      	ldreq	r5, [r6, #12]
 8007374:	e7da      	b.n	800732c <_vfiprintf_r+0x20>
 8007376:	89ab      	ldrh	r3, [r5, #12]
 8007378:	0598      	lsls	r0, r3, #22
 800737a:	d4ed      	bmi.n	8007358 <_vfiprintf_r+0x4c>
 800737c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800737e:	f000 fb76 	bl	8007a6e <__retarget_lock_release_recursive>
 8007382:	e7e9      	b.n	8007358 <_vfiprintf_r+0x4c>
 8007384:	2300      	movs	r3, #0
 8007386:	9309      	str	r3, [sp, #36]	; 0x24
 8007388:	2320      	movs	r3, #32
 800738a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800738e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007392:	2330      	movs	r3, #48	; 0x30
 8007394:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007558 <_vfiprintf_r+0x24c>
 8007398:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800739c:	f04f 0901 	mov.w	r9, #1
 80073a0:	4623      	mov	r3, r4
 80073a2:	469a      	mov	sl, r3
 80073a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80073a8:	b10a      	cbz	r2, 80073ae <_vfiprintf_r+0xa2>
 80073aa:	2a25      	cmp	r2, #37	; 0x25
 80073ac:	d1f9      	bne.n	80073a2 <_vfiprintf_r+0x96>
 80073ae:	ebba 0b04 	subs.w	fp, sl, r4
 80073b2:	d00b      	beq.n	80073cc <_vfiprintf_r+0xc0>
 80073b4:	465b      	mov	r3, fp
 80073b6:	4622      	mov	r2, r4
 80073b8:	4629      	mov	r1, r5
 80073ba:	4630      	mov	r0, r6
 80073bc:	f7ff ff93 	bl	80072e6 <__sfputs_r>
 80073c0:	3001      	adds	r0, #1
 80073c2:	f000 80aa 	beq.w	800751a <_vfiprintf_r+0x20e>
 80073c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80073c8:	445a      	add	r2, fp
 80073ca:	9209      	str	r2, [sp, #36]	; 0x24
 80073cc:	f89a 3000 	ldrb.w	r3, [sl]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	f000 80a2 	beq.w	800751a <_vfiprintf_r+0x20e>
 80073d6:	2300      	movs	r3, #0
 80073d8:	f04f 32ff 	mov.w	r2, #4294967295
 80073dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073e0:	f10a 0a01 	add.w	sl, sl, #1
 80073e4:	9304      	str	r3, [sp, #16]
 80073e6:	9307      	str	r3, [sp, #28]
 80073e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80073ec:	931a      	str	r3, [sp, #104]	; 0x68
 80073ee:	4654      	mov	r4, sl
 80073f0:	2205      	movs	r2, #5
 80073f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073f6:	4858      	ldr	r0, [pc, #352]	; (8007558 <_vfiprintf_r+0x24c>)
 80073f8:	f7f8 fef2 	bl	80001e0 <memchr>
 80073fc:	9a04      	ldr	r2, [sp, #16]
 80073fe:	b9d8      	cbnz	r0, 8007438 <_vfiprintf_r+0x12c>
 8007400:	06d1      	lsls	r1, r2, #27
 8007402:	bf44      	itt	mi
 8007404:	2320      	movmi	r3, #32
 8007406:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800740a:	0713      	lsls	r3, r2, #28
 800740c:	bf44      	itt	mi
 800740e:	232b      	movmi	r3, #43	; 0x2b
 8007410:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007414:	f89a 3000 	ldrb.w	r3, [sl]
 8007418:	2b2a      	cmp	r3, #42	; 0x2a
 800741a:	d015      	beq.n	8007448 <_vfiprintf_r+0x13c>
 800741c:	9a07      	ldr	r2, [sp, #28]
 800741e:	4654      	mov	r4, sl
 8007420:	2000      	movs	r0, #0
 8007422:	f04f 0c0a 	mov.w	ip, #10
 8007426:	4621      	mov	r1, r4
 8007428:	f811 3b01 	ldrb.w	r3, [r1], #1
 800742c:	3b30      	subs	r3, #48	; 0x30
 800742e:	2b09      	cmp	r3, #9
 8007430:	d94e      	bls.n	80074d0 <_vfiprintf_r+0x1c4>
 8007432:	b1b0      	cbz	r0, 8007462 <_vfiprintf_r+0x156>
 8007434:	9207      	str	r2, [sp, #28]
 8007436:	e014      	b.n	8007462 <_vfiprintf_r+0x156>
 8007438:	eba0 0308 	sub.w	r3, r0, r8
 800743c:	fa09 f303 	lsl.w	r3, r9, r3
 8007440:	4313      	orrs	r3, r2
 8007442:	9304      	str	r3, [sp, #16]
 8007444:	46a2      	mov	sl, r4
 8007446:	e7d2      	b.n	80073ee <_vfiprintf_r+0xe2>
 8007448:	9b03      	ldr	r3, [sp, #12]
 800744a:	1d19      	adds	r1, r3, #4
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	9103      	str	r1, [sp, #12]
 8007450:	2b00      	cmp	r3, #0
 8007452:	bfbb      	ittet	lt
 8007454:	425b      	neglt	r3, r3
 8007456:	f042 0202 	orrlt.w	r2, r2, #2
 800745a:	9307      	strge	r3, [sp, #28]
 800745c:	9307      	strlt	r3, [sp, #28]
 800745e:	bfb8      	it	lt
 8007460:	9204      	strlt	r2, [sp, #16]
 8007462:	7823      	ldrb	r3, [r4, #0]
 8007464:	2b2e      	cmp	r3, #46	; 0x2e
 8007466:	d10c      	bne.n	8007482 <_vfiprintf_r+0x176>
 8007468:	7863      	ldrb	r3, [r4, #1]
 800746a:	2b2a      	cmp	r3, #42	; 0x2a
 800746c:	d135      	bne.n	80074da <_vfiprintf_r+0x1ce>
 800746e:	9b03      	ldr	r3, [sp, #12]
 8007470:	1d1a      	adds	r2, r3, #4
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	9203      	str	r2, [sp, #12]
 8007476:	2b00      	cmp	r3, #0
 8007478:	bfb8      	it	lt
 800747a:	f04f 33ff 	movlt.w	r3, #4294967295
 800747e:	3402      	adds	r4, #2
 8007480:	9305      	str	r3, [sp, #20]
 8007482:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007568 <_vfiprintf_r+0x25c>
 8007486:	7821      	ldrb	r1, [r4, #0]
 8007488:	2203      	movs	r2, #3
 800748a:	4650      	mov	r0, sl
 800748c:	f7f8 fea8 	bl	80001e0 <memchr>
 8007490:	b140      	cbz	r0, 80074a4 <_vfiprintf_r+0x198>
 8007492:	2340      	movs	r3, #64	; 0x40
 8007494:	eba0 000a 	sub.w	r0, r0, sl
 8007498:	fa03 f000 	lsl.w	r0, r3, r0
 800749c:	9b04      	ldr	r3, [sp, #16]
 800749e:	4303      	orrs	r3, r0
 80074a0:	3401      	adds	r4, #1
 80074a2:	9304      	str	r3, [sp, #16]
 80074a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074a8:	482c      	ldr	r0, [pc, #176]	; (800755c <_vfiprintf_r+0x250>)
 80074aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80074ae:	2206      	movs	r2, #6
 80074b0:	f7f8 fe96 	bl	80001e0 <memchr>
 80074b4:	2800      	cmp	r0, #0
 80074b6:	d03f      	beq.n	8007538 <_vfiprintf_r+0x22c>
 80074b8:	4b29      	ldr	r3, [pc, #164]	; (8007560 <_vfiprintf_r+0x254>)
 80074ba:	bb1b      	cbnz	r3, 8007504 <_vfiprintf_r+0x1f8>
 80074bc:	9b03      	ldr	r3, [sp, #12]
 80074be:	3307      	adds	r3, #7
 80074c0:	f023 0307 	bic.w	r3, r3, #7
 80074c4:	3308      	adds	r3, #8
 80074c6:	9303      	str	r3, [sp, #12]
 80074c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074ca:	443b      	add	r3, r7
 80074cc:	9309      	str	r3, [sp, #36]	; 0x24
 80074ce:	e767      	b.n	80073a0 <_vfiprintf_r+0x94>
 80074d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80074d4:	460c      	mov	r4, r1
 80074d6:	2001      	movs	r0, #1
 80074d8:	e7a5      	b.n	8007426 <_vfiprintf_r+0x11a>
 80074da:	2300      	movs	r3, #0
 80074dc:	3401      	adds	r4, #1
 80074de:	9305      	str	r3, [sp, #20]
 80074e0:	4619      	mov	r1, r3
 80074e2:	f04f 0c0a 	mov.w	ip, #10
 80074e6:	4620      	mov	r0, r4
 80074e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074ec:	3a30      	subs	r2, #48	; 0x30
 80074ee:	2a09      	cmp	r2, #9
 80074f0:	d903      	bls.n	80074fa <_vfiprintf_r+0x1ee>
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d0c5      	beq.n	8007482 <_vfiprintf_r+0x176>
 80074f6:	9105      	str	r1, [sp, #20]
 80074f8:	e7c3      	b.n	8007482 <_vfiprintf_r+0x176>
 80074fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80074fe:	4604      	mov	r4, r0
 8007500:	2301      	movs	r3, #1
 8007502:	e7f0      	b.n	80074e6 <_vfiprintf_r+0x1da>
 8007504:	ab03      	add	r3, sp, #12
 8007506:	9300      	str	r3, [sp, #0]
 8007508:	462a      	mov	r2, r5
 800750a:	4b16      	ldr	r3, [pc, #88]	; (8007564 <_vfiprintf_r+0x258>)
 800750c:	a904      	add	r1, sp, #16
 800750e:	4630      	mov	r0, r6
 8007510:	f7fc f884 	bl	800361c <_printf_float>
 8007514:	4607      	mov	r7, r0
 8007516:	1c78      	adds	r0, r7, #1
 8007518:	d1d6      	bne.n	80074c8 <_vfiprintf_r+0x1bc>
 800751a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800751c:	07d9      	lsls	r1, r3, #31
 800751e:	d405      	bmi.n	800752c <_vfiprintf_r+0x220>
 8007520:	89ab      	ldrh	r3, [r5, #12]
 8007522:	059a      	lsls	r2, r3, #22
 8007524:	d402      	bmi.n	800752c <_vfiprintf_r+0x220>
 8007526:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007528:	f000 faa1 	bl	8007a6e <__retarget_lock_release_recursive>
 800752c:	89ab      	ldrh	r3, [r5, #12]
 800752e:	065b      	lsls	r3, r3, #25
 8007530:	f53f af12 	bmi.w	8007358 <_vfiprintf_r+0x4c>
 8007534:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007536:	e711      	b.n	800735c <_vfiprintf_r+0x50>
 8007538:	ab03      	add	r3, sp, #12
 800753a:	9300      	str	r3, [sp, #0]
 800753c:	462a      	mov	r2, r5
 800753e:	4b09      	ldr	r3, [pc, #36]	; (8007564 <_vfiprintf_r+0x258>)
 8007540:	a904      	add	r1, sp, #16
 8007542:	4630      	mov	r0, r6
 8007544:	f7fc fb0e 	bl	8003b64 <_printf_i>
 8007548:	e7e4      	b.n	8007514 <_vfiprintf_r+0x208>
 800754a:	bf00      	nop
 800754c:	08009514 	.word	0x08009514
 8007550:	08009534 	.word	0x08009534
 8007554:	080094f4 	.word	0x080094f4
 8007558:	080094a4 	.word	0x080094a4
 800755c:	080094ae 	.word	0x080094ae
 8007560:	0800361d 	.word	0x0800361d
 8007564:	080072e7 	.word	0x080072e7
 8007568:	080094aa 	.word	0x080094aa

0800756c <__swbuf_r>:
 800756c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800756e:	460e      	mov	r6, r1
 8007570:	4614      	mov	r4, r2
 8007572:	4605      	mov	r5, r0
 8007574:	b118      	cbz	r0, 800757e <__swbuf_r+0x12>
 8007576:	6983      	ldr	r3, [r0, #24]
 8007578:	b90b      	cbnz	r3, 800757e <__swbuf_r+0x12>
 800757a:	f000 f9d9 	bl	8007930 <__sinit>
 800757e:	4b21      	ldr	r3, [pc, #132]	; (8007604 <__swbuf_r+0x98>)
 8007580:	429c      	cmp	r4, r3
 8007582:	d12b      	bne.n	80075dc <__swbuf_r+0x70>
 8007584:	686c      	ldr	r4, [r5, #4]
 8007586:	69a3      	ldr	r3, [r4, #24]
 8007588:	60a3      	str	r3, [r4, #8]
 800758a:	89a3      	ldrh	r3, [r4, #12]
 800758c:	071a      	lsls	r2, r3, #28
 800758e:	d52f      	bpl.n	80075f0 <__swbuf_r+0x84>
 8007590:	6923      	ldr	r3, [r4, #16]
 8007592:	b36b      	cbz	r3, 80075f0 <__swbuf_r+0x84>
 8007594:	6923      	ldr	r3, [r4, #16]
 8007596:	6820      	ldr	r0, [r4, #0]
 8007598:	1ac0      	subs	r0, r0, r3
 800759a:	6963      	ldr	r3, [r4, #20]
 800759c:	b2f6      	uxtb	r6, r6
 800759e:	4283      	cmp	r3, r0
 80075a0:	4637      	mov	r7, r6
 80075a2:	dc04      	bgt.n	80075ae <__swbuf_r+0x42>
 80075a4:	4621      	mov	r1, r4
 80075a6:	4628      	mov	r0, r5
 80075a8:	f000 f92e 	bl	8007808 <_fflush_r>
 80075ac:	bb30      	cbnz	r0, 80075fc <__swbuf_r+0x90>
 80075ae:	68a3      	ldr	r3, [r4, #8]
 80075b0:	3b01      	subs	r3, #1
 80075b2:	60a3      	str	r3, [r4, #8]
 80075b4:	6823      	ldr	r3, [r4, #0]
 80075b6:	1c5a      	adds	r2, r3, #1
 80075b8:	6022      	str	r2, [r4, #0]
 80075ba:	701e      	strb	r6, [r3, #0]
 80075bc:	6963      	ldr	r3, [r4, #20]
 80075be:	3001      	adds	r0, #1
 80075c0:	4283      	cmp	r3, r0
 80075c2:	d004      	beq.n	80075ce <__swbuf_r+0x62>
 80075c4:	89a3      	ldrh	r3, [r4, #12]
 80075c6:	07db      	lsls	r3, r3, #31
 80075c8:	d506      	bpl.n	80075d8 <__swbuf_r+0x6c>
 80075ca:	2e0a      	cmp	r6, #10
 80075cc:	d104      	bne.n	80075d8 <__swbuf_r+0x6c>
 80075ce:	4621      	mov	r1, r4
 80075d0:	4628      	mov	r0, r5
 80075d2:	f000 f919 	bl	8007808 <_fflush_r>
 80075d6:	b988      	cbnz	r0, 80075fc <__swbuf_r+0x90>
 80075d8:	4638      	mov	r0, r7
 80075da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075dc:	4b0a      	ldr	r3, [pc, #40]	; (8007608 <__swbuf_r+0x9c>)
 80075de:	429c      	cmp	r4, r3
 80075e0:	d101      	bne.n	80075e6 <__swbuf_r+0x7a>
 80075e2:	68ac      	ldr	r4, [r5, #8]
 80075e4:	e7cf      	b.n	8007586 <__swbuf_r+0x1a>
 80075e6:	4b09      	ldr	r3, [pc, #36]	; (800760c <__swbuf_r+0xa0>)
 80075e8:	429c      	cmp	r4, r3
 80075ea:	bf08      	it	eq
 80075ec:	68ec      	ldreq	r4, [r5, #12]
 80075ee:	e7ca      	b.n	8007586 <__swbuf_r+0x1a>
 80075f0:	4621      	mov	r1, r4
 80075f2:	4628      	mov	r0, r5
 80075f4:	f000 f80c 	bl	8007610 <__swsetup_r>
 80075f8:	2800      	cmp	r0, #0
 80075fa:	d0cb      	beq.n	8007594 <__swbuf_r+0x28>
 80075fc:	f04f 37ff 	mov.w	r7, #4294967295
 8007600:	e7ea      	b.n	80075d8 <__swbuf_r+0x6c>
 8007602:	bf00      	nop
 8007604:	08009514 	.word	0x08009514
 8007608:	08009534 	.word	0x08009534
 800760c:	080094f4 	.word	0x080094f4

08007610 <__swsetup_r>:
 8007610:	4b32      	ldr	r3, [pc, #200]	; (80076dc <__swsetup_r+0xcc>)
 8007612:	b570      	push	{r4, r5, r6, lr}
 8007614:	681d      	ldr	r5, [r3, #0]
 8007616:	4606      	mov	r6, r0
 8007618:	460c      	mov	r4, r1
 800761a:	b125      	cbz	r5, 8007626 <__swsetup_r+0x16>
 800761c:	69ab      	ldr	r3, [r5, #24]
 800761e:	b913      	cbnz	r3, 8007626 <__swsetup_r+0x16>
 8007620:	4628      	mov	r0, r5
 8007622:	f000 f985 	bl	8007930 <__sinit>
 8007626:	4b2e      	ldr	r3, [pc, #184]	; (80076e0 <__swsetup_r+0xd0>)
 8007628:	429c      	cmp	r4, r3
 800762a:	d10f      	bne.n	800764c <__swsetup_r+0x3c>
 800762c:	686c      	ldr	r4, [r5, #4]
 800762e:	89a3      	ldrh	r3, [r4, #12]
 8007630:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007634:	0719      	lsls	r1, r3, #28
 8007636:	d42c      	bmi.n	8007692 <__swsetup_r+0x82>
 8007638:	06dd      	lsls	r5, r3, #27
 800763a:	d411      	bmi.n	8007660 <__swsetup_r+0x50>
 800763c:	2309      	movs	r3, #9
 800763e:	6033      	str	r3, [r6, #0]
 8007640:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007644:	81a3      	strh	r3, [r4, #12]
 8007646:	f04f 30ff 	mov.w	r0, #4294967295
 800764a:	e03e      	b.n	80076ca <__swsetup_r+0xba>
 800764c:	4b25      	ldr	r3, [pc, #148]	; (80076e4 <__swsetup_r+0xd4>)
 800764e:	429c      	cmp	r4, r3
 8007650:	d101      	bne.n	8007656 <__swsetup_r+0x46>
 8007652:	68ac      	ldr	r4, [r5, #8]
 8007654:	e7eb      	b.n	800762e <__swsetup_r+0x1e>
 8007656:	4b24      	ldr	r3, [pc, #144]	; (80076e8 <__swsetup_r+0xd8>)
 8007658:	429c      	cmp	r4, r3
 800765a:	bf08      	it	eq
 800765c:	68ec      	ldreq	r4, [r5, #12]
 800765e:	e7e6      	b.n	800762e <__swsetup_r+0x1e>
 8007660:	0758      	lsls	r0, r3, #29
 8007662:	d512      	bpl.n	800768a <__swsetup_r+0x7a>
 8007664:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007666:	b141      	cbz	r1, 800767a <__swsetup_r+0x6a>
 8007668:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800766c:	4299      	cmp	r1, r3
 800766e:	d002      	beq.n	8007676 <__swsetup_r+0x66>
 8007670:	4630      	mov	r0, r6
 8007672:	f7ff fb67 	bl	8006d44 <_free_r>
 8007676:	2300      	movs	r3, #0
 8007678:	6363      	str	r3, [r4, #52]	; 0x34
 800767a:	89a3      	ldrh	r3, [r4, #12]
 800767c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007680:	81a3      	strh	r3, [r4, #12]
 8007682:	2300      	movs	r3, #0
 8007684:	6063      	str	r3, [r4, #4]
 8007686:	6923      	ldr	r3, [r4, #16]
 8007688:	6023      	str	r3, [r4, #0]
 800768a:	89a3      	ldrh	r3, [r4, #12]
 800768c:	f043 0308 	orr.w	r3, r3, #8
 8007690:	81a3      	strh	r3, [r4, #12]
 8007692:	6923      	ldr	r3, [r4, #16]
 8007694:	b94b      	cbnz	r3, 80076aa <__swsetup_r+0x9a>
 8007696:	89a3      	ldrh	r3, [r4, #12]
 8007698:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800769c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076a0:	d003      	beq.n	80076aa <__swsetup_r+0x9a>
 80076a2:	4621      	mov	r1, r4
 80076a4:	4630      	mov	r0, r6
 80076a6:	f000 fa07 	bl	8007ab8 <__smakebuf_r>
 80076aa:	89a0      	ldrh	r0, [r4, #12]
 80076ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80076b0:	f010 0301 	ands.w	r3, r0, #1
 80076b4:	d00a      	beq.n	80076cc <__swsetup_r+0xbc>
 80076b6:	2300      	movs	r3, #0
 80076b8:	60a3      	str	r3, [r4, #8]
 80076ba:	6963      	ldr	r3, [r4, #20]
 80076bc:	425b      	negs	r3, r3
 80076be:	61a3      	str	r3, [r4, #24]
 80076c0:	6923      	ldr	r3, [r4, #16]
 80076c2:	b943      	cbnz	r3, 80076d6 <__swsetup_r+0xc6>
 80076c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80076c8:	d1ba      	bne.n	8007640 <__swsetup_r+0x30>
 80076ca:	bd70      	pop	{r4, r5, r6, pc}
 80076cc:	0781      	lsls	r1, r0, #30
 80076ce:	bf58      	it	pl
 80076d0:	6963      	ldrpl	r3, [r4, #20]
 80076d2:	60a3      	str	r3, [r4, #8]
 80076d4:	e7f4      	b.n	80076c0 <__swsetup_r+0xb0>
 80076d6:	2000      	movs	r0, #0
 80076d8:	e7f7      	b.n	80076ca <__swsetup_r+0xba>
 80076da:	bf00      	nop
 80076dc:	20000014 	.word	0x20000014
 80076e0:	08009514 	.word	0x08009514
 80076e4:	08009534 	.word	0x08009534
 80076e8:	080094f4 	.word	0x080094f4

080076ec <abort>:
 80076ec:	b508      	push	{r3, lr}
 80076ee:	2006      	movs	r0, #6
 80076f0:	f000 fa52 	bl	8007b98 <raise>
 80076f4:	2001      	movs	r0, #1
 80076f6:	f7fa f925 	bl	8001944 <_exit>
	...

080076fc <__sflush_r>:
 80076fc:	898a      	ldrh	r2, [r1, #12]
 80076fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007702:	4605      	mov	r5, r0
 8007704:	0710      	lsls	r0, r2, #28
 8007706:	460c      	mov	r4, r1
 8007708:	d458      	bmi.n	80077bc <__sflush_r+0xc0>
 800770a:	684b      	ldr	r3, [r1, #4]
 800770c:	2b00      	cmp	r3, #0
 800770e:	dc05      	bgt.n	800771c <__sflush_r+0x20>
 8007710:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007712:	2b00      	cmp	r3, #0
 8007714:	dc02      	bgt.n	800771c <__sflush_r+0x20>
 8007716:	2000      	movs	r0, #0
 8007718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800771c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800771e:	2e00      	cmp	r6, #0
 8007720:	d0f9      	beq.n	8007716 <__sflush_r+0x1a>
 8007722:	2300      	movs	r3, #0
 8007724:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007728:	682f      	ldr	r7, [r5, #0]
 800772a:	602b      	str	r3, [r5, #0]
 800772c:	d032      	beq.n	8007794 <__sflush_r+0x98>
 800772e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007730:	89a3      	ldrh	r3, [r4, #12]
 8007732:	075a      	lsls	r2, r3, #29
 8007734:	d505      	bpl.n	8007742 <__sflush_r+0x46>
 8007736:	6863      	ldr	r3, [r4, #4]
 8007738:	1ac0      	subs	r0, r0, r3
 800773a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800773c:	b10b      	cbz	r3, 8007742 <__sflush_r+0x46>
 800773e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007740:	1ac0      	subs	r0, r0, r3
 8007742:	2300      	movs	r3, #0
 8007744:	4602      	mov	r2, r0
 8007746:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007748:	6a21      	ldr	r1, [r4, #32]
 800774a:	4628      	mov	r0, r5
 800774c:	47b0      	blx	r6
 800774e:	1c43      	adds	r3, r0, #1
 8007750:	89a3      	ldrh	r3, [r4, #12]
 8007752:	d106      	bne.n	8007762 <__sflush_r+0x66>
 8007754:	6829      	ldr	r1, [r5, #0]
 8007756:	291d      	cmp	r1, #29
 8007758:	d82c      	bhi.n	80077b4 <__sflush_r+0xb8>
 800775a:	4a2a      	ldr	r2, [pc, #168]	; (8007804 <__sflush_r+0x108>)
 800775c:	40ca      	lsrs	r2, r1
 800775e:	07d6      	lsls	r6, r2, #31
 8007760:	d528      	bpl.n	80077b4 <__sflush_r+0xb8>
 8007762:	2200      	movs	r2, #0
 8007764:	6062      	str	r2, [r4, #4]
 8007766:	04d9      	lsls	r1, r3, #19
 8007768:	6922      	ldr	r2, [r4, #16]
 800776a:	6022      	str	r2, [r4, #0]
 800776c:	d504      	bpl.n	8007778 <__sflush_r+0x7c>
 800776e:	1c42      	adds	r2, r0, #1
 8007770:	d101      	bne.n	8007776 <__sflush_r+0x7a>
 8007772:	682b      	ldr	r3, [r5, #0]
 8007774:	b903      	cbnz	r3, 8007778 <__sflush_r+0x7c>
 8007776:	6560      	str	r0, [r4, #84]	; 0x54
 8007778:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800777a:	602f      	str	r7, [r5, #0]
 800777c:	2900      	cmp	r1, #0
 800777e:	d0ca      	beq.n	8007716 <__sflush_r+0x1a>
 8007780:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007784:	4299      	cmp	r1, r3
 8007786:	d002      	beq.n	800778e <__sflush_r+0x92>
 8007788:	4628      	mov	r0, r5
 800778a:	f7ff fadb 	bl	8006d44 <_free_r>
 800778e:	2000      	movs	r0, #0
 8007790:	6360      	str	r0, [r4, #52]	; 0x34
 8007792:	e7c1      	b.n	8007718 <__sflush_r+0x1c>
 8007794:	6a21      	ldr	r1, [r4, #32]
 8007796:	2301      	movs	r3, #1
 8007798:	4628      	mov	r0, r5
 800779a:	47b0      	blx	r6
 800779c:	1c41      	adds	r1, r0, #1
 800779e:	d1c7      	bne.n	8007730 <__sflush_r+0x34>
 80077a0:	682b      	ldr	r3, [r5, #0]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d0c4      	beq.n	8007730 <__sflush_r+0x34>
 80077a6:	2b1d      	cmp	r3, #29
 80077a8:	d001      	beq.n	80077ae <__sflush_r+0xb2>
 80077aa:	2b16      	cmp	r3, #22
 80077ac:	d101      	bne.n	80077b2 <__sflush_r+0xb6>
 80077ae:	602f      	str	r7, [r5, #0]
 80077b0:	e7b1      	b.n	8007716 <__sflush_r+0x1a>
 80077b2:	89a3      	ldrh	r3, [r4, #12]
 80077b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077b8:	81a3      	strh	r3, [r4, #12]
 80077ba:	e7ad      	b.n	8007718 <__sflush_r+0x1c>
 80077bc:	690f      	ldr	r7, [r1, #16]
 80077be:	2f00      	cmp	r7, #0
 80077c0:	d0a9      	beq.n	8007716 <__sflush_r+0x1a>
 80077c2:	0793      	lsls	r3, r2, #30
 80077c4:	680e      	ldr	r6, [r1, #0]
 80077c6:	bf08      	it	eq
 80077c8:	694b      	ldreq	r3, [r1, #20]
 80077ca:	600f      	str	r7, [r1, #0]
 80077cc:	bf18      	it	ne
 80077ce:	2300      	movne	r3, #0
 80077d0:	eba6 0807 	sub.w	r8, r6, r7
 80077d4:	608b      	str	r3, [r1, #8]
 80077d6:	f1b8 0f00 	cmp.w	r8, #0
 80077da:	dd9c      	ble.n	8007716 <__sflush_r+0x1a>
 80077dc:	6a21      	ldr	r1, [r4, #32]
 80077de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80077e0:	4643      	mov	r3, r8
 80077e2:	463a      	mov	r2, r7
 80077e4:	4628      	mov	r0, r5
 80077e6:	47b0      	blx	r6
 80077e8:	2800      	cmp	r0, #0
 80077ea:	dc06      	bgt.n	80077fa <__sflush_r+0xfe>
 80077ec:	89a3      	ldrh	r3, [r4, #12]
 80077ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077f2:	81a3      	strh	r3, [r4, #12]
 80077f4:	f04f 30ff 	mov.w	r0, #4294967295
 80077f8:	e78e      	b.n	8007718 <__sflush_r+0x1c>
 80077fa:	4407      	add	r7, r0
 80077fc:	eba8 0800 	sub.w	r8, r8, r0
 8007800:	e7e9      	b.n	80077d6 <__sflush_r+0xda>
 8007802:	bf00      	nop
 8007804:	20400001 	.word	0x20400001

08007808 <_fflush_r>:
 8007808:	b538      	push	{r3, r4, r5, lr}
 800780a:	690b      	ldr	r3, [r1, #16]
 800780c:	4605      	mov	r5, r0
 800780e:	460c      	mov	r4, r1
 8007810:	b913      	cbnz	r3, 8007818 <_fflush_r+0x10>
 8007812:	2500      	movs	r5, #0
 8007814:	4628      	mov	r0, r5
 8007816:	bd38      	pop	{r3, r4, r5, pc}
 8007818:	b118      	cbz	r0, 8007822 <_fflush_r+0x1a>
 800781a:	6983      	ldr	r3, [r0, #24]
 800781c:	b90b      	cbnz	r3, 8007822 <_fflush_r+0x1a>
 800781e:	f000 f887 	bl	8007930 <__sinit>
 8007822:	4b14      	ldr	r3, [pc, #80]	; (8007874 <_fflush_r+0x6c>)
 8007824:	429c      	cmp	r4, r3
 8007826:	d11b      	bne.n	8007860 <_fflush_r+0x58>
 8007828:	686c      	ldr	r4, [r5, #4]
 800782a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d0ef      	beq.n	8007812 <_fflush_r+0xa>
 8007832:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007834:	07d0      	lsls	r0, r2, #31
 8007836:	d404      	bmi.n	8007842 <_fflush_r+0x3a>
 8007838:	0599      	lsls	r1, r3, #22
 800783a:	d402      	bmi.n	8007842 <_fflush_r+0x3a>
 800783c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800783e:	f000 f915 	bl	8007a6c <__retarget_lock_acquire_recursive>
 8007842:	4628      	mov	r0, r5
 8007844:	4621      	mov	r1, r4
 8007846:	f7ff ff59 	bl	80076fc <__sflush_r>
 800784a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800784c:	07da      	lsls	r2, r3, #31
 800784e:	4605      	mov	r5, r0
 8007850:	d4e0      	bmi.n	8007814 <_fflush_r+0xc>
 8007852:	89a3      	ldrh	r3, [r4, #12]
 8007854:	059b      	lsls	r3, r3, #22
 8007856:	d4dd      	bmi.n	8007814 <_fflush_r+0xc>
 8007858:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800785a:	f000 f908 	bl	8007a6e <__retarget_lock_release_recursive>
 800785e:	e7d9      	b.n	8007814 <_fflush_r+0xc>
 8007860:	4b05      	ldr	r3, [pc, #20]	; (8007878 <_fflush_r+0x70>)
 8007862:	429c      	cmp	r4, r3
 8007864:	d101      	bne.n	800786a <_fflush_r+0x62>
 8007866:	68ac      	ldr	r4, [r5, #8]
 8007868:	e7df      	b.n	800782a <_fflush_r+0x22>
 800786a:	4b04      	ldr	r3, [pc, #16]	; (800787c <_fflush_r+0x74>)
 800786c:	429c      	cmp	r4, r3
 800786e:	bf08      	it	eq
 8007870:	68ec      	ldreq	r4, [r5, #12]
 8007872:	e7da      	b.n	800782a <_fflush_r+0x22>
 8007874:	08009514 	.word	0x08009514
 8007878:	08009534 	.word	0x08009534
 800787c:	080094f4 	.word	0x080094f4

08007880 <std>:
 8007880:	2300      	movs	r3, #0
 8007882:	b510      	push	{r4, lr}
 8007884:	4604      	mov	r4, r0
 8007886:	e9c0 3300 	strd	r3, r3, [r0]
 800788a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800788e:	6083      	str	r3, [r0, #8]
 8007890:	8181      	strh	r1, [r0, #12]
 8007892:	6643      	str	r3, [r0, #100]	; 0x64
 8007894:	81c2      	strh	r2, [r0, #14]
 8007896:	6183      	str	r3, [r0, #24]
 8007898:	4619      	mov	r1, r3
 800789a:	2208      	movs	r2, #8
 800789c:	305c      	adds	r0, #92	; 0x5c
 800789e:	f7fb fe15 	bl	80034cc <memset>
 80078a2:	4b05      	ldr	r3, [pc, #20]	; (80078b8 <std+0x38>)
 80078a4:	6263      	str	r3, [r4, #36]	; 0x24
 80078a6:	4b05      	ldr	r3, [pc, #20]	; (80078bc <std+0x3c>)
 80078a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80078aa:	4b05      	ldr	r3, [pc, #20]	; (80078c0 <std+0x40>)
 80078ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80078ae:	4b05      	ldr	r3, [pc, #20]	; (80078c4 <std+0x44>)
 80078b0:	6224      	str	r4, [r4, #32]
 80078b2:	6323      	str	r3, [r4, #48]	; 0x30
 80078b4:	bd10      	pop	{r4, pc}
 80078b6:	bf00      	nop
 80078b8:	08007bd1 	.word	0x08007bd1
 80078bc:	08007bf3 	.word	0x08007bf3
 80078c0:	08007c2b 	.word	0x08007c2b
 80078c4:	08007c4f 	.word	0x08007c4f

080078c8 <_cleanup_r>:
 80078c8:	4901      	ldr	r1, [pc, #4]	; (80078d0 <_cleanup_r+0x8>)
 80078ca:	f000 b8af 	b.w	8007a2c <_fwalk_reent>
 80078ce:	bf00      	nop
 80078d0:	08007809 	.word	0x08007809

080078d4 <__sfmoreglue>:
 80078d4:	b570      	push	{r4, r5, r6, lr}
 80078d6:	1e4a      	subs	r2, r1, #1
 80078d8:	2568      	movs	r5, #104	; 0x68
 80078da:	4355      	muls	r5, r2
 80078dc:	460e      	mov	r6, r1
 80078de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80078e2:	f7ff fa7f 	bl	8006de4 <_malloc_r>
 80078e6:	4604      	mov	r4, r0
 80078e8:	b140      	cbz	r0, 80078fc <__sfmoreglue+0x28>
 80078ea:	2100      	movs	r1, #0
 80078ec:	e9c0 1600 	strd	r1, r6, [r0]
 80078f0:	300c      	adds	r0, #12
 80078f2:	60a0      	str	r0, [r4, #8]
 80078f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80078f8:	f7fb fde8 	bl	80034cc <memset>
 80078fc:	4620      	mov	r0, r4
 80078fe:	bd70      	pop	{r4, r5, r6, pc}

08007900 <__sfp_lock_acquire>:
 8007900:	4801      	ldr	r0, [pc, #4]	; (8007908 <__sfp_lock_acquire+0x8>)
 8007902:	f000 b8b3 	b.w	8007a6c <__retarget_lock_acquire_recursive>
 8007906:	bf00      	nop
 8007908:	200006ec 	.word	0x200006ec

0800790c <__sfp_lock_release>:
 800790c:	4801      	ldr	r0, [pc, #4]	; (8007914 <__sfp_lock_release+0x8>)
 800790e:	f000 b8ae 	b.w	8007a6e <__retarget_lock_release_recursive>
 8007912:	bf00      	nop
 8007914:	200006ec 	.word	0x200006ec

08007918 <__sinit_lock_acquire>:
 8007918:	4801      	ldr	r0, [pc, #4]	; (8007920 <__sinit_lock_acquire+0x8>)
 800791a:	f000 b8a7 	b.w	8007a6c <__retarget_lock_acquire_recursive>
 800791e:	bf00      	nop
 8007920:	200006e7 	.word	0x200006e7

08007924 <__sinit_lock_release>:
 8007924:	4801      	ldr	r0, [pc, #4]	; (800792c <__sinit_lock_release+0x8>)
 8007926:	f000 b8a2 	b.w	8007a6e <__retarget_lock_release_recursive>
 800792a:	bf00      	nop
 800792c:	200006e7 	.word	0x200006e7

08007930 <__sinit>:
 8007930:	b510      	push	{r4, lr}
 8007932:	4604      	mov	r4, r0
 8007934:	f7ff fff0 	bl	8007918 <__sinit_lock_acquire>
 8007938:	69a3      	ldr	r3, [r4, #24]
 800793a:	b11b      	cbz	r3, 8007944 <__sinit+0x14>
 800793c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007940:	f7ff bff0 	b.w	8007924 <__sinit_lock_release>
 8007944:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007948:	6523      	str	r3, [r4, #80]	; 0x50
 800794a:	4b13      	ldr	r3, [pc, #76]	; (8007998 <__sinit+0x68>)
 800794c:	4a13      	ldr	r2, [pc, #76]	; (800799c <__sinit+0x6c>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	62a2      	str	r2, [r4, #40]	; 0x28
 8007952:	42a3      	cmp	r3, r4
 8007954:	bf04      	itt	eq
 8007956:	2301      	moveq	r3, #1
 8007958:	61a3      	streq	r3, [r4, #24]
 800795a:	4620      	mov	r0, r4
 800795c:	f000 f820 	bl	80079a0 <__sfp>
 8007960:	6060      	str	r0, [r4, #4]
 8007962:	4620      	mov	r0, r4
 8007964:	f000 f81c 	bl	80079a0 <__sfp>
 8007968:	60a0      	str	r0, [r4, #8]
 800796a:	4620      	mov	r0, r4
 800796c:	f000 f818 	bl	80079a0 <__sfp>
 8007970:	2200      	movs	r2, #0
 8007972:	60e0      	str	r0, [r4, #12]
 8007974:	2104      	movs	r1, #4
 8007976:	6860      	ldr	r0, [r4, #4]
 8007978:	f7ff ff82 	bl	8007880 <std>
 800797c:	68a0      	ldr	r0, [r4, #8]
 800797e:	2201      	movs	r2, #1
 8007980:	2109      	movs	r1, #9
 8007982:	f7ff ff7d 	bl	8007880 <std>
 8007986:	68e0      	ldr	r0, [r4, #12]
 8007988:	2202      	movs	r2, #2
 800798a:	2112      	movs	r1, #18
 800798c:	f7ff ff78 	bl	8007880 <std>
 8007990:	2301      	movs	r3, #1
 8007992:	61a3      	str	r3, [r4, #24]
 8007994:	e7d2      	b.n	800793c <__sinit+0xc>
 8007996:	bf00      	nop
 8007998:	0800909c 	.word	0x0800909c
 800799c:	080078c9 	.word	0x080078c9

080079a0 <__sfp>:
 80079a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079a2:	4607      	mov	r7, r0
 80079a4:	f7ff ffac 	bl	8007900 <__sfp_lock_acquire>
 80079a8:	4b1e      	ldr	r3, [pc, #120]	; (8007a24 <__sfp+0x84>)
 80079aa:	681e      	ldr	r6, [r3, #0]
 80079ac:	69b3      	ldr	r3, [r6, #24]
 80079ae:	b913      	cbnz	r3, 80079b6 <__sfp+0x16>
 80079b0:	4630      	mov	r0, r6
 80079b2:	f7ff ffbd 	bl	8007930 <__sinit>
 80079b6:	3648      	adds	r6, #72	; 0x48
 80079b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80079bc:	3b01      	subs	r3, #1
 80079be:	d503      	bpl.n	80079c8 <__sfp+0x28>
 80079c0:	6833      	ldr	r3, [r6, #0]
 80079c2:	b30b      	cbz	r3, 8007a08 <__sfp+0x68>
 80079c4:	6836      	ldr	r6, [r6, #0]
 80079c6:	e7f7      	b.n	80079b8 <__sfp+0x18>
 80079c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80079cc:	b9d5      	cbnz	r5, 8007a04 <__sfp+0x64>
 80079ce:	4b16      	ldr	r3, [pc, #88]	; (8007a28 <__sfp+0x88>)
 80079d0:	60e3      	str	r3, [r4, #12]
 80079d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80079d6:	6665      	str	r5, [r4, #100]	; 0x64
 80079d8:	f000 f847 	bl	8007a6a <__retarget_lock_init_recursive>
 80079dc:	f7ff ff96 	bl	800790c <__sfp_lock_release>
 80079e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80079e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80079e8:	6025      	str	r5, [r4, #0]
 80079ea:	61a5      	str	r5, [r4, #24]
 80079ec:	2208      	movs	r2, #8
 80079ee:	4629      	mov	r1, r5
 80079f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80079f4:	f7fb fd6a 	bl	80034cc <memset>
 80079f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80079fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007a00:	4620      	mov	r0, r4
 8007a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a04:	3468      	adds	r4, #104	; 0x68
 8007a06:	e7d9      	b.n	80079bc <__sfp+0x1c>
 8007a08:	2104      	movs	r1, #4
 8007a0a:	4638      	mov	r0, r7
 8007a0c:	f7ff ff62 	bl	80078d4 <__sfmoreglue>
 8007a10:	4604      	mov	r4, r0
 8007a12:	6030      	str	r0, [r6, #0]
 8007a14:	2800      	cmp	r0, #0
 8007a16:	d1d5      	bne.n	80079c4 <__sfp+0x24>
 8007a18:	f7ff ff78 	bl	800790c <__sfp_lock_release>
 8007a1c:	230c      	movs	r3, #12
 8007a1e:	603b      	str	r3, [r7, #0]
 8007a20:	e7ee      	b.n	8007a00 <__sfp+0x60>
 8007a22:	bf00      	nop
 8007a24:	0800909c 	.word	0x0800909c
 8007a28:	ffff0001 	.word	0xffff0001

08007a2c <_fwalk_reent>:
 8007a2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a30:	4606      	mov	r6, r0
 8007a32:	4688      	mov	r8, r1
 8007a34:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007a38:	2700      	movs	r7, #0
 8007a3a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007a3e:	f1b9 0901 	subs.w	r9, r9, #1
 8007a42:	d505      	bpl.n	8007a50 <_fwalk_reent+0x24>
 8007a44:	6824      	ldr	r4, [r4, #0]
 8007a46:	2c00      	cmp	r4, #0
 8007a48:	d1f7      	bne.n	8007a3a <_fwalk_reent+0xe>
 8007a4a:	4638      	mov	r0, r7
 8007a4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a50:	89ab      	ldrh	r3, [r5, #12]
 8007a52:	2b01      	cmp	r3, #1
 8007a54:	d907      	bls.n	8007a66 <_fwalk_reent+0x3a>
 8007a56:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007a5a:	3301      	adds	r3, #1
 8007a5c:	d003      	beq.n	8007a66 <_fwalk_reent+0x3a>
 8007a5e:	4629      	mov	r1, r5
 8007a60:	4630      	mov	r0, r6
 8007a62:	47c0      	blx	r8
 8007a64:	4307      	orrs	r7, r0
 8007a66:	3568      	adds	r5, #104	; 0x68
 8007a68:	e7e9      	b.n	8007a3e <_fwalk_reent+0x12>

08007a6a <__retarget_lock_init_recursive>:
 8007a6a:	4770      	bx	lr

08007a6c <__retarget_lock_acquire_recursive>:
 8007a6c:	4770      	bx	lr

08007a6e <__retarget_lock_release_recursive>:
 8007a6e:	4770      	bx	lr

08007a70 <__swhatbuf_r>:
 8007a70:	b570      	push	{r4, r5, r6, lr}
 8007a72:	460e      	mov	r6, r1
 8007a74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a78:	2900      	cmp	r1, #0
 8007a7a:	b096      	sub	sp, #88	; 0x58
 8007a7c:	4614      	mov	r4, r2
 8007a7e:	461d      	mov	r5, r3
 8007a80:	da07      	bge.n	8007a92 <__swhatbuf_r+0x22>
 8007a82:	2300      	movs	r3, #0
 8007a84:	602b      	str	r3, [r5, #0]
 8007a86:	89b3      	ldrh	r3, [r6, #12]
 8007a88:	061a      	lsls	r2, r3, #24
 8007a8a:	d410      	bmi.n	8007aae <__swhatbuf_r+0x3e>
 8007a8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a90:	e00e      	b.n	8007ab0 <__swhatbuf_r+0x40>
 8007a92:	466a      	mov	r2, sp
 8007a94:	f000 f902 	bl	8007c9c <_fstat_r>
 8007a98:	2800      	cmp	r0, #0
 8007a9a:	dbf2      	blt.n	8007a82 <__swhatbuf_r+0x12>
 8007a9c:	9a01      	ldr	r2, [sp, #4]
 8007a9e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007aa2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007aa6:	425a      	negs	r2, r3
 8007aa8:	415a      	adcs	r2, r3
 8007aaa:	602a      	str	r2, [r5, #0]
 8007aac:	e7ee      	b.n	8007a8c <__swhatbuf_r+0x1c>
 8007aae:	2340      	movs	r3, #64	; 0x40
 8007ab0:	2000      	movs	r0, #0
 8007ab2:	6023      	str	r3, [r4, #0]
 8007ab4:	b016      	add	sp, #88	; 0x58
 8007ab6:	bd70      	pop	{r4, r5, r6, pc}

08007ab8 <__smakebuf_r>:
 8007ab8:	898b      	ldrh	r3, [r1, #12]
 8007aba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007abc:	079d      	lsls	r5, r3, #30
 8007abe:	4606      	mov	r6, r0
 8007ac0:	460c      	mov	r4, r1
 8007ac2:	d507      	bpl.n	8007ad4 <__smakebuf_r+0x1c>
 8007ac4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007ac8:	6023      	str	r3, [r4, #0]
 8007aca:	6123      	str	r3, [r4, #16]
 8007acc:	2301      	movs	r3, #1
 8007ace:	6163      	str	r3, [r4, #20]
 8007ad0:	b002      	add	sp, #8
 8007ad2:	bd70      	pop	{r4, r5, r6, pc}
 8007ad4:	ab01      	add	r3, sp, #4
 8007ad6:	466a      	mov	r2, sp
 8007ad8:	f7ff ffca 	bl	8007a70 <__swhatbuf_r>
 8007adc:	9900      	ldr	r1, [sp, #0]
 8007ade:	4605      	mov	r5, r0
 8007ae0:	4630      	mov	r0, r6
 8007ae2:	f7ff f97f 	bl	8006de4 <_malloc_r>
 8007ae6:	b948      	cbnz	r0, 8007afc <__smakebuf_r+0x44>
 8007ae8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007aec:	059a      	lsls	r2, r3, #22
 8007aee:	d4ef      	bmi.n	8007ad0 <__smakebuf_r+0x18>
 8007af0:	f023 0303 	bic.w	r3, r3, #3
 8007af4:	f043 0302 	orr.w	r3, r3, #2
 8007af8:	81a3      	strh	r3, [r4, #12]
 8007afa:	e7e3      	b.n	8007ac4 <__smakebuf_r+0xc>
 8007afc:	4b0d      	ldr	r3, [pc, #52]	; (8007b34 <__smakebuf_r+0x7c>)
 8007afe:	62b3      	str	r3, [r6, #40]	; 0x28
 8007b00:	89a3      	ldrh	r3, [r4, #12]
 8007b02:	6020      	str	r0, [r4, #0]
 8007b04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b08:	81a3      	strh	r3, [r4, #12]
 8007b0a:	9b00      	ldr	r3, [sp, #0]
 8007b0c:	6163      	str	r3, [r4, #20]
 8007b0e:	9b01      	ldr	r3, [sp, #4]
 8007b10:	6120      	str	r0, [r4, #16]
 8007b12:	b15b      	cbz	r3, 8007b2c <__smakebuf_r+0x74>
 8007b14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b18:	4630      	mov	r0, r6
 8007b1a:	f000 f8d1 	bl	8007cc0 <_isatty_r>
 8007b1e:	b128      	cbz	r0, 8007b2c <__smakebuf_r+0x74>
 8007b20:	89a3      	ldrh	r3, [r4, #12]
 8007b22:	f023 0303 	bic.w	r3, r3, #3
 8007b26:	f043 0301 	orr.w	r3, r3, #1
 8007b2a:	81a3      	strh	r3, [r4, #12]
 8007b2c:	89a0      	ldrh	r0, [r4, #12]
 8007b2e:	4305      	orrs	r5, r0
 8007b30:	81a5      	strh	r5, [r4, #12]
 8007b32:	e7cd      	b.n	8007ad0 <__smakebuf_r+0x18>
 8007b34:	080078c9 	.word	0x080078c9

08007b38 <_malloc_usable_size_r>:
 8007b38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b3c:	1f18      	subs	r0, r3, #4
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	bfbc      	itt	lt
 8007b42:	580b      	ldrlt	r3, [r1, r0]
 8007b44:	18c0      	addlt	r0, r0, r3
 8007b46:	4770      	bx	lr

08007b48 <_raise_r>:
 8007b48:	291f      	cmp	r1, #31
 8007b4a:	b538      	push	{r3, r4, r5, lr}
 8007b4c:	4604      	mov	r4, r0
 8007b4e:	460d      	mov	r5, r1
 8007b50:	d904      	bls.n	8007b5c <_raise_r+0x14>
 8007b52:	2316      	movs	r3, #22
 8007b54:	6003      	str	r3, [r0, #0]
 8007b56:	f04f 30ff 	mov.w	r0, #4294967295
 8007b5a:	bd38      	pop	{r3, r4, r5, pc}
 8007b5c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007b5e:	b112      	cbz	r2, 8007b66 <_raise_r+0x1e>
 8007b60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007b64:	b94b      	cbnz	r3, 8007b7a <_raise_r+0x32>
 8007b66:	4620      	mov	r0, r4
 8007b68:	f000 f830 	bl	8007bcc <_getpid_r>
 8007b6c:	462a      	mov	r2, r5
 8007b6e:	4601      	mov	r1, r0
 8007b70:	4620      	mov	r0, r4
 8007b72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b76:	f000 b817 	b.w	8007ba8 <_kill_r>
 8007b7a:	2b01      	cmp	r3, #1
 8007b7c:	d00a      	beq.n	8007b94 <_raise_r+0x4c>
 8007b7e:	1c59      	adds	r1, r3, #1
 8007b80:	d103      	bne.n	8007b8a <_raise_r+0x42>
 8007b82:	2316      	movs	r3, #22
 8007b84:	6003      	str	r3, [r0, #0]
 8007b86:	2001      	movs	r0, #1
 8007b88:	e7e7      	b.n	8007b5a <_raise_r+0x12>
 8007b8a:	2400      	movs	r4, #0
 8007b8c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007b90:	4628      	mov	r0, r5
 8007b92:	4798      	blx	r3
 8007b94:	2000      	movs	r0, #0
 8007b96:	e7e0      	b.n	8007b5a <_raise_r+0x12>

08007b98 <raise>:
 8007b98:	4b02      	ldr	r3, [pc, #8]	; (8007ba4 <raise+0xc>)
 8007b9a:	4601      	mov	r1, r0
 8007b9c:	6818      	ldr	r0, [r3, #0]
 8007b9e:	f7ff bfd3 	b.w	8007b48 <_raise_r>
 8007ba2:	bf00      	nop
 8007ba4:	20000014 	.word	0x20000014

08007ba8 <_kill_r>:
 8007ba8:	b538      	push	{r3, r4, r5, lr}
 8007baa:	4d07      	ldr	r5, [pc, #28]	; (8007bc8 <_kill_r+0x20>)
 8007bac:	2300      	movs	r3, #0
 8007bae:	4604      	mov	r4, r0
 8007bb0:	4608      	mov	r0, r1
 8007bb2:	4611      	mov	r1, r2
 8007bb4:	602b      	str	r3, [r5, #0]
 8007bb6:	f7f9 feb5 	bl	8001924 <_kill>
 8007bba:	1c43      	adds	r3, r0, #1
 8007bbc:	d102      	bne.n	8007bc4 <_kill_r+0x1c>
 8007bbe:	682b      	ldr	r3, [r5, #0]
 8007bc0:	b103      	cbz	r3, 8007bc4 <_kill_r+0x1c>
 8007bc2:	6023      	str	r3, [r4, #0]
 8007bc4:	bd38      	pop	{r3, r4, r5, pc}
 8007bc6:	bf00      	nop
 8007bc8:	200006e0 	.word	0x200006e0

08007bcc <_getpid_r>:
 8007bcc:	f7f9 bea2 	b.w	8001914 <_getpid>

08007bd0 <__sread>:
 8007bd0:	b510      	push	{r4, lr}
 8007bd2:	460c      	mov	r4, r1
 8007bd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bd8:	f000 f894 	bl	8007d04 <_read_r>
 8007bdc:	2800      	cmp	r0, #0
 8007bde:	bfab      	itete	ge
 8007be0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007be2:	89a3      	ldrhlt	r3, [r4, #12]
 8007be4:	181b      	addge	r3, r3, r0
 8007be6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007bea:	bfac      	ite	ge
 8007bec:	6563      	strge	r3, [r4, #84]	; 0x54
 8007bee:	81a3      	strhlt	r3, [r4, #12]
 8007bf0:	bd10      	pop	{r4, pc}

08007bf2 <__swrite>:
 8007bf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bf6:	461f      	mov	r7, r3
 8007bf8:	898b      	ldrh	r3, [r1, #12]
 8007bfa:	05db      	lsls	r3, r3, #23
 8007bfc:	4605      	mov	r5, r0
 8007bfe:	460c      	mov	r4, r1
 8007c00:	4616      	mov	r6, r2
 8007c02:	d505      	bpl.n	8007c10 <__swrite+0x1e>
 8007c04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c08:	2302      	movs	r3, #2
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	f000 f868 	bl	8007ce0 <_lseek_r>
 8007c10:	89a3      	ldrh	r3, [r4, #12]
 8007c12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c1a:	81a3      	strh	r3, [r4, #12]
 8007c1c:	4632      	mov	r2, r6
 8007c1e:	463b      	mov	r3, r7
 8007c20:	4628      	mov	r0, r5
 8007c22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c26:	f000 b817 	b.w	8007c58 <_write_r>

08007c2a <__sseek>:
 8007c2a:	b510      	push	{r4, lr}
 8007c2c:	460c      	mov	r4, r1
 8007c2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c32:	f000 f855 	bl	8007ce0 <_lseek_r>
 8007c36:	1c43      	adds	r3, r0, #1
 8007c38:	89a3      	ldrh	r3, [r4, #12]
 8007c3a:	bf15      	itete	ne
 8007c3c:	6560      	strne	r0, [r4, #84]	; 0x54
 8007c3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007c42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007c46:	81a3      	strheq	r3, [r4, #12]
 8007c48:	bf18      	it	ne
 8007c4a:	81a3      	strhne	r3, [r4, #12]
 8007c4c:	bd10      	pop	{r4, pc}

08007c4e <__sclose>:
 8007c4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c52:	f000 b813 	b.w	8007c7c <_close_r>
	...

08007c58 <_write_r>:
 8007c58:	b538      	push	{r3, r4, r5, lr}
 8007c5a:	4d07      	ldr	r5, [pc, #28]	; (8007c78 <_write_r+0x20>)
 8007c5c:	4604      	mov	r4, r0
 8007c5e:	4608      	mov	r0, r1
 8007c60:	4611      	mov	r1, r2
 8007c62:	2200      	movs	r2, #0
 8007c64:	602a      	str	r2, [r5, #0]
 8007c66:	461a      	mov	r2, r3
 8007c68:	f7f9 fe93 	bl	8001992 <_write>
 8007c6c:	1c43      	adds	r3, r0, #1
 8007c6e:	d102      	bne.n	8007c76 <_write_r+0x1e>
 8007c70:	682b      	ldr	r3, [r5, #0]
 8007c72:	b103      	cbz	r3, 8007c76 <_write_r+0x1e>
 8007c74:	6023      	str	r3, [r4, #0]
 8007c76:	bd38      	pop	{r3, r4, r5, pc}
 8007c78:	200006e0 	.word	0x200006e0

08007c7c <_close_r>:
 8007c7c:	b538      	push	{r3, r4, r5, lr}
 8007c7e:	4d06      	ldr	r5, [pc, #24]	; (8007c98 <_close_r+0x1c>)
 8007c80:	2300      	movs	r3, #0
 8007c82:	4604      	mov	r4, r0
 8007c84:	4608      	mov	r0, r1
 8007c86:	602b      	str	r3, [r5, #0]
 8007c88:	f7f9 fe9f 	bl	80019ca <_close>
 8007c8c:	1c43      	adds	r3, r0, #1
 8007c8e:	d102      	bne.n	8007c96 <_close_r+0x1a>
 8007c90:	682b      	ldr	r3, [r5, #0]
 8007c92:	b103      	cbz	r3, 8007c96 <_close_r+0x1a>
 8007c94:	6023      	str	r3, [r4, #0]
 8007c96:	bd38      	pop	{r3, r4, r5, pc}
 8007c98:	200006e0 	.word	0x200006e0

08007c9c <_fstat_r>:
 8007c9c:	b538      	push	{r3, r4, r5, lr}
 8007c9e:	4d07      	ldr	r5, [pc, #28]	; (8007cbc <_fstat_r+0x20>)
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	4604      	mov	r4, r0
 8007ca4:	4608      	mov	r0, r1
 8007ca6:	4611      	mov	r1, r2
 8007ca8:	602b      	str	r3, [r5, #0]
 8007caa:	f7f9 fe9a 	bl	80019e2 <_fstat>
 8007cae:	1c43      	adds	r3, r0, #1
 8007cb0:	d102      	bne.n	8007cb8 <_fstat_r+0x1c>
 8007cb2:	682b      	ldr	r3, [r5, #0]
 8007cb4:	b103      	cbz	r3, 8007cb8 <_fstat_r+0x1c>
 8007cb6:	6023      	str	r3, [r4, #0]
 8007cb8:	bd38      	pop	{r3, r4, r5, pc}
 8007cba:	bf00      	nop
 8007cbc:	200006e0 	.word	0x200006e0

08007cc0 <_isatty_r>:
 8007cc0:	b538      	push	{r3, r4, r5, lr}
 8007cc2:	4d06      	ldr	r5, [pc, #24]	; (8007cdc <_isatty_r+0x1c>)
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	4604      	mov	r4, r0
 8007cc8:	4608      	mov	r0, r1
 8007cca:	602b      	str	r3, [r5, #0]
 8007ccc:	f7f9 fe99 	bl	8001a02 <_isatty>
 8007cd0:	1c43      	adds	r3, r0, #1
 8007cd2:	d102      	bne.n	8007cda <_isatty_r+0x1a>
 8007cd4:	682b      	ldr	r3, [r5, #0]
 8007cd6:	b103      	cbz	r3, 8007cda <_isatty_r+0x1a>
 8007cd8:	6023      	str	r3, [r4, #0]
 8007cda:	bd38      	pop	{r3, r4, r5, pc}
 8007cdc:	200006e0 	.word	0x200006e0

08007ce0 <_lseek_r>:
 8007ce0:	b538      	push	{r3, r4, r5, lr}
 8007ce2:	4d07      	ldr	r5, [pc, #28]	; (8007d00 <_lseek_r+0x20>)
 8007ce4:	4604      	mov	r4, r0
 8007ce6:	4608      	mov	r0, r1
 8007ce8:	4611      	mov	r1, r2
 8007cea:	2200      	movs	r2, #0
 8007cec:	602a      	str	r2, [r5, #0]
 8007cee:	461a      	mov	r2, r3
 8007cf0:	f7f9 fe92 	bl	8001a18 <_lseek>
 8007cf4:	1c43      	adds	r3, r0, #1
 8007cf6:	d102      	bne.n	8007cfe <_lseek_r+0x1e>
 8007cf8:	682b      	ldr	r3, [r5, #0]
 8007cfa:	b103      	cbz	r3, 8007cfe <_lseek_r+0x1e>
 8007cfc:	6023      	str	r3, [r4, #0]
 8007cfe:	bd38      	pop	{r3, r4, r5, pc}
 8007d00:	200006e0 	.word	0x200006e0

08007d04 <_read_r>:
 8007d04:	b538      	push	{r3, r4, r5, lr}
 8007d06:	4d07      	ldr	r5, [pc, #28]	; (8007d24 <_read_r+0x20>)
 8007d08:	4604      	mov	r4, r0
 8007d0a:	4608      	mov	r0, r1
 8007d0c:	4611      	mov	r1, r2
 8007d0e:	2200      	movs	r2, #0
 8007d10:	602a      	str	r2, [r5, #0]
 8007d12:	461a      	mov	r2, r3
 8007d14:	f7f9 fe20 	bl	8001958 <_read>
 8007d18:	1c43      	adds	r3, r0, #1
 8007d1a:	d102      	bne.n	8007d22 <_read_r+0x1e>
 8007d1c:	682b      	ldr	r3, [r5, #0]
 8007d1e:	b103      	cbz	r3, 8007d22 <_read_r+0x1e>
 8007d20:	6023      	str	r3, [r4, #0]
 8007d22:	bd38      	pop	{r3, r4, r5, pc}
 8007d24:	200006e0 	.word	0x200006e0

08007d28 <_init>:
 8007d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d2a:	bf00      	nop
 8007d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d2e:	bc08      	pop	{r3}
 8007d30:	469e      	mov	lr, r3
 8007d32:	4770      	bx	lr

08007d34 <_fini>:
 8007d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d36:	bf00      	nop
 8007d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d3a:	bc08      	pop	{r3}
 8007d3c:	469e      	mov	lr, r3
 8007d3e:	4770      	bx	lr
